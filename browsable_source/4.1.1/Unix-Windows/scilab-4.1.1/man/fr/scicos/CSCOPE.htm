<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">

<!--Converted with LaTeX2HTML 2002-2-1 (1.70)
original version by:  Nikos Drakos, CBLU, University of Leeds
* revised and updated by:  Marcus Hennecke, Ross Moore, Herb Swan
* with significant contributions from:
  Jens Lippmann, Marek Rouchal, Martin Wilck and others -->
<HTML>
<HEAD>
<TITLE>Scope </TITLE>
<META NAME="description" CONTENT="Scope ">
<META NAME="keywords" CONTENT="main">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">

<META NAME="Generator" CONTENT="LaTeX2HTML v2002-2-1">
<META HTTP-EQUIV="Content-Style-Type" CONTENT="text/css">

<LINK REL="STYLESHEET" HREF="main.css">

</HEAD>

<BODY bgcolor="#FFFFFF">

<!--Table of Child-Links-->
<A NAME="CHILD_LINKS"><STRONG>Subsections</STRONG></A>

<UL>
<LI><A NAME="tex2html3240"
  HREF="CSCOPE.htm#SECTION00526100000000000000">Library</A>
<LI><A NAME="tex2html3241"
  HREF="CSCOPE.htm#SECTION00526200000000000000">Description</A>
<LI><A NAME="tex2html3242"
  HREF="CSCOPE.htm#SECTION00526300000000000000">Dialog Box</A>
<LI><A NAME="tex2html3243"
  HREF="CSCOPE.htm#SECTION00526400000000000000">Default properties</A>
<LI><A NAME="tex2html3244"
  HREF="CSCOPE.htm#SECTION00526500000000000000">Interfacing function</A>
<LI><A NAME="tex2html3245"
  HREF="CSCOPE.htm#SECTION00526600000000000000">Computational function (type 4)</A>
</UL>
<!--End of Table of Child-Links-->
<HR>

<H2><A NAME="SECTION00526000000000000000"></A><A NAME="CSCOPE"></A>
<BR>
Scope 
</H2>
<DIV ALIGN="CENTER">
<!-- MATH
 $\epsfig{file=CSCOPE.eps,width=90.00pt}$
 -->
<IMG
 WIDTH="143" HEIGHT="161" ALIGN="BOTTOM" BORDER="0"
 SRC="img42.gif"
 ALT="\epsfig{file=CSCOPE.eps,width=90.00pt}">
</DIV>
<H3><font color="blue"><A NAME="SECTION00526100000000000000">
Library</A>
</font></H3>
Sinks

<H3><font color="blue"><A NAME="SECTION00526200000000000000">
Description</A>
</font></H3>

<P>

<H3><font color="blue"><A NAME="SECTION00526300000000000000">
Dialog Box</A>
</font></H3>
<DIV ALIGN="CENTER">
<TABLE CELLPADDING=3 BORDER="1">
<TR><TD ALIGN="CENTER">Set Scope parameters</TD>
<TD></TD>
</TR>
<TR><TD ALIGN="CENTER">Color (<IMG
 WIDTH="18" HEIGHT="32" ALIGN="MIDDLE" BORDER="0"
 SRC="img2.gif"
 ALT="$ &gt;$">0) or mark (<IMG
 WIDTH="18" HEIGHT="32" ALIGN="MIDDLE" BORDER="0"
 SRC="img1.gif"
 ALT="$ &lt;$">0) vector (8 entries)</TD>
<TD ALIGN="CENTER">1 3 5 7 9 11 13 15</TD>
</TR>
<TR><TD ALIGN="CENTER">Output window number (-1 for automatic)</TD>
<TD ALIGN="CENTER">-1</TD>
</TR>
<TR><TD ALIGN="CENTER">Output window position</TD>
<TD ALIGN="CENTER">[]</TD>
</TR>
<TR><TD ALIGN="CENTER">Output window sizes</TD>
<TD ALIGN="CENTER">[600;400]</TD>
</TR>
<TR><TD ALIGN="CENTER">Ymin</TD>
<TD ALIGN="CENTER">-15</TD>
</TR>
<TR><TD ALIGN="CENTER">Ymax</TD>
<TD ALIGN="CENTER">15</TD>
</TR>
<TR><TD ALIGN="CENTER">Refresh period</TD>
<TD ALIGN="CENTER">30</TD>
</TR>
<TR><TD ALIGN="CENTER">Buffer size</TD>
<TD ALIGN="CENTER">2</TD>
</TR>
<TR><TD ALIGN="CENTER">Accept herited events 0/1</TD>
<TD ALIGN="CENTER">0</TD>
</TR>
<TR><TD ALIGN="CENTER">Name of Scope (label&amp;Id)</TD>
<TD ALIGN="CENTER">&nbsp;</TD>
</TR>
</TABLE>
</DIV>

<UL>
<LI>Color : a vector of integers. The i-th element is the color
  number (<IMG
 WIDTH="31" HEIGHT="32" ALIGN="MIDDLE" BORDER="0"
 SRC="img36.gif"
 ALT="$ &gt;0$">) or dash type (<IMG
 WIDTH="31" HEIGHT="32" ALIGN="MIDDLE" BORDER="0"
 SRC="img37.gif"
 ALT="$ &lt;0$">) used to draw the evolution of the i-th
  input port signal. See  <B>plot2d</B>  for color (dash type) definitions.   
</LI>
<LI>Output window number :The number of graphic window used for 
  the display. It is often good to use high values to avoid conflict 
  with palettes and Super Block windows. If default value is used <B>  (1)</B>, Scicos define the output window number.  
</LI>
<LI>Output window position:a 2 vector specifying the coordinates
  of the upper left corner of the graphic window. Answer [] for 
  default window position.   
</LI>
<LI>Output window sizes: a 2 vector specifying the coordinates of
  the upper left corner of the graphic window. Answer [] for default 
  window position.   
</LI>
<LI>Ymin: Minimum  values of the input; used to set up the Y-axis
  of the plot in the graphics window.   
</LI>
<LI>Ymax: Maximum values of the input; used to set up the Y-axis
  of the plot in the graphics window.   
</LI>
<LI>Refresh period: Maximum value on the X-axis (time). The plot
  is redrawn when time reaches a multiple of this value.  
</LI>
<LI>Buffer size:To improve efficiency it is possible to buffer the
  input data. The drawing is only done after each  <B>Buffer size</B>
  call to the block.   
</LI>
<LI>Accept herited events 0/1: if 0  <B>CSCOPE_f</B>  draws a new point
  only when an event occurs on its event input port. if 1  <B>CSCOPE_f</B>
  draws a new point when an event occurs on its event input port and
  when it's regular input changes due to an event on an other upstrem
  block (herited events).  
</LI>
<LI>Name of Scope : Name/label of the block.
</LI>
</UL>

<H3><font color="blue"><A NAME="SECTION00526400000000000000">
Default properties</A>
</font></H3>

<UL>
<LI>always active: no
</LI>
<LI>direct-feedthrough: yes
</LI>
<LI>zero-crossing: no
</LI>
<LI>mode: no
</LI>
<LI>number/sizes of inputs: 1 / -1
</LI>
<LI>number/sizes of outputs: 0 / 
</LI>
<LI>number/sizes of activation inputs: 1 / 1
</LI>
<LI>number/sizes of activation outputs: 0 / 
</LI>
<LI>continuous-time state: no
</LI>
<LI>discrete-time state: yes
</LI>
<LI>name of computational function: <EM>cscope</EM>
</LI>
</UL>
<H3><font color="blue"><A NAME="SECTION00526500000000000000">
Interfacing function</A>
</font></H3>
<TT>scilab/macros/scicos_blocks/sinks/CSCOPE.sci</TT>

<H3><font color="blue"><A NAME="SECTION00526600000000000000">
Computational function (type 4)</A>
</font></H3>
<BR>
<PRE>#include "scicos_block.h"
#include &lt;math.h&gt;
#include "../machine.h"

#if WIN32
#define NULL    0
#endif

static int c__1 = 1;
static int c__0 = 0;
static int c_n1 = -1;
static int c__4 = 4;
static int c__21 = 21;
static int c__3 = 3;
static double c_b84 = 0.;

void cscope(scicos_block *block,int flag)
{
  double t;
  double *z__;
  double *rpar;
  int *ipar, nipar,nu,kfun;
  
 
  /* Initialized data */
  
  static double frect[4] = { 0.,0.,1.,1. };
  static int cur = 0;
  static int verb = 0;
  
  int i__1,i;
  
  static double rect[4];
  extern int C2F(getlabel)(), C2F(dset)();
  static double ymin, ymax;
  static int i__, k, n, v;
  static double tsave;
  static int n1, n2;
  extern int C2F(plot2d)(), C2F(setscale2d)();
  static int na;
  extern int C2F(dr)();
  static double dt, dv;
  static int nxname;
  extern int C2F(sciwin)(), C2F(dr1)(), C2F(scicosclip)();
  static char buf[40];
  static int wid, iwd;
  static double per;
  static int nax[4], iwp;
  
  /*     Copyright INRIA */
  /*     Scicos block simulator */
  /*     ipar(1) = win_num */
  /*     ipar(2) = 0/1 color flag */
  /*     ipar(3) = buffer size */
  /*     ipar(4:11) = line type for ith curve */
  
  /*     ipar(12:13) : window position */
  /*     ipar(14:15) : window dimension */
  
  /*     rpar(1)=dt */
  /*     rpar(2)=ymin */
  /*     rpar(3)=ymax */
  /*     rpar(4)=periode */
  
   nu=block-&gt;insz[0];
  if (nu&gt;8) {nu=8;}
  rpar=block-&gt;rpar;
  ipar=block-&gt;ipar;
  nipar=block-&gt;nipar;
  t=get_scicos_time();
  
  /*      character*(4) logf */
  /* Parameter adjustments */
  --ipar;
  --rpar;
  
  iwp = nipar - 3;
  iwd = nipar - 1;

  wid = ipar[1];
  if(wid==-1){
    wid=20000+get_block_number();
  }
  
  if (flag == 2) {
    z__=*block-&gt;work; 
    --z__;
    dt = rpar[1];
    ymin = rpar[2];
    ymax = rpar[3];
    per = rpar[4];
    n = ipar[3];
    k = (int) z__[1];
    if (k &gt; 0) {
      n1 = (int) (z__[k + 1] / per);
      if (z__[k + 1] &lt; 0.) {
	--n1;
      }
    } else {
      n1 = 0;
    }
    
    tsave = t;
    if (dt &gt; 0.) {
      t = z__[k + 1] + dt;
    }
    
    n2 = (int) (t / per);
    if (t &lt; 0.) {
      --n2;
    }
    
    /*     add new point to the buffer */
    ++k;
    z__[k + 1] = t;
    for (i = 0; i &lt; nu; ++i) {
      z__[n + 1 + i * n + k] = block-&gt;inptr[0][i];
      /* L1: */
    }
    z__[1] = (double) k;
    if (n1 == n2 &amp;&amp; k &lt; n) {
      t = tsave;
      return ;
    }
    
    /*     plot 1:K points of the buffer */
    C2F(dr1)("xget\000", "window\000", &amp;verb, &amp;cur, &amp;na, &amp;v, &amp;v, &amp;v, &amp;dv, &amp;dv,
	     &amp;dv, &amp;dv);
    if (cur != wid) {
      C2F(dr1)("xset\000", "window\000", &amp;wid, &amp;v, &amp;v, &amp;v, &amp;v, &amp;v, &amp;dv, &amp;dv,
	       &amp;dv, &amp;dv);
    }
    C2F(dr1)("xsetdr\000", "Rec\000", &amp;v, &amp;v, &amp;v, &amp;v, &amp;v, &amp;v, &amp;dv, &amp;dv, &amp;dv, &amp;
	     dv);
    if (k &gt; 0) {
      C2F(scicosclip)(&amp;c__1);
      for (i__ = 0; i__ &lt; nu; ++i__) {
	C2F(dr1)("xpolys\000", "v\000", &amp;v, &amp;v, &amp;ipar[i__ + 4], &amp;c__1, &amp;k,
		 &amp;v, &amp;z__[2], &amp;z__[n + 2 + i__  * n], &amp;dv, &amp;dv);
      }
      C2F(scicosclip)(&amp;c__0);
    }
    /*     shift buffer left */
    z__[2] = z__[k + 1];
    for (i__ = 0; i__ &lt; nu; ++i__) {
      z__[n + 1 + i__ * n + 1] = z__[n + 1 + i__ * n + k];
    }
    z__[1] = 1.;
	if (n1 != n2) {
	  /*     clear window */
	  nax[0] = 2;
	  nax[1] = 10;
	    nax[2] = 2;
	    nax[3] = 10;
	    C2F(dr1)("xclear\000", "v\000", &amp;v, &amp;v, &amp;v, &amp;v, &amp;v, &amp;v, &amp;dv, &amp;dv, &amp;dv,
		     &amp;dv);
	    C2F(dr1)("xset\000", "use color\000", &amp;ipar[2], &amp;c__0, &amp;c__0, &amp;c__0, &amp;
		     c__0, &amp;v, &amp;dv, &amp;dv, &amp;dv, &amp;dv);
	    C2F(dr)("xstart\000", "v\000", &amp;wid, &amp;v, &amp;v, &amp;v, &amp;v, &amp;v, &amp;dv, &amp;dv, &amp;
		    dv, &amp;dv);
	    rect[0] = per * (n1 + 1);
	    rect[1] = ymin;
	    rect[2] = per * (n1 + 2);
	    rect[3] = ymax;
	    C2F(dr1)("xset\000", "dashes\000", &amp;c__0, &amp;c__0, &amp;c__0, &amp;c__0, &amp;c__0, 
		     &amp;v, &amp;dv, &amp;dv, &amp;dv, &amp;dv);
	    C2F(plot2d)(rect, &amp;rect[1], &amp;c__1, &amp;c__1, &amp;c_n1, "011", buf, rect, nax,
			&amp;c__4, &amp;c__21);
	}
	t = tsave;
	
  } else if (flag == 4) {/* the workspace is used to store buffer 
			     */
    if ((*block-&gt;work=
	 scicos_malloc(sizeof(double)*(1+ipar[3]*(1+nu))))== NULL ) {
      set_block_error(-16);
      return;
    }
    z__=*block-&gt;work; 
    --z__;
    z__[1]=-1.0;


    n = ipar[3];
    ymin = rpar[2];
    ymax = rpar[3];
    per = rpar[4];
    nax[0] = 2;
    nax[1] = 10;
    nax[2] = 2;
    nax[3] = 10;
    n1 = (int) (t / per);
    if (t &lt;= 0.) {
      --n1;
    }
    C2F(sciwin)();
    C2F(dr1)("xset\000", "window\000", &amp;wid, &amp;v, &amp;v, &amp;v, &amp;v, &amp;v, &amp;dv, &amp;dv, &amp;
	     dv, &amp;dv);
    C2F(dr1)("xsetdr\000", "Rec\000", &amp;v, &amp;v, &amp;v, &amp;v, &amp;v, &amp;v, &amp;dv, &amp;dv, &amp;dv, &amp;
	     dv);
    if (ipar[iwp] &gt;= 0) {
	    C2F(dr1)("xset\000", "wpos\000", &amp;ipar[iwp], &amp;ipar[iwp + 1], &amp;v, &amp;v, &amp;
		     v, &amp;v, &amp;dv, &amp;dv, &amp;dv, &amp;dv);
    }
    if (ipar[iwd] &gt;= 0) {
      C2F(dr1)("xset\000", "wdim\000", &amp;ipar[iwd], &amp;ipar[iwd + 1], &amp;v, &amp;v, &amp;
	       v, &amp;v, &amp;dv, &amp;dv, &amp;dv, &amp;dv);
      /*     to force dimensions update */
      C2F(dr1)("xset\000", "window\000", &amp;wid, &amp;v, &amp;v, &amp;v, &amp;v, &amp;v, &amp;dv, &amp;dv,
	       &amp;dv, &amp;dv);
    }
    rect[0] = per * (n1 + 1);
    rect[1] = ymin;
    rect[2] = per * (n1 + 2);
    rect[3] = ymax;
    C2F(setscale2d)(frect, rect, "nn\000");
    C2F(dr1)("xset\000", "use color\000", &amp;ipar[2], &amp;c__0, &amp;c__0, &amp;c__0, &amp;
	     c__0, &amp;v, &amp;dv, &amp;dv, &amp;dv, &amp;dv);
    C2F(dr1)("xset\000", "alufunction\000", &amp;c__3, &amp;c__0, &amp;c__0, &amp;c__0, &amp;c__0,
	     &amp;v, &amp;dv, &amp;dv, &amp;dv, &amp;dv);
    C2F(dr1)("xclear\000", "v\000", &amp;v, &amp;v, &amp;v, &amp;v, &amp;v, &amp;v, &amp;dv, &amp;dv, &amp;dv, &amp;
	     dv);
    C2F(dr)("xstart\000", "v\000", &amp;wid, &amp;v, &amp;v, &amp;v, &amp;v, &amp;v, &amp;dv, &amp;dv, &amp;dv, &amp;
	    dv);
    C2F(dr1)("xset\000", "dashes\000", &amp;c__0, &amp;c__0, &amp;c__0, &amp;c__0, &amp;c__0, &amp;v, 
	     &amp;dv, &amp;dv, &amp;dv, &amp;dv);
    C2F(plot2d)(rect, &amp;rect[1], &amp;c__1, &amp;c__1, &amp;c_n1, "011", buf, rect, nax, &amp;
		c__4, &amp;c__21);
    C2F(scicosclip)(&amp;c__1);
    nxname = 40;
    kfun=get_block_number();
    C2F(getlabel)(&amp;kfun, buf, &amp;nxname);
    if (nxname &gt; 39) {
      nxname = 39;
    }
    i__1 = nxname;
    *(buf+i__1)=*"\000";
    if ((nxname == 1 &amp;&amp; *(unsigned char *)buf == ' ') || (nxname == 0)) {
    } else {
      C2F(dr)("xname\000", buf, &amp;v, &amp;v, &amp;v, &amp;v, &amp;v, &amp;v, &amp;dv, &amp;dv, &amp;dv, &amp;dv);
    }
    z__[1] = 0.;
    z__[2] = t;
    i__1 = nu * n;
    C2F(dset)(&amp;i__1, &amp;c_b84, &amp;z__[3], &amp;c__1);
  } else if (flag == 5) {
    z__=*block-&gt;work; 
    --z__;
    n = ipar[3];
    k = (int) z__[1];
    if (k &lt;= 1) {
      scicos_free(*block-&gt;work);
      return ;
    }
    C2F(dr1)("xget\000", "window\000", &amp;verb, &amp;cur, &amp;na, &amp;v, &amp;v, &amp;v, &amp;dv, &amp;dv,
	     &amp;dv, &amp;dv);
    if (cur != wid) {
      C2F(dr1)("xset\000", "window\000", &amp;wid, &amp;v, &amp;v, &amp;v, &amp;v, &amp;v, &amp;dv, &amp;dv,
	       &amp;dv, &amp;dv);
    }
    C2F(scicosclip)(&amp;c__1);
    for (i__ = 0; i__ &lt; nu; ++i__) {
      C2F(dr1)("xpolys\000", "v\000", &amp;v, &amp;v, &amp;ipar[i__ + 4], &amp;c__1, &amp;k, &amp;v,
	       &amp;z__[2], &amp;z__[n + 2 + i__ * n], &amp;dv, &amp;dv);
    }
    C2F(scicosclip)(&amp;c__0);
    scicos_free(*block-&gt;work);
  }
}
</PRE>
<HR>
<ADDRESS>
Ramine Nikoukhah
2004-06-22
</ADDRESS>
</BODY>
</HTML>
