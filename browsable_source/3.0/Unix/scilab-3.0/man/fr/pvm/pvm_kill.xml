<?xml version="1.0" encoding="ISO-8859-1" standalone="no"?>
<!DOCTYPE MAN SYSTEM "../../manrev.dtd">
<MAN>
  <LANGUAGE>eng</LANGUAGE>
  <TITLE>pvm_kill</TITLE>
  <TYPE>Scilab function</TYPE>
  <DATE>January 1998</DATE>
  <SHORT_DESCRIPTION name="pvm_kill">  Terminates a specified PVM process.  </SHORT_DESCRIPTION>
  <CALLING_SEQUENCE>
    <CALLING_SEQUENCE_ITEM>[infos] = pvm_kill(tids)  </CALLING_SEQUENCE_ITEM>
  </CALLING_SEQUENCE>
  <PARAM>
    <PARAM_INDENT>
      <PARAM_ITEM>
        <PARAM_NAME>tids</PARAM_NAME>
        <PARAM_DESCRIPTION>
          <SP>: row of integer, task identifier of the PVM process to be killed (not yourself).</SP>
        </PARAM_DESCRIPTION>
      </PARAM_ITEM>
      <PARAM_ITEM>
        <PARAM_NAME>infos</PARAM_NAME>
        <PARAM_DESCRIPTION>
          <SP>: row of integer, status code returned by the routine. Values less than zero indicate an error.</SP>
        </PARAM_DESCRIPTION>
      </PARAM_ITEM>
    </PARAM_INDENT>
  </PARAM>
  <DESCRIPTION>
    <P><VERB>pvm_kill</VERB> 
    sends a terminate (<VERB>SIGTERM</VERB>) signal
    to the PVM process identified by <VERB>tids</VERB>.</P>
    <P>
    In the case of multiprocessors the terminate signal is replaced
    with a host dependent method for killing a process.</P>
    <P>
    The array <VERB>infos</VERB>
    can be checked to determine the status for each process.
    Values less than zero indicate an error,
    while zero values indicate a success.</P>
    <P><VERB>pvm_kill</VERB> is not designed to kill the calling process.
    To kill yourself in C call <VERB>pvm_exit()</VERB> 
    followed by <VERB>quit()</VERB>.</P>
  </DESCRIPTION>
  <EXAMPLE>
<![CDATA[
info = pvm_kill(262153)
 ]]>
  </EXAMPLE>
  <SEE_ALSO>
    <SEE_ALSO_ITEM>
      <LINK>pvm_exit</LINK>
    </SEE_ALSO_ITEM>
  </SEE_ALSO>
</MAN>
