<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">

<!--Converted with LaTeX2HTML 2002-2-1 (1.70)
original version by:  Nikos Drakos, CBLU, University of Leeds
* revised and updated by:  Marcus Hennecke, Ross Moore, Herb Swan
* with significant contributions from:
  Jens Lippmann, Marek Rouchal, Martin Wilck and others -->
<HTML>
<HEAD>
<TITLE>Time delay </TITLE>
<META NAME="description" CONTENT="Time delay ">
<META NAME="keywords" CONTENT="main">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">

<META NAME="Generator" CONTENT="LaTeX2HTML v2002-2-1">
<META HTTP-EQUIV="Content-Style-Type" CONTENT="text/css">

<LINK REL="STYLESHEET" HREF="main.css">

</HEAD>

<BODY bgcolor="#FFFFFF">

<!--Table of Child-Links-->
<A NAME="CHILD_LINKS"><STRONG>Subsections</STRONG></A>

<UL>
<LI><A NAME="tex2html5070"
  HREF="TIME_DELAY.htm#SECTION00587100000000000000">Library</A>
<LI><A NAME="tex2html5071"
  HREF="TIME_DELAY.htm#SECTION00587200000000000000">Description</A>
<LI><A NAME="tex2html5072"
  HREF="TIME_DELAY.htm#SECTION00587300000000000000">Dialog Box</A>
<LI><A NAME="tex2html5073"
  HREF="TIME_DELAY.htm#SECTION00587400000000000000">Default properties</A>
<LI><A NAME="tex2html5074"
  HREF="TIME_DELAY.htm#SECTION00587500000000000000">Interfacing function</A>
<LI><A NAME="tex2html5075"
  HREF="TIME_DELAY.htm#SECTION00587600000000000000">Computational function (type 4)</A>
</UL>
<!--End of Table of Child-Links-->
<HR>

<H2><A NAME="SECTION00587000000000000000"></A><A NAME="TIME_DELAY"></A>
<BR>
Time delay 
</H2>
<DIV ALIGN="CENTER">
<!-- MATH
 $\epsfig{file=TIME_DELAY.eps,width=90.00pt}$
 -->
<IMG
 WIDTH="143" HEIGHT="108" ALIGN="BOTTOM" BORDER="0"
 SRC="img147.gif"
 ALT="\epsfig{file=TIME_DELAY.eps,width=90.00pt}">
</DIV>
<H3><font color="blue"><A NAME="SECTION00587100000000000000">
Library</A>
</font></H3>
Linear

<H3><font color="blue"><A NAME="SECTION00587200000000000000">
Description</A>
</font></H3>

<P>

<H3><font color="blue"><A NAME="SECTION00587300000000000000">
Dialog Box</A>
</font></H3>
<DIV ALIGN="CENTER">
<TABLE CELLPADDING=3 BORDER="1">
<TR><TD ALIGN="CENTER">Set delay parameters</TD>
<TD></TD>
</TR>
<TR><TD ALIGN="CENTER">Delay</TD>
<TD ALIGN="CENTER">1</TD>
</TR>
<TR><TD ALIGN="CENTER">initial input</TD>
<TD ALIGN="CENTER">0</TD>
</TR>
<TR><TD ALIGN="CENTER">Buffer size</TD>
<TD ALIGN="CENTER">1024</TD>
</TR>
</TABLE>
</DIV>

<UL>
<LI>Delay:The amount of simulation time that the input signal is
  delayed before being propagated to the output. The value must be
  nonnegative. 
</LI>
<LI>initial input: The output generated by the block between the
  start of the simulation and the Time delay. 
</LI>
<LI>Buffer size:The initial memory allocation for the number of
  points to store. 
</LI>
</UL>

<H3><font color="blue"><A NAME="SECTION00587400000000000000">
Default properties</A>
</font></H3>

<UL>
<LI>always active: no
</LI>
<LI>direct-feedthrough: no
</LI>
<LI>zero-crossing: no
</LI>
<LI>mode: no
</LI>
<LI>number/sizes of inputs: 1 / -1
</LI>
<LI>number/sizes of outputs: 1 / -1
</LI>
<LI>number/sizes of activation inputs: 0 / 
</LI>
<LI>number/sizes of activation outputs: 0 / 
</LI>
<LI>continuous-time state: no
</LI>
<LI>discrete-time state: no
</LI>
<LI>name of computational function: <EM>time_delay</EM>
</LI>
</UL>
<H3><font color="blue"><A NAME="SECTION00587500000000000000">
Interfacing function</A>
</font></H3>
<TT>scilab/macros/scicos_blocks/linear/TIME_DELAY.sci</TT>

<H3><font color="blue"><A NAME="SECTION00587600000000000000">
Computational function (type 4)</A>
</font></H3>
<BR>
<PRE>#include "scicos_block.h"
#include &lt;math.h&gt;
#include "../machine.h"

#if WIN32
#define NULL    0
#endif

extern void sciprint __PARAMS((char *fmt,...));

void time_delay(scicos_block *block,int flag)
{/*  rpar[0]=delay, rpar[1]=init value, ipar[0]=buffer length */
  double* pw,del,t,td;
  int* iw;
  int i,j,k;
  if (flag == 4){/* the workspace is used to store previous values */
    if ((*block-&gt;work=
	 scicos_malloc(sizeof(int)+sizeof(double)* 
		       block-&gt;ipar[0]*(1+block-&gt;insz[0])))== NULL ) {
      set_block_error(-16);
      return;
    }
    pw=*block-&gt;work; 
    pw[0]=-block-&gt;rpar[0]*block-&gt;ipar[0];
    for(i=1;i&lt; block-&gt;ipar[0];i++){
      pw[i]=pw[i-1]+block-&gt;rpar[0];
      for(j=1;j&lt; block-&gt;insz[0]+1;j++){
	pw[i+block-&gt;ipar[0]*j]=block-&gt;rpar[1];
      }
    }
    iw=(int *)(pw+block-&gt;ipar[0]*(1+block-&gt;insz[0]));
    *iw=0;
  }else  if (flag == 5){
    scicos_free(*block-&gt;work);
  } else if (flag==0||flag==2) {
    if (flag==2) do_cold_restart();
    pw=*block-&gt;work; 
    iw=(int *)(pw+block-&gt;ipar[0]*(1+block-&gt;insz[0]));
    t=get_scicos_time();
    td=t-block-&gt;rpar[0];
    if(td&lt;pw[*iw]){
      sciprint("delayed time=%f but last stored time=%f \r\n", td, pw[*iw]);
      sciprint("Conisder increasing the length of buffer in delay block \r\n");
    }

    if (t&gt;pw[(block-&gt;ipar[0]+*iw-1)%block-&gt;ipar[0]]){
      for(j=1;j&lt; block-&gt;insz[0]+1;j++){
	pw[*iw +block-&gt;ipar[0]*j]=block-&gt;inptr[0][j-1];
      }
      pw[*iw]=t;
      /*sciprint("**time is %f. I put %f, in %d \r\n", t,block-&gt;inptr[0][0],*iw);*/
      *iw=(*iw+1)%block-&gt;ipar[0];
 
    }else{
      for(j=1;j&lt; block-&gt;insz[0]+1;j++){
	pw[(block-&gt;ipar[0]+*iw-1)%block-&gt;ipar[0] +block-&gt;ipar[0]*j]=block-&gt;inptr[0][j-1];
      }
      pw[(block-&gt;ipar[0]+*iw-1)%block-&gt;ipar[0]]=t;
      /*sciprint("**time is %f. I put %f, in %d \r\n", t,block-&gt;inptr[0][0],*iw);*/

    }

  } else if (flag==1) {
    pw=*block-&gt;work; 
    iw=(int *) (pw+block-&gt;ipar[0]*(1+block-&gt;insz[0]));
    t=get_scicos_time();
    td=t-block-&gt;rpar[0];

    i=0;j= block-&gt;ipar[0]-1;

    while (j-i&gt;1) {
      k=(i+j)/2;
      if (td&lt;pw[(k+*iw)%block-&gt;ipar[0]]) {
	j=k;
      }else if (td&gt;pw[(k+*iw)%block-&gt;ipar[0]]) {
	i=k;
      }else{
	i=k;
	j=k;
	break;
      }
    }
    i=(i+*iw)%block-&gt;ipar[0];
    j=(j+*iw)%block-&gt;ipar[0];
    del=pw[j]-pw[i];
    /*sciprint("time is %f. interpolating %d and %d, i.e. %f, %f\r\n", t,i,j,pw[i],pw[j]);*/
    if(del!=0.0){
      for (k=1;k&lt;block-&gt;insz[0]+1;k++){
	block-&gt;outptr[0][k-1]=((pw[j]-td)*pw[i+block-&gt;ipar[0]*k] +
			       (td-pw[i])*pw[j+block-&gt;ipar[0]*k])/del;
      }
    }else{
      for (k=1;k&lt;block-&gt;insz[0]+1;k++){
	block-&gt;outptr[0][k-1]=pw[i+block-&gt;ipar[0]*k];
      }
    }
  }
}
</PRE>
<HR>
<ADDRESS>
Ramine Nikoukhah
2004-06-22
</ADDRESS>
</BODY>
</HTML>
