<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">

<!--Converted with LaTeX2HTML 2002-2-1 (1.70)
original version by:  Nikos Drakos, CBLU, University of Leeds
* revised and updated by:  Marcus Hennecke, Ross Moore, Herb Swan
* with significant contributions from:
  Jens Lippmann, Marek Rouchal, Martin Wilck and others -->
<HTML>
<HEAD>
<TITLE>Read binary data </TITLE>
<META NAME="description" CONTENT="Read binary data ">
<META NAME="keywords" CONTENT="main">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">

<META NAME="Generator" CONTENT="LaTeX2HTML v2002-2-1">
<META HTTP-EQUIV="Content-Style-Type" CONTENT="text/css">

<LINK REL="STYLESHEET" HREF="main.css">

</HEAD>

<BODY bgcolor="#FFFFFF">

<!--Table of Child-Links-->
<A NAME="CHILD_LINKS"><STRONG>Subsections</STRONG></A>

<UL>
<LI><A NAME="tex2html2999"
  HREF="READC_f.htm#SECTION005115100000000000000">Library</A>
<LI><A NAME="tex2html3000"
  HREF="READC_f.htm#SECTION005115200000000000000">Description</A>
<LI><A NAME="tex2html3001"
  HREF="READC_f.htm#SECTION005115300000000000000">Dialog Box</A>
<LI><A NAME="tex2html3002"
  HREF="READC_f.htm#SECTION005115400000000000000">Default properties</A>
<LI><A NAME="tex2html3003"
  HREF="READC_f.htm#SECTION005115500000000000000">Interfacing function</A>
<LI><A NAME="tex2html3004"
  HREF="READC_f.htm#SECTION005115600000000000000">Computational function (type 2)</A>
</UL>
<!--End of Table of Child-Links-->
<HR>

<H2><A NAME="SECTION005115000000000000000"></A><A NAME="READC_f"></A>
<BR>
Read binary data 
</H2>
<DIV ALIGN="CENTER">
<!-- MATH
 $\epsfig{file=READC_f.eps,width=90.00pt}$
 -->
<IMG
 WIDTH="143" HEIGHT="108" ALIGN="BOTTOM" BORDER="0"
 SRC="img30.gif"
 ALT="\epsfig{file=READC_f.eps,width=90.00pt}">
</DIV>
<H3><font color="blue"><A NAME="SECTION005115100000000000000">
Library</A>
</font></H3>
Sources

<H3><font color="blue"><A NAME="SECTION005115200000000000000">
Description</A>
</font></H3>
This block allows user to read datas in a C file.  Output record
selection  and  Time record Selection  allows the user to select data
among file records. Each call to the block advance one record in the
file.    

<H3><font color="blue"><A NAME="SECTION005115300000000000000">
Dialog Box</A>
</font></H3>
<DIV ALIGN="CENTER">
<TABLE CELLPADDING=3 BORDER="1">
<TR><TD ALIGN="CENTER">Set READC block parameters</TD>
<TD></TD>
</TR>
<TR><TD ALIGN="CENTER">Time record selection</TD>
<TD ALIGN="CENTER">[]</TD>
</TR>
<TR><TD ALIGN="CENTER">Outputs record selection</TD>
<TD ALIGN="CENTER">1</TD>
</TR>
<TR><TD ALIGN="CENTER">Input file name</TD>
<TD ALIGN="CENTER">foo</TD>
</TR>
<TR><TD ALIGN="CENTER">Input Format</TD>
<TD ALIGN="CENTER">d</TD>
</TR>
<TR><TD ALIGN="CENTER">Record size</TD>
<TD ALIGN="CENTER">1</TD>
</TR>
<TR><TD ALIGN="CENTER">Buffer size (in records)</TD>
<TD ALIGN="CENTER">20</TD>
</TR>
<TR><TD ALIGN="CENTER">Initial record index</TD>
<TD ALIGN="CENTER">1</TD>
</TR>
<TR><TD ALIGN="CENTER">Swap mode 0/1</TD>
<TD ALIGN="CENTER">0</TD>
</TR>
</TABLE>
</DIV>

<UL>
<LI>Time record selection: an empty matrix or a positive
  integer. If an integer  i  is given the  i th element of the read
  record is assumed to be the date of the output event. If empty no
  output event exists.  
</LI>
<LI>Outputs record selection: a vector of positive integer.
  <!-- MATH
 $[k_1,\cdots,k_n]$
 -->
<IMG
 WIDTH="90" HEIGHT="35" ALIGN="MIDDLE" BORDER="0"
 SRC="img12.gif"
 ALT="$ [k_1,\cdots,k_n]$"> ,The  <IMG
 WIDTH="19" HEIGHT="33" ALIGN="MIDDLE" BORDER="0"
 SRC="img13.gif"
 ALT="$ k_i$"> th element of the read record gives
  the  value of  <IMG
 WIDTH="10" HEIGHT="15" ALIGN="BOTTOM" BORDER="0"
 SRC="img11.gif"
 ALT="$ i$">th output.   
</LI>
<LI>Input file name:a character string defining the path of the file.
</LI>
<LI>Input Format: a character string defining the format to use. 
</LI>
<LI>Record size: The file is supposed to be formed by a sequence of
  data with same format. these data are organized in a sequence of
  record each of them containing  Record size  data.  
</LI>
<LI>Buffer size : To improve efficiency it is possible to buffer
  the input data. read on the file is only done after each  Buffer
  size  call to the block.  
</LI>
<LI>Initial record index: a scalar. This fixes the first record of
  the file to use.  
</LI>
<LI>Swap mode 0/1: With  <B>Swap mode=1</B>  the file is supposed to be
  coded in "little endian IEEE format" and data are swaped if
  necessary to match the IEEE format of the processor. If  <B>Swap
  mode=0</B> then automatic bytes swap is disabled.  
</LI>
</UL>

<H3><font color="blue"><A NAME="SECTION005115400000000000000">
Default properties</A>
</font></H3>

<UL>
<LI>always active: no
</LI>
<LI>direct-feedthrough: no
</LI>
<LI>zero-crossing: no
</LI>
<LI>mode: no
</LI>
<LI>number/sizes of inputs: 0 / 
</LI>
<LI>number/sizes of outputs: 1 / 1
</LI>
<LI>number/sizes of activation inputs: 1 / 1
</LI>
<LI>number/sizes of activation outputs: 0 / 
</LI>
<LI>continuous-time state: no
</LI>
<LI>discrete-time state: yes
</LI>
<LI>name of computational function: <EM>readc</EM>
</LI>
</UL>
<H3><font color="blue"><A NAME="SECTION005115500000000000000">
Interfacing function</A>
</font></H3>
<TT>scilab/macros/scicos_blocks/sources/READC_f.sci</TT>

<H3><font color="blue"><A NAME="SECTION005115600000000000000">
Computational function (type 2)</A>
</font></H3>
<BR>
<PRE>#include &lt;stdio.h&gt;
#include &lt;string.h&gt;

#include "../machine.h"
extern  int C2F(cvstr)  __PARAMS((integer *,integer *,char *,integer *,unsigned long int));
extern void sciprint __PARAMS((char *fmt,...));
extern void mget2 __PARAMS((FILE *fa, integer swap, double *res, integer n, char *type, integer *ierr));


int worldsize(type)
char type[4];
{
  char c;
  int wsz;

  c=type[0];
  if (c=='u') c=type[1];
  switch ( c )
    {
    case 'l' : wsz=sizeof(long);
      break;
    case 's' : wsz=sizeof(short);
      break;
    case 'c' : wsz=sizeof(char);
      break;
    case 'd' : wsz=sizeof(double);
      break;
    case 'f' : wsz=sizeof(float); 
      break;
    }
  return wsz;
}
void 
readc(flag,nevprt,t,xd,x,nx,z,nz,tvec,ntvec,rpar,nrpar,
	       ipar,nipar,inptr,insz,nin,outptr,outsz,nout)
     /*
     ipar[1]   = lfil : file name length
     ipar[2:4] = fmt  : numbers type ascii code
     ipar[5]   = is there a time record
     ipar[6]   = n : buffer length in number of records
     ipar[7]   = maxvoie : record size
     ipar[8]   = swap
     ipar[9]   = first : first record to read
     ipar[10:9+lfil] = character codes for file name
     ipar[10+lfil:9+lfil++ny+ievt] = reading mask
     */
integer *flag,*nevprt,*nx,*nz,*ntvec,*nrpar,ipar[],*nipar;
integer insz[],*nin,outsz[],*nout;
double x[],xd[],z[],tvec[],rpar[];
double *inptr[],*outptr[],*t;

{
  char str[100],type[4];
  int job = 1,three=3;
  FILE *fd;
  int n, k, ievt, kmax,/* no,*//* lfil,*/ m, i, irep,/* nm,*/ ierr;
  double *buffer,*record;
  int *mask;
  long offset;
  

  --ipar;
  --z;
  fd=(FILE *)(long)z[3];
  buffer = (z+4);
  mask = ipar+11+ipar[1]-ipar[5];
    
  /*
    k    : record counter within the buffer
    kmax :  number of records in the buffer
  */

  if (*flag==1) {
    n    = ipar[6];
    ievt = ipar[5];
    k    = (int)z[1];
    /* copy current record to output */
    record=buffer+(k-1)*ipar[7]-1;

    for (i=0;i&lt;outsz[0];i++)
      *(outptr[0]+i)=record[mask[ievt+i]];

    if (*nevprt&gt;0) {
      /*     discrete state */
      kmax = (int)z[2];
      if (k&gt;=kmax&amp;&amp;kmax==n) {
	/*     read a new buffer */
	m=ipar[6]*ipar[7];
	F2C(cvstr)(&amp;three,&amp;(ipar[2]),type,&amp;job, strlen(type));
	for (i=2;i&gt;=0;i--)
	  if (type[i]!=' ') { type[i+1]='\0';break;}
	ierr=0;
	mget2(fd,ipar[8],buffer,m,type,&amp;ierr);
	if (ierr&gt;0) {
	  sciprint("Read error!\n");
	  fclose(fd);
	  z[3] = 0.0;
	  *flag = -1;
	  return;
	}
	else if (ierr&lt;0) { /* EOF reached */
	  kmax=-(ierr+1)/ipar[7];
	}
	else
	  kmax=ipar[6];

	z[1] = 1.0;
	z[2] = kmax;
      }
      else if (k&lt;kmax) 
	z[1] = z[1]+1.0;
    }
  }
  else if (*flag==3) {
    ievt = ipar[5];
    n    = ipar[6];
    k    = (int)z[1];
    kmax = (int) z[2];
    if (k &gt; kmax &amp;&amp; kmax &lt; n) {
      if(ievt) 
	tvec[0] = *t-1.0;
      else
	tvec[0] = *t*(1.0+0.0000000001);
    }
    else {
      record=buffer+(k-1)*ipar[7]-1;
      if(ievt) tvec[0] = record[mask[0]];
    }
  }
  else if (*flag==4) {
    F2C(cvstr)(&amp;(ipar[1]),&amp;(ipar[10]),str,&amp;job,strlen(str));
    str[ipar[1]] = '\0';
    fd = fopen(str,"rb");
    if (!fd ) {
      sciprint("Could not open the file!\n");
      *flag = -1;
      return;
    }
    z[3]=(long)fd;
    /* skip first records */
    if (ipar[9]&gt;1) {
      F2C(cvstr)(&amp;three,&amp;(ipar[2]),type,&amp;job,strlen(type));
      for (i=2;i&gt;=0;i--)
	  if (type[i]!=' ') { type[i+1]='\0';break;}
      offset=(ipar[9]-1)*ipar[7]*worldsize(type);
      irep = fseek(fd,offset,0) ;
      if ( irep != 0 ) 
	{
	  sciprint("Read error\r\n");
	  *flag = -1;
	  fclose(fd);
	  z[3] = 0.0;
	  return;
	}
    }
    /* read first buffer */
    m=ipar[6]*ipar[7];
    F2C(cvstr)(&amp;three,&amp;(ipar[2]),type,&amp;job,strlen(type));
    for (i=2;i&gt;=0;i--)
	  if (type[i]!=' ') { type[i+1]='\0';break;}
    mget2(fd,ipar[8],buffer,m,type,&amp;ierr);
    if (ierr&gt;0) {
      sciprint("Read error!\n");
      *flag = -1;
      fclose(fd);
      z[3] = 0.0;
      return;
    }
    else if (ierr&lt;0) { /* EOF reached */
      kmax=-(ierr+1)/ipar[7];
    }
    else
      kmax=ipar[6];

    z[1] = 1.0;
    z[2] = kmax;
  }
  else if (*flag==5) {
    if(z[3]==0) return;
    fclose(fd);
    z[3] = 0.0;
  }
  return;
}
</PRE>
<HR>
<ADDRESS>
Ramine Nikoukhah
2004-06-22
</ADDRESS>
</BODY>
</HTML>
