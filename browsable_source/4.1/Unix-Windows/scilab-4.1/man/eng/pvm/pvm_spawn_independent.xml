<?xml version="1.0" encoding="ISO-8859-1" standalone="no"?>
<!DOCTYPE MAN SYSTEM "../../manrev.dtd">
<MAN>
  <LANGUAGE>eng</LANGUAGE>
  <TITLE>pvm_spawn_independent</TITLE>
  <TYPE>Scilab function</TYPE>
  <DATE>January 1998</DATE>
  <SHORT_DESCRIPTION name="pvm_spawn_independent"> Starts new PVM processes.  </SHORT_DESCRIPTION>
  <CALLING_SEQUENCE>
    <CALLING_SEQUENCE_ITEM>[tids, numt] = pvm_spawn_independent(task,  ntask, [where])  </CALLING_SEQUENCE_ITEM>
  </CALLING_SEQUENCE>
  <PARAM>
    <PARAM_INDENT>
      <PARAM_ITEM>
        <PARAM_NAME>task:  </PARAM_NAME>
        <PARAM_DESCRIPTION>
          <SP>string, which is the executable file name of the PVM process to be started. The executable must already reside on the host on which it is to be started.  The name may be a file in the PVM search path or an absolute path.  The default PVM search path is $HOME/pvm3/bin/$PVM_ARCH/ .</SP>
        </PARAM_DESCRIPTION>
      </PARAM_ITEM>
      <PARAM_ITEM>
        <PARAM_NAME>ntask:  </PARAM_NAME>
        <PARAM_DESCRIPTION>
          <SP>integer, specifying the number of copies of the executable file to start.</SP>
        </PARAM_DESCRIPTION>
      </PARAM_ITEM>
      <PARAM_ITEM>
        <PARAM_NAME>where:  </PARAM_NAME>
        <PARAM_DESCRIPTION>
          <SP>string (optional), can be a host name such as ``tequila.ens-lyon.fr'' or a PVM architecture class such as ``SUN4''.</SP>
        </PARAM_DESCRIPTION>
      </PARAM_ITEM>
      <PARAM_ITEM>
        <PARAM_NAME>numt:  </PARAM_NAME>
        <PARAM_DESCRIPTION>
          <SP>integer, the actual number of tasks started.  Values less than zero indicate a system error.</SP>
        </PARAM_DESCRIPTION>
      </PARAM_ITEM>
      <PARAM_ITEM>
        <PARAM_NAME>tids</PARAM_NAME>
        <PARAM_DESCRIPTION>
          <SP>row of integers, array of the tids of the PVM processes started by this pvm_spawn_independent call.</SP>
        </PARAM_DESCRIPTION>
      </PARAM_ITEM>
    </PARAM_INDENT>
  </PARAM>
  <DESCRIPTION>
    <P><VERB>pvm_spawn_independent</VERB> 
    starts <VERB>ntask</VERB> copies of the executable named 
    <VERB>task</VERB>.</P>
    <P>
    On systems that support environment variables, 
    <VERB>pvm_spawn_independent</VERB> passes selected variables
    from parent environment to children tasks.  If set, the envar
    <VERB>PVM_EXPORT</VERB> is passed.  If <VERB>PVM_EXPORT</VERB> contains other names
    (separated by ':') they will be passed too.  This is useful for e.g.:</P>
    <VERBATIM>
<![CDATA[
 setenv DISPLAY myworkstation:0.0
 setenv MYSTERYVAR 13
 setenv PVM_EXPORT DISPLAY:MYSTERYVAR
   ]]>
    </VERBATIM>
    <P>
    The hosts on which the PVM processes are started are determined by the
     <VERB>where</VERB> arguments. On return the array
    <VERB>tids</VERB> contains the PVM task identifiers for each process started.
    If <VERB>pvm_spawn_independent</VERB> starts one or more tasks,
    <VERB>numt</VERB>
    will be the actual number of tasks started.  If a system error occurs
    then <VERB>numt</VERB> will be &lt; 0.
    If <VERB>numt</VERB> is les than  <VERB>ntask</VERB>
    then some executables have failed to start. 
    The last locations in the <VERB>tids</VERB> array 
    will contain error codes (see below for meaning). Note that the 
    first tids in the array are always valid.</P>
    <P>
    When the argument  <VERB>where</VERB> 
    is omitted  an heuristic (round-robin assignment) is used to
    distribute the <VERB>ntask</VERB> 
    processes across the virtual machine.</P>
    <P>
    In the special case where a multiprocessor is specified by
    <VERB>where</VERB>. 
    <VERB>pvm_spawn_independent</VERB> will start all
    copies on this single machine using the vendor's underlying routines.</P>
  </DESCRIPTION>
  <SEE_ALSO>
    <SEE_ALSO_ITEM>
      <LINK>pvm</LINK>
    </SEE_ALSO_ITEM>
    <SEE_ALSO_ITEM>
      <LINK>pvm_spawn</LINK>
    </SEE_ALSO_ITEM>
  </SEE_ALSO>
</MAN>
