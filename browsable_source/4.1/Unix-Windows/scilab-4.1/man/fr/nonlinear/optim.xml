<?xml version="1.0" encoding="ISO-8859-1" standalone="no"?>
<!DOCTYPE MAN SYSTEM "../../manrev.dtd">
<MAN>
  <LANGUAGE>eng</LANGUAGE>
  <TITLE>optim</TITLE>
  <TYPE>Scilab Function</TYPE>
  <DATE>April 1993</DATE>
  <SHORT_DESCRIPTION name="optim"> non-linear optimization routine</SHORT_DESCRIPTION>
  <CALLING_SEQUENCE>
    <CALLING_SEQUENCE_ITEM>[f,xopt]=optim(costf,x0)  </CALLING_SEQUENCE_ITEM>
    <CALLING_SEQUENCE_ITEM>[f [,xopt [,gradopt [,work]]]]=optim(costf [,&lt;contr&gt;],x0
      [,algo] [,df0 [,mem]] [,work] [,&lt;stop&gt;] [,&lt;params&gt;] [,imp=iflag])  </CALLING_SEQUENCE_ITEM>
  </CALLING_SEQUENCE>
  <PARAM>
    <PARAM_INDENT>
      <PARAM_ITEM>
        <PARAM_NAME>costf</PARAM_NAME>
        <PARAM_DESCRIPTION>
          <SP>: external, i.e Scilab function list or string
	    (<VERB>costf</VERB> is the cost function: see below its calling
	    sequence (Scilab or Fortran)). See also external for details about
	    external functions.</SP> 
        </PARAM_DESCRIPTION>
      </PARAM_ITEM>
      <PARAM_ITEM>
        <PARAM_NAME>x0</PARAM_NAME>
        <PARAM_DESCRIPTION>
          <SP>: real vector (initial value of variable to be minimized).</SP>
        </PARAM_DESCRIPTION>
      </PARAM_ITEM>
      <PARAM_ITEM>
        <PARAM_NAME>f</PARAM_NAME>
        <PARAM_DESCRIPTION>
          <SP>: value of optimal cost (<VERB>f=costf(xopt)</VERB>)</SP>
        </PARAM_DESCRIPTION>
      </PARAM_ITEM>
      <PARAM_ITEM>
        <PARAM_NAME>xopt</PARAM_NAME>
        <PARAM_DESCRIPTION>
          <SP>: best value of <VERB>x</VERB> found.</SP>
        </PARAM_DESCRIPTION>
      </PARAM_ITEM>
      <PARAM_ITEM>
        <PARAM_NAME>&lt;contr&gt;</PARAM_NAME>
        <PARAM_DESCRIPTION>
          <SP>: keyword representing the following sequence of arguments:
	    <VERB>'b',binf,bsup</VERB>  with <VERB>binf</VERB> and 
	    <VERB>bsup</VERB> are real vectors with same dimension as
	    <VERB>x0</VERB>. <VERB>binf</VERB> and <VERB>bsup</VERB> are lower
	    and upper bounds on <VERB>x</VERB>.</SP> 
        </PARAM_DESCRIPTION>
      </PARAM_ITEM>
      <PARAM_ITEM>
        <PARAM_NAME>algo</PARAM_NAME>
        <PARAM_DESCRIPTION>
          <SP>: Character string used to sprecify the algorithm to use. The
	    possible values are <VERB>'qn'</VERB> for quasi-Newton (default) or
	    <VERB>'gc'</VERB> for conjugate gradient or <VERB>'nd'</VERB> for
	    non-differentiable.  Note that
	    <VERB>'nd'</VERB> does not accept bounds on <VERB>x</VERB>.</SP> 
        </PARAM_DESCRIPTION>
      </PARAM_ITEM>
      <PARAM_ITEM>
        <PARAM_NAME>df0</PARAM_NAME>
        <PARAM_DESCRIPTION>
          <SP>: real scalar. Guessed decreasing of <VERB>f</VERB> at first
	    iteration. (<VERB>df0=1</VERB> is the default value).</SP> 
        </PARAM_DESCRIPTION> 
      </PARAM_ITEM>
      <PARAM_ITEM>
        <PARAM_NAME>mem :  </PARAM_NAME>
        <PARAM_DESCRIPTION>
          <SP>integer, number of variables used to approximate the  Hessian,
	    (<VERB>algo='gc' or 'nd'</VERB>). Default value is around 6.</SP> 
        </PARAM_DESCRIPTION>
      </PARAM_ITEM>
      <PARAM_ITEM>
        <PARAM_NAME>&lt;stop&gt;</PARAM_NAME>
        <PARAM_DESCRIPTION>
          <SP>:  keyword representing the sequence of optional parameters
	    controlling the  convergence of the algorithm. <VERB>'ar',nap [,iter [,epsg
	      [,epsf [,epsx]]]]</VERB></SP> 
          <PARAM_INDENT>
            <PARAM_ITEM>
              <PARAM_NAME>&quot;ar&quot;  </PARAM_NAME>
              <PARAM_DESCRIPTION>
                <SP>: reserved keyword for stopping rule selection defined as
		  follows:</SP> 
              </PARAM_DESCRIPTION>
            </PARAM_ITEM>
            <PARAM_ITEM>
              <PARAM_NAME>nap</PARAM_NAME>
              <PARAM_DESCRIPTION>
                <SP>: maximum number of calls to <VERB>costf</VERB> allowed
		  (default is 100).</SP> 
              </PARAM_DESCRIPTION>
            </PARAM_ITEM>
            <PARAM_ITEM>
              <PARAM_NAME>iter</PARAM_NAME>
              <PARAM_DESCRIPTION>
                <SP>: maximum number of iterations allowed (default is 100).</SP>
              </PARAM_DESCRIPTION>
            </PARAM_ITEM>
            <PARAM_ITEM>
              <PARAM_NAME>epsg</PARAM_NAME>
              <PARAM_DESCRIPTION>
                <SP>: threshold on gradient norm.</SP>
              </PARAM_DESCRIPTION>
            </PARAM_ITEM>
            <PARAM_ITEM>
              <PARAM_NAME>epsf</PARAM_NAME>
              <PARAM_DESCRIPTION>
                <SP>: threshold controlling decreasing of <VERB>f</VERB></SP>
              </PARAM_DESCRIPTION>
            </PARAM_ITEM>
            <PARAM_ITEM>
              <PARAM_NAME>epsx</PARAM_NAME>
              <PARAM_DESCRIPTION>
                <SP>: threshold controlling variation of <VERB>x</VERB>. This
		  vector (possibly matrix) of same size as <VERB>x0</VERB> can
		  be used to scale <VERB>x</VERB>.</SP> 
              </PARAM_DESCRIPTION>
            </PARAM_ITEM>
          </PARAM_INDENT>
        </PARAM_DESCRIPTION>
      </PARAM_ITEM>
      <PARAM_ITEM>
        <PARAM_NAME>&lt;params&gt; </PARAM_NAME>
        <PARAM_DESCRIPTION>
          <SP>: keyword representing the sequence of arguments: <VERB>'ti',
	      valti ,'td', valtd</VERB> which can be used to pass argument to
	    an external written in C or Fortran (see below).</SP> 
        </PARAM_DESCRIPTION>
      </PARAM_ITEM>
      <PARAM_ITEM>
        <PARAM_NAME>&quot;imp=iflag&quot;  </PARAM_NAME>
        <PARAM_DESCRIPTION>
          <SP>: named argument used to set the trace mode. <VERB>iflag=0</VERB>
	    nothing (execpt errors) is reported, <VERB>iflag=1</VERB> initial
	    and final reports, <VERB>iflag=2</VERB> adds a report per
	    iteration, <VERB>iflag&gt;2</VERB> add reports on linear
	    search. Warning, most of these reports are written on the Scilab
	    standard output.</SP> 
        </PARAM_DESCRIPTION>
      </PARAM_ITEM>
      <PARAM_ITEM>
        <PARAM_NAME>gradopt</PARAM_NAME>
        <PARAM_DESCRIPTION>
          <SP>:  gradient of <VERB>costf</VERB> at <VERB>xopt</VERB></SP>
        </PARAM_DESCRIPTION>
      </PARAM_ITEM>
      <PARAM_ITEM>
        <PARAM_NAME>work</PARAM_NAME>
        <PARAM_DESCRIPTION>
          <SP>: working array for hot restart for quasi-Newton method. This
	    array is automatically initialized by <VERB>optim</VERB> when
	    <VERB>optim</VERB> is invoked. It can be used as input parameter to
	    speed-up the calculations.</SP> 
        </PARAM_DESCRIPTION>
      </PARAM_ITEM>
    </PARAM_INDENT>
  </PARAM>
  <DESCRIPTION>
    <SP>
      Non-linear optimization routine for programs without constraints or with
      bound constraints:</SP> 
    <VERBATIM>
      <![CDATA[
      min costf(x) w.r.t x.
      ]]>
    </VERBATIM>
    <P><VERB>costf</VERB> is an &quot;external&quot; i.e a Scilab function, a
      list or a string giving the name of a C or Fortran routine (see
      &quot;external&quot;).
      
      This external must return the value <VERB>f</VERB> of the cost function
      at the point <VERB>x</VERB> and the gradient <VERB>g</VERB> of the cost
      function at the point <VERB>x</VERB>. 
    </P>
    <DESCRIPTION_INDENT>
      <DESCRIPTION_ITEM label="- Scilab function case">
	<P>If <VERB>costf</VERB> is a Scilab function, the calling sequence
	  for <VERB>costf</VERB> must be:
	  <VERB>[f,g,ind]=costf(x,ind)</VERB></P>

	<SP>Here, <VERB>costf</VERB> is a function which returns <VERB>f</VERB>,
	  value (real number) of cost function at <VERB>x</VERB>, and
	  <VERB>g</VERB>, gradient vector of cost function at
	  <VERB>x</VERB>. The variable <VERB>ind</VERB>  is described below.</SP>
      </DESCRIPTION_ITEM>
      <DESCRIPTION_ITEM label="- List case">
	<P>If <VERB>costf</VERB> is a list, it should be of the form:
	  <VERB>list(real_costf, arg1,...,argn)</VERB> with <VERB>real_costf</VERB>
	  a Scilab function with calling sequence :
	  <VERB>[f,g,ind]=costf(x,ind,arg1,... argn)</VERB>. The
	  <VERB>x</VERB>, <VERB>f</VERB>, <VERB>g</VERB>, <VERB>ind</VERB>
	  arguments have the same meaning that above. <VERB>argi</VERB>
	  arguments can be used to pass function parameters.</P>
      </DESCRIPTION_ITEM>
      <DESCRIPTION_ITEM label="- String case">
	<P>If <VERB>costf</VERB> is a character string, it refers to the name
	  of a C or Fortran routine which must be linked to Scilab </P>
	<DESCRIPTION_INDENT>
	  <DESCRIPTION_ITEM label="* Fortran case">
	    <P>The generic calling sequence for the Fortran subroutine is: 
	      <VERB>subroutine costf(ind,n,x,f,g,ti,tr,td)</VERB> with the
	      following declarations:</P>
	    <VERBATIM>
	      <![CDATA[
	      integer ind,n ti(*)
	      double precision x(n),f,g(n),td(*)
	      real tr(*)
	      ]]>
	    </VERBATIM>
	    <SP>The argument <VERB>ind</VERB> is described below.</SP>
	    <P>The Fortran subroutine <VERB>costf</VERB> must return <VERB>f</VERB>
	      and the vector <VERB>g</VERB>, given <VERB>x, ind, n, ti, tr,td</VERB>.</P>
	    <P> <VERB>ti,tr,td</VERB> can be used to initialize parameters. In
	      the calling sequence of <VERB>optim</VERB>, the keyword
	      <VERB>&lt;params&gt;'</VERB> can be replaced by <VERB>'ti', valti ,'td', valtd</VERB>
		.  Then, the routine  <VERB>costf</VERB> is
	      evaluated with <VERB>ti=valti</VERB> and 
	      <VERB>td=valtd</VERB> whatever the value of
	      <VERB>ind</VERB>. Thus, the Scilab variables <VERB>valti</VERB>
	      and <VERB>valtd</VERB> (integer vector and real vector) are sent
	      to the routine <VERB>costf</VERB>.</P>  
	  </DESCRIPTION_ITEM>
	  <DESCRIPTION_ITEM label="* C case">
	    <P>The generic calling sequence for the C procedure is: 
	      <VERB>void costf(int *ind, int *n, double *x, double *f, double
		*g, int *ti, float *tr, double *td)</VERB> with the
	      following declarations:</P>

	    <P>The argument <VERB>ind</VERB> is described below.</P>
	    <P>The C procedure <VERB>costf</VERB> must return <VERB>f</VERB>
	      and the vector <VERB>g</VERB>, given <VERB>x, ind, n, ti, tr, td</VERB>.</P>
		
	    <P> <VERB>ti,tr,td</VERB> can be used to initialize parameters. In
	      the calling sequence of <VERB>optim</VERB>, the string
	      <VERB>'in'</VERB> can be replaced by <VERB>'ti', valti ,'td', valtd</VERB>.  
	      Then, the procedure  <VERB>costf</VERB> is
	      evaluated with <VERB>ti=valti</VERB> and 
	      <VERB>td=valtd</VERB> whatever the value of
	      <VERB>ind</VERB>. Thus, the Scilab variables <VERB>valti</VERB>
	      and <VERB>valtd</VERB> (integer vector and real vector) are sent
	      to the procedure <VERB>costf</VERB>.</P>  
	  </DESCRIPTION_ITEM>
	</DESCRIPTION_INDENT>
      </DESCRIPTION_ITEM>
    </DESCRIPTION_INDENT>
    <P>If <VERB>ind=2</VERB> (resp. <VERB>3, 4</VERB>), <VERB>costf</VERB>
      must provide <VERB>f</VERB> (resp. <VERB>g, f</VERB> and
      <VERB>g</VERB>).</P> 
    <P>If <VERB>ind=1</VERB> nothing is computed (used for display purposes
      only).</P> 
    <P> On output, <VERB>ind&lt;0</VERB>  means that <VERB>f</VERB> cannot
      be evaluated at <VERB>x</VERB> and <VERB>ind=0</VERB> interrupts
      the optimization.</P> 

  </DESCRIPTION>
  <EXAMPLE>
    <![CDATA[
    // External function written in Scilab
    xref=[1;2;3];x0=[1;-1;1]
    deff('[f,g,ind]=cost(x,ind)','f=0.5*norm(x-xref)^2,g=x-xref');
    [f,xopt]=optim(cost,x0)      //Simplest call
    [f,xopt,gopt]=optim(cost,x0,'gc')  // By conjugate gradient
    [f,xopt,gopt]=optim(cost,x0,'nd')  //Seen as non differentiable
    [f,xopt,gopt]=optim(cost,'b',[-1;0;2],[0.5;1;4],x0) //  Bounds on x
    [f,xopt,gopt]=optim(cost,'b',[-1;0;2],[0.5;1;4],x0,'gc') //  Bounds on x
    [f,xopt,gopt]=optim(cost,'b',[-1;0;2],[0.5;1;4],x0,'gc','ar',3)

    // External function written in C (C compiler required)
    // write down the C code (Rosenbrock problem)
    C=['#include <math.h>'
    'double sq(double x)'
    '{ return x*x;}'
    'void rosenc(int *ind, int *n, double *x, double *f, double *g, '
    '                                int *ti, float *tr, double *td)'
    '{'
    '  double p;'
    '  int i;'
    '  p=td[0];'
    '  if (*ind==2||*ind==4) {'
    '    *f=1.0;'
    '    for (i=1;i<*n;i++)'
    '      *f+=p*sq(x[i]-sq(x[i-1]))+sq(1.0-x[i]);'
    '  }'
    '  if (*ind==3||*ind==4) {'
    '    g[0]=-4.0*p*(x[1]-sq(x[0]))*x[0];'
    '    for (i=1;i<*n-1;i++)'
    '      g[i]=2.0*p*(x[i]-sq(x[i-1]))-4.0*p*(x[i+1]-sq(x[i]))*x[i]-2.0*(1.0-x[i]);'
    '    g[*n-1]=2.0*p*(x[*n-1]-sq(x[*n-2]))-2.0*(1.0-x[*n-1]);'
    '  }'
    '}'];
    mputl(C,TMPDIR+'/rosenc.c')
    // compile the C code
    l=ilib_for_link('rosenc','rosenc.o',[],'c',TMPDIR+'/Makefile');
    // incremental linking
    link(l,'rosenc','c')
    //solve the problem
    x0=[40;10;50];
    p=100;
    [f,xo,go]=optim('rosenc',x0,'td',p)

    // External function written in Fortran (Fortran compiler required)
    // write down the Fortran  code (Rosenbrock problem)
 F=[ '      subroutine rosenf(ind, n, x, f, g, ti, tr, td)'
     '      integer ind,n,ti(*)'
     '      double precision x(n),f,g(n),td(*)'
     '      real tr(*)'
     'c'
     '      double precision y,p'
     '      p=td(1)'
     '      if (ind.eq.2.or.ind.eq.4) then'
     '        f=1.0d0'
     '        do i=2,n'
     '          f=f+p*(x(i)-x(i-1)**2)**2+(1.0d0-x(i))**2'
     '        enddo'
     '      endif'
     '      if (ind.eq.3.or.ind.eq.4) then'
     '        g(1)=-4.0d0*p*(x(2)-x(1)**2)*x(1)'
     '        if(n.gt.2) then'
     '          do i=2,n-1'
     '            g(i)=2.0d0*p*(x(i)-x(i-1)**2)-4.0d0*p*(x(i+1)-x(i)**2)*x(i)'
     '     &           -2.0d0*(1.0d0-x(i))'
     '          enddo'
     '        endif'
     '        g(n)=2.0d0*p*(x(n)-x(n-1)**2)-2.0d0*(1.0d0-x(n))'
     '      endif'
     '      return'
     '      end'];

    mputl(F,TMPDIR+'/rosenf.f')
    // compile the Fortran code
    l=ilib_for_link('rosenf','rosenf.o',[],'f',TMPDIR+'/Makefile');
    // incremental linking
    link(l,'rosenf','f')
    //solve the problem
    x0=[40;10;50];
    p=100;
    [f,xo,go]=optim('rosenf',x0,'td',p)

 
    ]]>
  </EXAMPLE>
  <SEE_ALSO>
    <SEE_ALSO_ITEM>
      <LINK>external</LINK>
    </SEE_ALSO_ITEM>
    <SEE_ALSO_ITEM>
      <LINK>quapro</LINK>
    </SEE_ALSO_ITEM>
    <SEE_ALSO_ITEM>
      <LINK>linpro</LINK>
    </SEE_ALSO_ITEM>
    <SEE_ALSO_ITEM>
      <LINK>datafit</LINK>
    </SEE_ALSO_ITEM>
    <SEE_ALSO_ITEM>
      <LINK>leastsq</LINK>
    </SEE_ALSO_ITEM>
    <SEE_ALSO_ITEM>
      <LINK>numdiff</LINK>
    </SEE_ALSO_ITEM>
    <SEE_ALSO_ITEM>
      <LINK>derivative</LINK>
    </SEE_ALSO_ITEM>
    <SEE_ALSO_ITEM>
      <LINK>NDcost</LINK>
    </SEE_ALSO_ITEM>
  </SEE_ALSO>
</MAN>
