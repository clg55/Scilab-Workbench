<?xml version="1.0" encoding="ISO-8859-1" standalone="no"?>
<!DOCTYPE MAN SYSTEM "../../manrev.dtd">
<MAN>
  <LANGUAGE>eng</LANGUAGE>
  <TITLE>lqr</TITLE>
  <TYPE>Scilab Function</TYPE>
  <DATE>April 1993</DATE>
  <SHORT_DESCRIPTION name="lqr"> LQ compensator (full state)  </SHORT_DESCRIPTION>
  <CALLING_SEQUENCE>
    <CALLING_SEQUENCE_ITEM>[K,X]=lqr(P12)  </CALLING_SEQUENCE_ITEM>
  </CALLING_SEQUENCE>
  <PARAM>
    <PARAM_INDENT>
      <PARAM_ITEM>
        <PARAM_NAME>P12</PARAM_NAME>
        <PARAM_DESCRIPTION>
          <SP>: <VERB>syslin</VERB> list (state-space linear system)</SP>
        </PARAM_DESCRIPTION>
      </PARAM_ITEM>
      <PARAM_ITEM>
        <PARAM_NAME>K,X</PARAM_NAME>
        <PARAM_DESCRIPTION>
          <SP>: two real matrices</SP>
        </PARAM_DESCRIPTION>
      </PARAM_ITEM>
    </PARAM_INDENT>
  </PARAM>
  <DESCRIPTION>
    <P><VERB>lqr</VERB>  computes the linear optimal LQ full-state gain
    for the plant <VERB>P12=[A,B2,C1,D12]</VERB> in continuous or
    discrete time.</P>
    <P><VERB>P12</VERB> is a <VERB>syslin</VERB> list (e.g. <VERB>P12=syslin('c',A,B2,C1,D12)</VERB>).</P>
    <P>
    The cost function is l2-norm of <VERB>z'*z</VERB> with <VERB>z=C1 x + D12 u</VERB>
    i.e. <VERB>[x,u]' * BigQ * [x;u]</VERB> where</P>
    <VERBATIM>
<![CDATA[
      [C1' ]               [Q  S]
BigQ= [    ]  * [C1 D12] = [    ]
      [D12']               [S' R]
   ]]>
    </VERBATIM>
    <P>
    The gain <VERB>K</VERB> is such that <VERB>A + B2*K</VERB> is stable.</P>
    <P><VERB>X</VERB> is the stabilizing solution of the Riccati equation.</P>
    <P>
    For a continuous plant:</P>
    <VERBATIM>
<![CDATA[
(A-B2*inv(R)*S')'*X+X*(A-B2*inv(R)*S')-X*B2*inv(R)*B2'*X+Q-S*inv(R)*S'=0
   ]]>
    </VERBATIM>
    <VERBATIM>
<![CDATA[
K=-inv(R)*(B2'*X+S)
   ]]>
    </VERBATIM>
    <P>
    For a discrete plant:</P>
    <VERBATIM>
<![CDATA[
X=A'*X*A-(A'*X*B2+C1'*D12)*pinv(B2'*X*B2+D12'*D12)*(B2'*X*A+D12'*C1)+C1'*C1;
   ]]>
    </VERBATIM>
    <VERBATIM>
<![CDATA[
K=-pinv(B2'*X*B2+D12'*D12)*(B2'*X*A+D12'*C1)
   ]]>
    </VERBATIM>
    <P>
    An equivalent form for <VERB>X</VERB> is</P>
    <VERBATIM>
<![CDATA[
X=Abar'*inv(inv(X)+B2*inv(r)*B2')*Abar+Qbar
   ]]>
    </VERBATIM>
    <P>
    with <VERB>Abar=A-B2*inv(R)*S'</VERB> and <VERB>Qbar=Q-S*inv(R)*S'</VERB></P>
    <P>
    The 3-blocks matrix pencils associated with these Riccati equations are:</P>
    <VERBATIM>
<![CDATA[
               discrete                           continuous
   |I   0    0|   | A    0    B2|         |I   0   0|   | A    0    B2|
  z|0   A'   0| - |-Q    I    -S|        s|0   I   0| - |-Q   -A'   -S|
   |0   B2'  0|   | S'   0     R|         |0   0   0|   | S'  -B2'   R|
   ]]>
    </VERBATIM>
    <P>
    Caution: It is assumed that matrix R is non singular. In particular,
    the plant must be tall (number of outputs &gt;= number of inputs).</P>
  </DESCRIPTION>
  <EXAMPLE>
<![CDATA[
A=rand(2,2);B=rand(2,1);   //two states, one input
Q=diag([2,5]);R=2;     //Usual notations x'Qx + u'Ru
Big=sysdiag(Q,R);    //Now we calculate C1 and D12
[w,wp]=fullrf(Big);C1=wp(:,1:2);D12=wp(:,3:$);   //[C1,D12]'*[C1,D12]=Big
P=syslin('c',A,B,C1,D12);    //The plant (continuous-time)
[K,X]=lqr(P)
spec(A+B*K)    //check stability
norm(A'*X+X*A-X*B*inv(R)*B'*X+Q,1)  //Riccati check
P=syslin('d',A,B,C1,D12);    // Discrete time plant
[K,X]=lqr(P)     
spec(A+B*K)   //check stability
norm(A'*X*A-(A'*X*B)*pinv(B'*X*B+R)*(B'*X*A)+Q-X,1) //Riccati check
 ]]>
  </EXAMPLE>
  <SEE_ALSO>
    <SEE_ALSO_ITEM>
      <LINK>lqe</LINK>
    </SEE_ALSO_ITEM>
    <SEE_ALSO_ITEM>
      <LINK>gcare</LINK>
    </SEE_ALSO_ITEM>
    <SEE_ALSO_ITEM>
      <LINK>leqr</LINK>
    </SEE_ALSO_ITEM>
  </SEE_ALSO>
  <AUTHOR>F.D.;   </AUTHOR>
</MAN>
