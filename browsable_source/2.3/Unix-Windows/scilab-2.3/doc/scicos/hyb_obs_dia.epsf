%!PS-Adobe-2.0 EPSF-2.0
%%BoundingBox: 0 0 300 212
%%Scilab Postscript File (1995 J.Ph Chancelier)
%%EndComments
/saved save def 
/$pictdict 100 dict def
$pictdict begin

/dogrey
{ /Arraybox exch def
	/Arraygrey exch def
	/nargs exch def 
	/func exch cvx def
	Arraybox 0 nargs getinterval Arraygrey 0 get func 
	1 1 Arraygrey length 1 sub 
	{/i exch def
	Arraybox i nargs mul nargs getinterval 
	Arraygrey i get func
	}for
} def
%--------------------------------------------
% [x y width height] nivgris drawbox 
% si niv gris > 1.0 alors on fait un stroke 
% sans closepath 
%--------------------------------------------

/drawpoly
	{/glev exch def /Ar exch def
	newpath
	Ar 0 get Ar 1 get moveto 
	2 2 Ar length 1 sub 
	{/i exch def
	Ar i get Ar i 1 add get absolu {lineto} {rlineto} ifelse
	}for
	glev -1 le 
	{ % filling the polygon with current pattern ( gray or color)
	  closepath gsave glev neg 1 sub WhiteLev 2 add lmin 0 lmax Setgray eofill grestore }
	{ glev 1 ge 
	   { % drawing the polygon with current dash style or color 
	     % XXXXX : a voir c'est pas clair il faudrait sauver 
	     % and filling it with other color (glev) 
	     closepath gsave glev 1 sub WhiteLev 2 add lmin 0 lmax Setgray 
		 eofill grestore stroke }
	   {% drawing the polygon with current style 
	    closeflag {closepath} if stroke} 
	ifelse }
	ifelse 
} def 


/drawbox 
	{/glev exch def /Ar exch def 
	/x Ar 0 get def /y Ar 1 get def 
	/w Ar 2 get def /h Ar 3 get def 
	newpath
	x y moveto
	x w add y lineto
	x w add y h add lineto
	x y h add lineto
	glev 1 ge 
	{ % filling 
	 closepath gsave glev 1 sub WhiteLev 2 add lmin 0 lmax Setgray eofill 
		grestore}
	{ 
	  % drawing 
	  glev -1 le 
	  {
    	  closepath gsave glev neg 1 sub WhiteLev 2 add lmin 0 lmax Setgray
		 stroke grestore  }
	  { closepath stroke} ifelse 
	} ifelse
} def 

%--------------------------------------------
% [x y width height] clearzone
%--------------------------------------------
/clearzone
        {/Ar exch def
        /x Ar 0 get def /y Ar 1 get def
        /w Ar 2 get def /h Ar 3 get def
        newpath
        x y moveto
        x w add y lineto
        x w add y h add lineto
        x y h add lineto
	closepath WhiteLev Setgray eofill
} def

%------------------------------------------------------
% polyline stroke or polygon fill or both 
%------------------------------------------------------
/absolu true def 
/closeflag false def 

/lmin { /y exch def /x exch def x y le { x  } {  y  } ifelse } def
/lmax { /y exch def /x exch def x y le { y } {  x } ifelse } def 


/drawpoly
	{/glev exch def /Ar exch def
	newpath
	Ar 0 get Ar 1 get moveto 
	2 2 Ar length 1 sub 
	{/i exch def
	Ar i get Ar i 1 add get absolu {lineto} {rlineto} ifelse
	}for
	glev -1 le 
	{ % filling the polygon with current pattern ( gray or color)
	  closepath gsave glev neg 1 sub WhiteLev 2 add lmin 0 lmax Setgray eofill grestore }
	{ glev 1 ge 
	   { % drawing the polygon with current dash style or color 
	     % XXXXX : a voir c'est pas clair il faudrait sauver 
	     % and filling it with other color (glev) 
	     closepath gsave glev 1 sub WhiteLev 2 add lmin 0 lmax Setgray 
		 eofill grestore stroke }
	   {% drawing the polygon with current style 
	    closeflag {closepath} if stroke} 
	ifelse }
	ifelse 
} def 

%------------------------------------------------------
% segments non connectes 
%------------------------------------------------------

/drawsegs
	{/glev exch def /Ar exch def
	newpath
	Ar 0 get Ar 1 get moveto Ar 2 get Ar 3 get lineto 
	gsave glev Setgray stroke grestore
	4 4 Ar length 3 sub 
	{/i exch def
	newpath 
	Ar i get Ar i 1 add get moveto
	Ar i 2 add get Ar i 3 add get lineto 
	gsave glev Setgray stroke grestore
	}for
} def 


%------------------------------------------------------
% unconected arrows
%-----------------------------------------------------

/drawarrows
	{/arsize10 exch def /Ar exch def
	Ar 0 get  Ar 1 get Ar 2 get Ar 3 get arsize10 drawarrow
	4 4 Ar length 3 sub 
	{/i exch def
	Ar i get Ar i 1 add get  Ar i 2 add get  Ar i 3 add get arsize10 
	drawarrow
	}for
} def 
		
/cos20 20 cos def
/sin20 20 sin def

/drawarrow                                
  { 
      /arsize exch 10 div def 
      /tipy exch def /tipx exch def       
      /taily exch def /tailx exch def
      /dx tipx tailx sub  def               
      /dy tipy taily sub  def               
      newpath tipx tipy moveto tailx taily lineto stroke   
      /norme dx dx mul dy dy mul add sqrt def 
      norme 1.e-8 ge 
	{
	 arsize dx mul norme div /dx1 exch def 
	 arsize dy mul norme div /dy1 exch def 
	 /depx tipx cos20 dx1 mul add def 
	/depy  tipy cos20 dy1 mul add def 
	newpath depx depy moveto 
	cos20 neg dx1 mul sin20 dy1 mul sub depx add
	sin20 dx1  mul cos20 dy1 mul sub depy add lineto 
	cos20 neg dx1 mul sin20 dy1 mul add  depx add
	sin20 neg dx1 mul cos20 dy1 mul sub depy add lineto closepath 
	fill
	} {} ifelse 
  } def


%------------------------------------------------------
% cercle ou portions de cercle 
% attention argument (x y w h angl1*64 angl2*64 )
% devrait tracer une ellipse a modifier donc 
%------------------------------------------------------

/fillarc
	{/glev exch def /Ar exch def
	/cx Ar 0 get Ar 2 get 2 div add def 
	/cy Ar 1 get Ar 3 get 2 div add def 
	/hom Ar 3 get Ar 2 get div def 
	/Cmsave1 matrix def Cmsave1 currentmatrix pop
	%-- on change de transformation pour faire homothetie en (x,y) 
	cx cy [1 0 0 hom 0 0 ] transform
	/t1 exch neg cy add def 
	/t2 exch neg cx add def 
	[1 0 0 hom t2 t1 ] concat 
	glev WhiteLev le
	{ % filling 
	newpath
	cx cy moveto 
	cx cy Ar 2 get 2 div Ar 5 get 64 div neg
	 Ar 4 get 64 div neg  arc closepath
	gsave glev Setgray eofill grestore}
	{
	%drawing with current dash or color unclosed path 
	newpath
	cx cy Ar 2 get 2 div Ar 5 get 64 div neg Ar 4 get 64 div neg arc
	  stroke} ifelse 
	Cmsave1 setmatrix } def 

/drawarc
	{/glev exch def /Ar exch def
	/cx Ar 0 get Ar 2 get 2 div add def 
	/cy Ar 1 get Ar 3 get 2 div add def 
	/hom Ar 3 get Ar 2 get div def 
	/Cmsave1 matrix def Cmsave1 currentmatrix pop
	%-- on change de transformation pour faire homothetie en (x,y) 
	cx cy [1 0 0 hom 0 0 ] transform
	/t1 exch neg cy add def 
	/t2 exch neg cx add def 
	[1 0 0 hom t2 t1 ] concat 
	newpath
	cx cy Ar 2 get 2 div Ar 5 get 64 div neg Ar 4 get 64 div neg arc
	closepath glev Setgray stroke
	Cmsave1 setmatrix } def 

%------------------------------------------------------
% centred hard mark 
%------------------------------------------------------

% x y str ShowCString 
% on fait un show mais string est centre autour du point (x,y) 

/ShowCString { /str exch def /y exch def /x exch def 
 newpath 
 x y moveto 
 str true charpath flattenpath pathbbox 
 /y2 exch def /x2 exch def /y1 exch def /x1 exch def 
 x 2 mul x2 x1 add 2 div sub 
 y 2 mul y2 y1 add 2 div sub moveto str show 
 } def 

/drawpolymark {/glev exch def /Ar exch def 
	Ar 0 get Ar 1 get HardMark ShowCString 
	2 2 Ar length 1 sub 
	{/i exch def
	Ar i get Ar i 1 add get HardMark ShowCString
	}for
} def 

%---------------------------------------------------
% chaines de caracteres 
%---------------------------------------------------
/FBox {/Ar exch def /rot exch def /str exch def /y exch def /x exch def 
 newpath Ar 0 get Ar 1 get moveto 
	/sina rot sin def /cosa rot cos def 
	/-sina sina neg def 
	[cosa -sina sina cosa 0 0 ] CtmModif
 Ar 2 get 0 rlineto 0 Ar 3 get neg rlineto Ar 2 get neg 0 rlineto 
 0 Ar 3 get  rlineto  stroke CtmRestore 
 x y str rot ShowRotate 
 } def 

% x y str ang Showrotate 
% inverse du sens trigo 

/ShowRotate { /ang exch def /str exch def 
	/y exch def /x exch def 
	x y moveto 
	/sina ang sin def /cosa ang cos def 
	/-sina 0 sina sub def 
	[cosa -sina sina cosa 0 0 ] CtmModif
	str show 
	CtmRestore 
} def 

/HardMark (0) def 

%(Chaine de caracteres) x y flag angle [arfbox] Show

/Show { /Ar exch def 
	/rot exch def /flag exch def /y exch def /x exch def /str exch def 
	flag 1 eq 
	{x y str rot Ar FBox}
	{x y str rot ShowRotate } ifelse} def 

/L {/y2 exch def /x2 exch def /y1 exch def /x1 exch def 
    newpath x1 y1 moveto x2 y2 lineto stroke } def 

%---------------------------------------------------------
% drawing an axis 
% angle [nsep1,nsep2] ,[siz1,siz2,coeff] [x0,y0] drawaxis",
%---------------------------------------------------------

/drawaxis {/XX exch def /Arsize exch def /Arsep exch def /ang exch def 
	/Cmsave1 matrix def Cmsave1 currentmatrix pop
	/sina ang sin def /cosa ang cos def /-sina sina neg def 
	/x XX 0 get def /y XX 1 get def
	%-- on change de transformation pour tourner autour de (x,y) 
	x y [cosa sina -sina cosa 0 0 ] transform
	/t1 exch neg y add def 
	/t2 exch neg x add def 
	[cosa sina -sina cosa t2 t1 ] concat 
	newpath x y moveto 0 Arsize 1 get Arsize 2 get mul rlineto
	stroke 
	0 1 Arsep 1 get 1 sub
	{
	 % i don't want the value of the for indice 
	 pop
	newpath 
	x y moveto 
	0 1 Arsep 0 get 1 sub
		{
		 % i don't want the value of the for indice 
		 pop
		 Arsize 0 get 0  rlineto
		 0 Arsize 1 get rlineto 
	 	0 Arsize 1 get  neg rlineto }
		for 
	currentpoint /y exch def /x exch def 
	stroke 
	newpath x y moveto 0 Arsize 1 get Arsize 2 get mul rlineto
	stroke }
	for 
	Cmsave1 setmatrix } def 

%---------------------------------------------------------
% change and restore CTM
%---------------------------------------------------------

/CtmModif {
	/arg exch def 
	/Cmsave matrix def 
	Cmsave currentmatrix pop
	[1 0 0 -1 0 0 ] concat 
	arg concat 
} def 

/CtmRestore { Cmsave setmatrix } def 

/Thickness { /th exch def th 0 le {/th 0.1 def} if th setlinewidth} def 

/WhiteLev 15 def

/Setgray { WhiteLev div setgray} def 

/fillsolid { 0 setgray } def 

%--------------------------------------
% clip zones ( rectangle ) 
%-------------------------------------

/setclipzone {initclip 
	/h exch def /w exch def /y exch def /x exch def 
	newpath x y moveto w 0 rlineto 0 h rlineto w neg 0 rlineto 
	0 h neg rlineto closepath clip} def 

%------------------
% to change the position of a picture 
%------------------
/cm{28.346457 mul}def

/DesPosi { /YH exch def /XW exch def /YP exch def /XP exch def 
	XP cm YP cm neg translate 
	XW cm 6000 div YH cm 4240 div  scale } def 

0 setlinecap 
2 setlinejoin 
1 setlinewidth

%-- Color database 
/ColorR [0.000000 0.000000 0.000000 0.529412 0.498039 0.133333 0.000000 0.878431 0.000000 1.000000 1.000000 1.000000 0.933333 1.000000 1.000000 0.960784 1.000000 ] def
/ColorG [0.000000 0.000000 0.000000 0.807843 1.000000 0.545098 1.000000 1.000000 1.000000 0.647059 0.000000 0.000000 0.509804 1.000000 0.843137 0.960784 1.000000 ] def
/ColorB [0.000000 0.501961 1.000000 0.921569 0.831373 0.133333 0.000000 1.000000 1.000000 0.000000 0.000000 1.000000 0.933333 0.000000 0.000000 0.862745 1.000000 ] def

/Setcolor {/i exch def ColorR i get ColorG i get ColorB i get setrgbcolor } def

% to change multiply all the fontsizes by a factor
% replace all scalefont occurences below by Scalefont
%and set value of the factor scf
/scf 1.5 def
/Scalefont {/s exch def
	scf s mul scalefont} def

%------ End Main Program ------%
% XP YP XW YW DesPosi in the following code 
% will output the picture in the rectangle defined by 
% upper left point (XP,YP) wide :XW Height: YW
% the coordinates are given in centimeter and 
% are the (0,0) point is the down-left point of the paper 

/ColorR [0.000000 0.000000 0.000000 0.000000 1.000000 1.000000 1.000000 1.000000 0.000000 0.000000 0.000000 0.529412 0.000000 0.000000 0.000000 0.000000 0.000000 0.000000 0.564706 0.690196 0.815686 0.564706 0.690196 0.815686 0.501961 0.627451 0.752941 1.000000 1.000000 1.000000 1.000000 1.000000 0.0 1.0] def
/ColorG [0.000000 0.000000 1.000000 1.000000 0.000000 0.000000 0.000000 1.000000 0.000000 0.000000 0.000000 0.807843 0.564706 0.690196 0.815686 0.564706 0.690196 0.815686 0.000000 0.000000 0.000000 0.000000 0.000000 0.000000 0.188235 0.250980 0.376471 0.501961 0.627451 0.752941 0.878431 0.843137 0.0 1.0] def
/ColorB [0.000000 1.000000 0.000000 1.000000 0.000000 1.000000 0.000000 1.000000 0.564706 0.690196 0.815686 1.000000 0.000000 0.000000 0.000000 0.564706 0.690196 0.815686 0.000000 0.000000 0.000000 0.564706 0.690196 0.815686 0.000000 0.000000 0.000000 0.501961 0.627451 0.752941 0.878431 0.000000 0.0 1.0] def
% Dessin en bas a gauche de taille 3000,2120
[0.5 10 div 0 0 0.5 10 div neg  0 2120 10 div] concat
% Init driver 
5 Thickness
% 3 setalufunction
-1 -1 200000 200000 setclipzone
0 Setcolor
/Times-Roman findfont 100 scalefont setfont
fillsolid
[] 0 setdash
0 Setcolor
%--use color 1 
fillsolid
[] 0 setdash
0 Setcolor
/WhiteLev 31 def
/Setgray {/i exch def ColorR i get ColorG i get ColorB i get setrgbcolor } def 
/Setcolor {/i exch def ColorR i get ColorG i get ColorB i get setrgbcolor } def 
%--end use color 1 
% End init driver 
/WhiteLev 31 def
/WhiteLev 33 def
/ColorR [0.000000 0.000000 0.000000 0.000000 1.000000 1.000000 1.000000 1.000000 0.000000 0.000000 0.000000 0.529412 0.000000 0.000000 0.000000 0.000000 0.000000 0.000000 0.564706 0.690196 0.815686 0.564706 0.690196 0.815686 0.501961 0.627451 0.752941 1.000000 1.000000 1.000000 1.000000 1.000000 1.000000 0.678431 0.0 1.0 ] def
/ColorG [0.000000 0.000000 1.000000 1.000000 0.000000 0.000000 0.000000 1.000000 0.000000 0.000000 0.000000 0.807843 0.564706 0.690196 0.815686 0.564706 0.690196 0.815686 0.000000 0.000000 0.000000 0.000000 0.000000 0.000000 0.188235 0.250980 0.376471 0.501961 0.627451 0.752941 0.878431 0.843137 1.000000 0.847059 0.0 1.0] def
/ColorB [0.000000 1.000000 0.000000 1.000000 0.000000 1.000000 0.000000 1.000000 0.564706 0.690196 0.815686 1.000000 0.000000 0.000000 0.000000 0.564706 0.690196 0.815686 0.000000 0.000000 0.000000 0.564706 0.690196 0.815686 0.000000 0.000000 0.000000 0.501961 0.627451 0.752941 0.878431 0.000000 0.000000 0.901961 0.0 1.0] def
%--use color 1 
%--end use color 1 
/Times-Roman findfont 100 scalefont setfont
5 Thickness
-1 -1 200000 200000 setclipzone
0 Setcolor
0 Setcolor
 (drawpoly) 8 [ -1]
[325 2138 325 1950 525 2044 325 2138 
] dogrey 
0 Setcolor
/absolu true def
0 Setcolor
(1 ) 325 2233 0  0.00 [325 2143 114 120] Show
0 Setcolor
 (drawpoly) 8 [ -1]
[3970 2106 4170 2012 4170 2201 3970 2106 
] dogrey 
0 Setcolor
/absolu true def
0 Setcolor
(1 ) 3970 2295 0  0.00 [3970 2205 114 120] Show
0 Setcolor
 (drawpoly) 8 [ -1]
[1208 2845 1208 2657 1408 2751 1208 2845 
] dogrey 
0 Setcolor
/absolu true def
0 Setcolor
(2 ) 1208 2940 0  0.00 [1208 2850 114 120] Show
10 Thickness
0 Setcolor
10 Thickness
/closeflag false def
 (drawpoly) 6 [ 0]
[2000 1919 2600 1919 2600 2296 
] dogrey 
0 Setcolor
/absolu true def
5 Thickness
0 Setcolor
 (drawpoly) 8 [ 9 2]
[1950 2343 1950 1966 2000 1916 2000 2296 1950 2343 2550 2343 2603 2296 2000 2296 
] dogrey 
0 Setcolor
/absolu true def
10 Thickness
 (drawpoly) 8 [ -1]
[2600 2134 2686 2107 2600 2080 2600 2134 
] dogrey 
0 Setcolor
/absolu true def
 (drawpoly) 8 [ -1]
[1914 2071 2000 2044 1914 2017 1914 2071 
] dogrey 
0 Setcolor
/absolu true def
 (drawpoly) 8 [ -1]
[1914 2197 2000 2170 1914 2143 1914 2197 
] dogrey 
0 Setcolor
/absolu true def
4 Setcolor
 (drawpoly) 8 [ -5]
[2257 1865 2300 1919 2343 1865 2257 1865 
] dogrey 
4 Setcolor
/absolu true def
0 Setcolor
31 Setcolor
 (drawbox) 4 [ 32]
[2000 1919 600 377 
] dogrey 
31 Setcolor
/Times-Roman findfont 80 scalefont setfont
/Times-Roman findfont 100 scalefont setfont
/Times-Roman findfont 120 scalefont setfont
/Times-Roman findfont 140 scalefont setfont
/Times-Roman findfont 180 scalefont setfont
/Times-Roman findfont 120 scalefont setfont
(\(A,B,C,D\) ) 2016 2272 0  0.00 [2016 2162 674 140] Show
(Jump ) 2016 2092 0  0.00 [2016 1982 337 140] Show
/Times-Roman findfont 100 scalefont setfont
0 Setcolor
/Times-Roman findfont 80 scalefont setfont
/Times-Roman findfont 100 scalefont setfont
/Times-Roman findfont 120 scalefont setfont
/Times-Roman findfont 140 scalefont setfont
/Times-Roman findfont 180 scalefont setfont
/Times-Roman findfont 120 scalefont setfont
(\(A,B,C,D\) ) 2016 2272 0  0.00 [2016 2162 674 140] Show
(Jump ) 2016 2092 0  0.00 [2016 1982 337 140] Show
/Times-Roman findfont 100 scalefont setfont
0 Setcolor
/Times-Roman findfont 100 scalefont setfont
5 Thickness
0 Setcolor
/closeflag false def
 (drawpoly) 4 [ 0]
[2686 2107 3178 2107 
] dogrey 
0 Setcolor
/absolu true def
0 Setcolor
10 Thickness
0 Setcolor
10 Thickness
/closeflag false def
 (drawpoly) 6 [ 0]
[2041 3122 2441 3122 2441 3499 
] dogrey 
0 Setcolor
/absolu true def
5 Thickness
0 Setcolor
 (drawpoly) 8 [ 9 2]
[1991 3546 1991 3170 2041 3120 2041 3499 1991 3546 2391 3546 2444 3499 2041 3499 
] dogrey 
0 Setcolor
/absolu true def
10 Thickness
 (drawpoly) 8 [ -1]
[2041 3338 1955 3311 2041 3284 2041 3338 
] dogrey 
0 Setcolor
/absolu true def
 (drawpoly) 8 [ -1]
[2526 3338 2441 3311 2526 3284 2526 3338 
] dogrey 
0 Setcolor
/absolu true def
4 Setcolor
0 Setcolor
28 Setcolor
 (drawbox) 4 [ 29]
[2041 3122 400 377 
] dogrey 
28 Setcolor
/closeflag false def
 (drawpoly) 8 [ 0]
[2121 3160 2361 3311 2121 3462 2121 3160 
] dogrey 
28 Setcolor
/absolu true def
/Times-Roman findfont 80 scalefont setfont
/Times-Roman findfont 100 scalefont setfont
/Times-Roman findfont 120 scalefont setfont
/Times-Roman findfont 140 scalefont setfont
/Times-Roman findfont 100 scalefont setfont
(Gain ) 2134 3375 0  0.00 [2134 3285 287 120] Show
/Times-Roman findfont 100 scalefont setfont
0 Setcolor
/closeflag false def
 (drawpoly) 8 [ 0]
[2121 3160 2361 3311 2121 3462 2121 3160 
] dogrey 
0 Setcolor
/absolu true def
/Times-Roman findfont 80 scalefont setfont
/Times-Roman findfont 100 scalefont setfont
/Times-Roman findfont 120 scalefont setfont
/Times-Roman findfont 140 scalefont setfont
/Times-Roman findfont 100 scalefont setfont
(Gain ) 2134 3375 0  0.00 [2134 3285 287 120] Show
/Times-Roman findfont 100 scalefont setfont
0 Setcolor
/Times-Roman findfont 100 scalefont setfont
5 Thickness
10 Thickness
0 Setcolor
10 Thickness
/closeflag false def
 (drawpoly) 6 [ 0]
[3604 2500 4004 2500 4004 2877 
] dogrey 
0 Setcolor
/absolu true def
5 Thickness
0 Setcolor
 (drawpoly) 8 [ 9 2]
[3554 2924 3554 2547 3604 2497 3604 2877 3554 2924 3954 2924 4007 2877 3604 2877 
] dogrey 
0 Setcolor
/absolu true def
10 Thickness
 (drawpoly) 8 [ -1]
[4004 2715 4090 2688 4004 2661 4004 2715 
] dogrey 
0 Setcolor
/absolu true def
 (drawpoly) 8 [ -1]
[3518 2652 3604 2626 3518 2599 3518 2652 
] dogrey 
0 Setcolor
/absolu true def
 (drawpoly) 8 [ -1]
[3518 2778 3604 2751 3518 2724 3518 2778 
] dogrey 
0 Setcolor
/absolu true def
4 Setcolor
0 Setcolor
29 Setcolor
 (drawbox) 4 [ 30]
[3604 2500 400 377 
] dogrey 
29 Setcolor
/Times-Roman findfont 80 scalefont setfont
/Times-Roman findfont 100 scalefont setfont
/Times-Roman findfont 120 scalefont setfont
/Times-Roman findfont 140 scalefont setfont
/Times-Roman findfont 180 scalefont setfont
/Times-Roman findfont 240 scalefont setfont
/Times-Roman findfont 240 scalefont setfont
/Times-Roman findfont 180 scalefont setfont
(Mux ) 3611 2790 0  0.00 [3611 2640 388 190] Show
/Times-Roman findfont 100 scalefont setfont
0 Setcolor
/Times-Roman findfont 80 scalefont setfont
/Times-Roman findfont 100 scalefont setfont
/Times-Roman findfont 120 scalefont setfont
/Times-Roman findfont 140 scalefont setfont
/Times-Roman findfont 180 scalefont setfont
/Times-Roman findfont 240 scalefont setfont
/Times-Roman findfont 240 scalefont setfont
/Times-Roman findfont 180 scalefont setfont
(Mux ) 3611 2790 0  0.00 [3611 2640 388 190] Show
/Times-Roman findfont 100 scalefont setfont
0 Setcolor
/Times-Roman findfont 100 scalefont setfont
5 Thickness
10 Thickness
 (fillarc) 6 [ 0]
[3144 2060 67 94 0 23040 
] dogrey 
0 Setcolor
5 Thickness
0 Setcolor
/closeflag false def
 (drawpoly) 8 [ 0]
[3178 2107 3257 2107 3257 2106 3970 2106 
] dogrey 
0 Setcolor
/absolu true def
0 Setcolor
0 Setcolor
/closeflag false def
 (drawpoly) 6 [ 0]
[3178 2107 3178 2626 3518 2626 
] dogrey 
0 Setcolor
/absolu true def
0 Setcolor
0 Setcolor
/closeflag false def
 (drawpoly) 4 [ 0]
[1408 2751 3518 2751 
] dogrey 
0 Setcolor
/absolu true def
0 Setcolor
0 Setcolor
/closeflag false def
 (drawpoly) 8 [ 0]
[4090 2688 4284 2688 4284 3311 2498 3311 
] dogrey 
0 Setcolor
/absolu true def
0 Setcolor
0 Setcolor
/closeflag false def
 (drawpoly) 8 [ 0]
[1955 3311 812 3311 812 2170 1914 2170 
] dogrey 
0 Setcolor
/absolu true def
0 Setcolor
0 Setcolor
/closeflag false def
 (drawpoly) 4 [ 0]
[525 2044 1914 2044 
] dogrey 
0 Setcolor
/absolu true def
0 Setcolor
4 Setcolor
 (drawpoly) 8 [ -5]
[1503 1106 1503 917 1703 1011 1503 1106 
] dogrey 
4 Setcolor
/absolu true def
0 Setcolor
(1 ) 1503 1200 0  0.00 [1503 1110 114 120] Show
4 Setcolor
/closeflag false def
 (drawpoly) 6 [ 0]
[1703 1011 2300 1011 2300 1865 
] dogrey 
4 Setcolor
/absolu true def
0 Setcolor
(Hybrid-Observer ) 2614 129 0  0.00 [2614 39 918 120] Show
-1 -1 200000 200000 setclipzone
 (drawbox) 4 [ 34]
[5575 0 425 4240 
] dogrey 
0 Setcolor
 (drawbox) 4 [ -1]
[5575 0 425 4240 
] dogrey 
0 Setcolor
 (drawbox) 4 [ 33]
[5632 35 325 129 
] dogrey 
0 Setcolor
 (drawbox) 4 [ -1]
[5632 35 325 129 
] dogrey 
0 Setcolor
34 Setcolor
(Help ) 5678 164 0  0.00 [5678 74 287 120] Show
 (drawbox) 4 [ 33]
[5632 199 325 129 
] dogrey 
34 Setcolor
 (drawbox) 4 [ -1]
[5632 199 325 129 
] dogrey 
34 Setcolor
34 Setcolor
(Edit.. ) 5663 328 0  0.00 [5663 238 401 120] Show
 (drawbox) 4 [ 33]
[5632 364 325 129 
] dogrey 
34 Setcolor
 (drawbox) 4 [ -1]
[5632 364 325 129 
] dogrey 
34 Setcolor
34 Setcolor
(File.. ) 5668 492 0  0.00 [5668 402 401 120] Show
 (drawbox) 4 [ 33]
[5632 528 325 129 
] dogrey 
34 Setcolor
 (drawbox) 4 [ -1]
[5632 528 325 129 
] dogrey 
34 Setcolor
34 Setcolor
(Block.. ) 5632 657 0  0.00 [5632 567 459 120] Show
 (drawbox) 4 [ 33]
[5632 692 325 129 
] dogrey 
34 Setcolor
 (drawbox) 4 [ -1]
[5632 692 325 129 
] dogrey 
34 Setcolor
34 Setcolor
(View ) 5668 821 0  0.00 [5668 731 287 120] Show
 (drawbox) 4 [ 33]
[5632 856 325 129 
] dogrey 
34 Setcolor
 (drawbox) 4 [ -1]
[5632 856 325 129 
] dogrey 
34 Setcolor
34 Setcolor
(Exit ) 5688 985 0  0.00 [5688 895 287 120] Show
5 Thickness
0 0 5575 4240 setclipzone
0 Setcolor
 showpage

 end saved restore 
