%!PS-Adobe-2.0 EPSF-2.0
%%BoundingBox:  0 0 300 212
%%
%%Scilab Postscript File (1995-1997 J.Ph Chancelier)
%%EndComments
/saved save def 
/$pictdict 100 dict def
$pictdict begin

/dogrey
{ /Arraybox exch def
	/Arraygrey exch def
	/nargs exch def 
	/func exch cvx def
	Arraybox 0 nargs getinterval Arraygrey 0 get func 
	1 1 Arraygrey length 1 sub 
	{/i exch def
	Arraybox i nargs mul nargs getinterval 
	Arraygrey i get func
	}for
} def
%--------------------------------------------
% [x y width height] nivgris drawbox 
% si niv gris > 1.0 alors on fait un stroke 
% sans closepath 
%--------------------------------------------

/drawpoly
	{/glev exch def /Ar exch def
	newpath
	Ar 0 get Ar 1 get moveto 
	2 2 Ar length 1 sub 
	{/i exch def
	Ar i get Ar i 1 add get absolu {lineto} {rlineto} ifelse
	}for
	glev -1 le 
	{ % filling the polygon with current pattern ( gray or color)
	  closepath gsave glev neg 1 sub WhiteLev 2 add lmin 0 lmax Setgray eofill grestore }
	{ glev 1 ge 
	   { % drawing the polygon with current dash style or color 
	     % XXXXX : a voir c'est pas clair il faudrait sauver 
	     % and filling it with other color (glev) 
	     closepath gsave glev 1 sub WhiteLev 2 add lmin 0 lmax Setgray 
		 eofill grestore stroke }
	   {% drawing the polygon with current style 
	    closeflag {closepath} if stroke} 
	ifelse }
	ifelse 
} def 


/drawbox 
	{/glev exch def /Ar exch def 
	/x Ar 0 get def /y Ar 1 get def 
	/w Ar 2 get def /h Ar 3 get def 
	newpath
	x y moveto
	x w add y lineto
	x w add y h add lineto
	x y h add lineto
	glev 1 ge 
	{ % filling 
	 closepath gsave glev 1 sub WhiteLev 2 add lmin 0 lmax Setgray eofill 
		grestore}
	{ 
	  % drawing 
	  glev -1 le 
	  {
    	  closepath gsave glev neg 1 sub WhiteLev 2 add lmin 0 lmax Setgray
		 stroke grestore  }
	  { closepath stroke} ifelse 
	} ifelse
} def 

%--------------------------------------------
% [x y width height] clearzone
%--------------------------------------------
/clearzone
        {/Ar exch def
        /x Ar 0 get def /y Ar 1 get def
        /w Ar 2 get def /h Ar 3 get def
        newpath
        x y moveto
        x w add y lineto
        x w add y h add lineto
        x y h add lineto
	closepath WhiteLev Setgray eofill
} def

%------------------------------------------------------
% polyline stroke or polygon fill or both 
%------------------------------------------------------
/absolu true def 
/closeflag false def 

/lmin { /y exch def /x exch def x y le { x  } {  y  } ifelse } def
/lmax { /y exch def /x exch def x y le { y } {  x } ifelse } def 


/drawpoly
	{/glev exch def /Ar exch def
	newpath
	Ar 0 get Ar 1 get moveto 
	2 2 Ar length 1 sub 
	{/i exch def
	Ar i get Ar i 1 add get absolu {lineto} {rlineto} ifelse
	}for
	glev -1 le 
	{ % filling the polygon with current pattern ( gray or color)
	  closepath gsave glev neg 1 sub WhiteLev 2 add lmin 0 lmax Setgray eofill grestore }
	{ glev 1 ge 
	   { % drawing the polygon with current dash style or color 
	     % XXXXX : a voir c'est pas clair il faudrait sauver 
	     % and filling it with other color (glev) 
	     closepath gsave glev 1 sub WhiteLev 2 add lmin 0 lmax Setgray 
		 eofill grestore stroke }
	   {% drawing the polygon with current style 
	    closeflag {closepath} if stroke} 
	ifelse }
	ifelse 
} def 

%------------------------------------------------------
% segments non connectes 
%------------------------------------------------------

/drawsegs
	{/glev exch def /Ar exch def
	newpath
	Ar 0 get Ar 1 get moveto Ar 2 get Ar 3 get lineto 
	gsave glev Setgray stroke grestore
	4 4 Ar length 3 sub 
	{/i exch def
	newpath 
	Ar i get Ar i 1 add get moveto
	Ar i 2 add get Ar i 3 add get lineto 
	gsave glev Setgray stroke grestore
	}for
} def 


%------------------------------------------------------
% unconected arrows
%-----------------------------------------------------

/drawarrows
	{/arsize10 exch def /Ar exch def
	Ar 0 get  Ar 1 get Ar 2 get Ar 3 get arsize10 drawarrow
	4 4 Ar length 3 sub 
	{/i exch def
	Ar i get Ar i 1 add get  Ar i 2 add get  Ar i 3 add get arsize10 
	drawarrow
	}for
} def 
		
/cos20 20 cos def
/sin20 20 sin def

/drawarrow                                
  { 
      /arsize exch 10 div def 
      /tipy exch def /tipx exch def       
      /taily exch def /tailx exch def
      /dx tipx tailx sub  def               
      /dy tipy taily sub  def               
      newpath tipx tipy moveto tailx taily lineto stroke   
      /norme dx dx mul dy dy mul add sqrt def 
      norme 1.e-8 ge 
	{
	 arsize dx mul norme div /dx1 exch def 
	 arsize dy mul norme div /dy1 exch def 
	 /depx tipx cos20 dx1 mul add def 
	/depy  tipy cos20 dy1 mul add def 
	newpath depx depy moveto 
	cos20 neg dx1 mul sin20 dy1 mul sub depx add
	sin20 dx1  mul cos20 dy1 mul sub depy add lineto 
	cos20 neg dx1 mul sin20 dy1 mul add  depx add
	sin20 neg dx1 mul cos20 dy1 mul sub depy add lineto closepath 
	fill
	} {} ifelse 
  } def


%------------------------------------------------------
% cercle ou portions de cercle 
% attention argument (x y w h angl1*64 angl2*64 )
% devrait tracer une ellipse a modifier donc 
%------------------------------------------------------

/fillarc
	{/glev exch def /Ar exch def
	/cx Ar 0 get Ar 2 get 2 div add def 
	/cy Ar 1 get Ar 3 get 2 div add def 
	/hom Ar 3 get Ar 2 get div def 
	/Cmsave1 matrix def Cmsave1 currentmatrix pop
	%-- on change de transformation pour faire homothetie en (x,y) 
	cx cy [1 0 0 hom 0 0 ] transform
	/t1 exch neg cy add def 
	/t2 exch neg cx add def 
	[1 0 0 hom t2 t1 ] concat 
	glev WhiteLev le
	{ % filling 
	newpath
	cx cy moveto 
	cx cy Ar 2 get 2 div Ar 5 get 64 div neg
	 Ar 4 get 64 div neg  arc closepath
	gsave glev Setgray eofill grestore}
	{
	%drawing with current dash or color unclosed path 
	newpath
	cx cy Ar 2 get 2 div Ar 5 get 64 div neg Ar 4 get 64 div neg arc
	  stroke} ifelse 
	Cmsave1 setmatrix } def 

/drawarc
	{/glev exch def /Ar exch def
	/cx Ar 0 get Ar 2 get 2 div add def 
	/cy Ar 1 get Ar 3 get 2 div add def 
	/hom Ar 3 get Ar 2 get div def 
	/Cmsave1 matrix def Cmsave1 currentmatrix pop
	%-- on change de transformation pour faire homothetie en (x,y) 
	cx cy [1 0 0 hom 0 0 ] transform
	/t1 exch neg cy add def 
	/t2 exch neg cx add def 
	[1 0 0 hom t2 t1 ] concat 
	newpath
	cx cy Ar 2 get 2 div Ar 5 get 64 div neg Ar 4 get 64 div neg arc
	closepath glev Setgray stroke
	Cmsave1 setmatrix } def 

%------------------------------------------------------
% centred hard mark 
%------------------------------------------------------

% x y str ShowCString 
% on fait un show mais string est centre autour du point (x,y) 

/ShowCString { /str exch def /y exch def /x exch def 
 newpath 
 x y moveto 
 str true charpath flattenpath pathbbox 
 /y2 exch def /x2 exch def /y1 exch def /x1 exch def 
 x 2 mul x2 x1 add 2 div sub 
 y 2 mul y2 y1 add 2 div sub moveto str show 
 } def 

/drawpolymark {/glev exch def /Ar exch def 
	Ar 0 get Ar 1 get HardMark ShowCString 
	2 2 Ar length 1 sub 
	{/i exch def
	Ar i get Ar i 1 add get HardMark ShowCString
	}for
} def 

%---------------------------------------------------
% chaines de caracteres 
%---------------------------------------------------
/FBox {/Ar exch def /rot exch def /str exch def /y exch def /x exch def 
 newpath Ar 0 get Ar 1 get moveto 
	/sina rot sin def /cosa rot cos def 
	/-sina sina neg def 
	[cosa -sina sina cosa 0 0 ] CtmModif
 Ar 2 get 0 rlineto 0 Ar 3 get neg rlineto Ar 2 get neg 0 rlineto 
 0 Ar 3 get  rlineto  stroke CtmRestore 
 x y str rot ShowRotate 
 } def 

% x y str ang Showrotate 
% inverse du sens trigo 

/ShowRotate { /ang exch def /str exch def 
	/y exch def /x exch def 
	x y moveto 
	/sina ang sin def /cosa ang cos def 
	/-sina 0 sina sub def 
	[cosa -sina sina cosa 0 0 ] CtmModif
	str show 
	CtmRestore 
} def 

/HardMark (0) def 

%(Chaine de caracteres) x y flag angle [arfbox] Show

/Show { /Ar exch def 
	/rot exch def /flag exch def /y exch def /x exch def /str exch def 
	flag 1 eq 
	{x y str rot Ar FBox}
	{x y str rot ShowRotate } ifelse} def 

/L {/y2 exch def /x2 exch def /y1 exch def /x1 exch def 
    newpath x1 y1 moveto x2 y2 lineto stroke } def 

%---------------------------------------------------------
% drawing an axis 
% angle [nsep1,nsep2] ,[siz1,siz2,coeff] [x0,y0] drawaxis",
%---------------------------------------------------------

/drawaxis {/XX exch def /Arsize exch def /Arsep exch def /ang exch def 
	/Cmsave1 matrix def Cmsave1 currentmatrix pop
	/sina ang sin def /cosa ang cos def /-sina sina neg def 
	/x XX 0 get def /y XX 1 get def
	%-- on change de transformation pour tourner autour de (x,y) 
	x y [cosa sina -sina cosa 0 0 ] transform
	/t1 exch neg y add def 
	/t2 exch neg x add def 
	[cosa sina -sina cosa t2 t1 ] concat 
	newpath x y moveto 0 Arsize 1 get Arsize 2 get mul rlineto
	stroke 
	0 1 Arsep 1 get 1 sub
	{
	 % i don't want the value of the for indice 
	 pop
	newpath 
	x y moveto 
	0 1 Arsep 0 get 1 sub
		{
		 % i don't want the value of the for indice 
		 pop
		 Arsize 0 get 0  rlineto
		 0 Arsize 1 get rlineto 
	 	0 Arsize 1 get  neg rlineto }
		for 
	currentpoint /y exch def /x exch def 
	stroke 
	newpath x y moveto 0 Arsize 1 get Arsize 2 get mul rlineto
	stroke }
	for 
	Cmsave1 setmatrix } def 

%---------------------------------------------------------
% change and restore CTM
%---------------------------------------------------------

/CtmModif {
	/arg exch def 
	/Cmsave matrix def 
	Cmsave currentmatrix pop
	[1 0 0 -1 0 0 ] concat 
	arg concat 
} def 

/CtmRestore { Cmsave setmatrix } def 

/Thickness { /th exch def th 0 le {/th 0.1 def} if th setlinewidth} def 

/WhiteLev 15 def

/Setgray { WhiteLev div setgray} def 

/fillsolid { 0 setgray } def 

%--------------------------------------
% clip zones ( rectangle ) 
%-------------------------------------

/setclipzone {initclip 
	/h exch def /w exch def /y exch def /x exch def 
	newpath x y moveto w 0 rlineto 0 h rlineto w neg 0 rlineto 
	0 h neg rlineto closepath clip} def 

%------------------
% to change the position of a picture 
%------------------
/cm{28.346457 mul}def

/DesPosi { /YH exch def /XW exch def /YP exch def /XP exch def 
	XP cm YP cm neg translate 
	XW cm 6000 div YH cm 4240 div  scale } def 

0 setlinecap 
2 setlinejoin 
1 setlinewidth

%-- Color database 
/ColorR [0.000000 0.000000 0.000000 0.529412 0.498039 0.133333 0.000000 0.878431 0.000000 1.000000 1.000000 1.000000 0.933333 1.000000 1.000000 0.960784 1.000000 ] def
/ColorG [0.000000 0.000000 0.000000 0.807843 1.000000 0.545098 1.000000 1.000000 1.000000 0.647059 0.000000 0.000000 0.509804 1.000000 0.843137 0.960784 1.000000 ] def
/ColorB [0.000000 0.501961 1.000000 0.921569 0.831373 0.133333 0.000000 1.000000 1.000000 0.000000 0.000000 1.000000 0.933333 0.000000 0.000000 0.862745 1.000000 ] def

/Setcolor {/i exch def ColorR i get ColorG i get ColorB i get setrgbcolor } def

% to multiply all the fontsizes by a factor  scf
/scf 1.0 def

%------ End Main Program ------%
% XP YP XW YW DesPosi in the following code 
% will output the picture in the rectangle defined by 
% upper left point (XP,YP) wide :XW Height: YW
% the coordinates are given in centimeter and 
% are the (0,0) point is the down-left point of the paper 


/ColorR [0.000000 0.000000 0.000000 0.000000 1.000000 1.000000 1.000000 1.000000 0.000000 0.000000 0.000000 0.529412 0.000000 0.000000 0.000000 0.000000 0.000000 0.000000 0.564706 0.690196 0.815686 0.564706 0.690196 0.815686 0.501961 0.627451 0.752941 1.000000 1.000000 1.000000 1.000000 1.000000 0.0 1.0] def
/ColorG [0.000000 0.000000 1.000000 1.000000 0.000000 0.000000 0.000000 1.000000 0.000000 0.000000 0.000000 0.807843 0.564706 0.690196 0.815686 0.564706 0.690196 0.815686 0.000000 0.000000 0.000000 0.000000 0.000000 0.000000 0.188235 0.250980 0.376471 0.501961 0.627451 0.752941 0.878431 0.843137 0.0 1.0] def
/ColorB [0.000000 1.000000 0.000000 1.000000 0.000000 1.000000 0.000000 1.000000 0.564706 0.690196 0.815686 1.000000 0.000000 0.000000 0.000000 0.564706 0.690196 0.815686 0.000000 0.000000 0.000000 0.564706 0.690196 0.815686 0.000000 0.000000 0.000000 0.501961 0.627451 0.752941 0.878431 0.000000 0.0 1.0] def
% Dessin en bas a gauche de taille 3000,2120
[0.5 10 div 0 0 0.5 10 div neg  0 2120 10 div] concat
% Init driver 
5 Thickness
% 3 setalufunction
-1 -1 200000 200000 setclipzone
[] 0 setdash
/Times-Roman findfont 100 scf mul scalefont setfont
fillsolid
[] 0 setdash
0 Setcolor
%--use color 1 
fillsolid
[] 0 setdash
0 Setcolor
/WhiteLev 31 def
/Setgray {/i exch def ColorR i get ColorG i get ColorB i get setrgbcolor } def 
/Setcolor {/i exch def ColorR i get ColorG i get ColorB i get setrgbcolor } def 
%--end use color 1 
% End init driver 
/WhiteLev 31 def
/Times-Roman findfont 100 scf mul scalefont setfont
5 Thickness
-1 -1 200000 200000 setclipzone
0 Setcolor
0 Setcolor
 (drawbox) 4 [ 0]
[750 530 4500 3180 
] dogrey 
0 Setcolor
0 Setcolor
750 530 4500 3180 setclipzone
0 Setcolor
/Symbol findfont 80 scf mul scalefont setfont
HardMark 0 16#2b put
 (drawpolymark) 4 [ 0]
[750 3710 5250 530 
] dogrey 
/absolu true def
/Times-Roman findfont 100 scf mul scalefont setfont
0 Setcolor
-1 -1 200000 200000 setclipzone
5 Thickness
% 3 setalufunction
-1 -1 200000 200000 setclipzone
0 Setcolor
/Times-Roman findfont 100 scf mul scalefont setfont
fillsolid
[] 0 setdash
0 Setcolor
%--use color 1 
fillsolid
[] 0 setdash
0 Setcolor
/WhiteLev 31 def
/Setgray {/i exch def ColorR i get ColorG i get ColorB i get setrgbcolor } def 
/Setcolor {/i exch def ColorR i get ColorG i get ColorB i get setrgbcolor } def 
%--end use color 1 
 (drawbox) 4 [ 0 0 0 0 0 0 0]
[1500 3210 225 136 1800 3210 225 136 2100 3210 225 136 2400 3210 225 136 2700 3210 225 136 
3000 3210 225 136 3300 3210 225 136 
] dogrey 
0 Setcolor
 (drawbox) 4 [ 0 4 8 12 15 32 0]
[1500 3051 225 136 1800 3051 225 136 2100 3051 225 136 2400 3051 225 136 2700 3051 225 136 
3000 3051 225 136 3300 3051 225 136 
] dogrey 
0 Setcolor
0 Setcolor
 (fillarc) 6 [ 32]
[1500 2847 225 136 0 11520 
] dogrey 
0 Setcolor
3 Setcolor
 (fillarc) 6 [ 32]
[1800 2847 225 136 0 11520 
] dogrey 
3 Setcolor
7 Setcolor
 (fillarc) 6 [ 32]
[2100 2847 225 136 0 11520 
] dogrey 
7 Setcolor
11 Setcolor
 (fillarc) 6 [ 32]
[2400 2847 225 136 0 11520 
] dogrey 
11 Setcolor
14 Setcolor
 (fillarc) 6 [ 32]
[2700 2847 225 136 0 11520 
] dogrey 
14 Setcolor
31 Setcolor
 (fillarc) 6 [ 32]
[3000 2847 225 136 0 11520 
] dogrey 
31 Setcolor
0 Setcolor
 (fillarc) 6 [ 32]
[3300 2847 225 136 0 11520 
] dogrey 
0 Setcolor
0 Setcolor
0 Setcolor
 (fillarc) 6 [ 32]
[1500 2642 225 136 0 23040 
] dogrey 
0 Setcolor
0 Setcolor
 (fillarc) 6 [ 32]
[1800 2642 225 136 0 23040 
] dogrey 
0 Setcolor
0 Setcolor
 (fillarc) 6 [ 32]
[2100 2642 225 136 0 23040 
] dogrey 
0 Setcolor
0 Setcolor
 (fillarc) 6 [ 32]
[2400 2642 225 136 0 23040 
] dogrey 
0 Setcolor
0 Setcolor
 (fillarc) 6 [ 32]
[2700 2642 225 136 0 23040 
] dogrey 
0 Setcolor
0 Setcolor
 (fillarc) 6 [ 32]
[3000 2642 225 136 0 23040 
] dogrey 
0 Setcolor
0 Setcolor
 (fillarc) 6 [ 32]
[3300 2642 225 136 0 23040 
] dogrey 
0 Setcolor
0 Setcolor
 (drawpoly) 14 [ 0 0 0 0 0 0 0]
[1500 2461 1575 2393 1650 2393 1725 2461 1650 2529 1575 2529 1500 2461 1800 2461 1875 2393 1950 2393 
2025 2461 1950 2529 1875 2529 1800 2461 2100 2461 2175 2393 2250 2393 2325 2461 2250 2529 2175 2529 
2100 2461 2400 2461 2475 2393 2550 2393 2625 2461 2550 2529 2475 2529 2400 2461 2700 2461 2775 2393 
2850 2393 2925 2461 2850 2529 2775 2529 2700 2461 3000 2461 3075 2393 3150 2393 3225 2461 3150 2529 
3075 2529 3000 2461 3300 2461 3375 2393 3450 2393 3525 2461 3450 2529 3375 2529 3300 2461 
] dogrey 
0 Setcolor
/absolu true def
 (drawpoly) 14 [ 0 4 8 12 15 32 0]
[1500 2188 1575 2120 1650 2120 1725 2188 1650 2256 1575 2256 1500 2188 1800 2188 1875 2120 1950 2120 
2025 2188 1950 2256 1875 2256 1800 2188 2100 2188 2175 2120 2250 2120 2325 2188 2250 2256 2175 2256 
2100 2188 2400 2188 2475 2120 2550 2120 2625 2188 2550 2256 2475 2256 2400 2188 2700 2188 2775 2120 
2850 2120 2925 2188 2850 2256 2775 2256 2700 2188 3000 2188 3075 2120 3150 2120 3225 2188 3150 2256 
3075 2256 3000 2188 3300 2188 3375 2120 3450 2120 3525 2188 3450 2256 3375 2256 3300 2188 
] dogrey 
0 Setcolor
/absolu true def
0 Setcolor
/closeflag false def
 (drawpoly) 14 [ 0]
[1500 1916 1575 1847 1650 1847 1725 1916 1650 1984 1575 1984 1500 1916 
] dogrey 
0 Setcolor
/absolu true def
1 Setcolor
/closeflag false def
 (drawpoly) 14 [ 0]
[1800 1916 1875 1847 1950 1847 2025 1916 1950 1984 1875 1984 1800 1916 
] dogrey 
1 Setcolor
/absolu true def
2 Setcolor
/closeflag false def
 (drawpoly) 14 [ 0]
[2100 1916 2175 1847 2250 1847 2325 1916 2250 1984 2175 1984 2100 1916 
] dogrey 
2 Setcolor
/absolu true def
3 Setcolor
/closeflag false def
 (drawpoly) 14 [ 0]
[2400 1916 2475 1847 2550 1847 2625 1916 2550 1984 2475 1984 2400 1916 
] dogrey 
3 Setcolor
/absolu true def
4 Setcolor
/closeflag false def
 (drawpoly) 14 [ 0]
[2700 1916 2775 1847 2850 1847 2925 1916 2850 1984 2775 1984 2700 1916 
] dogrey 
4 Setcolor
/absolu true def
5 Setcolor
/closeflag false def
 (drawpoly) 14 [ 0]
[3000 1916 3075 1847 3150 1847 3225 1916 3150 1984 3075 1984 3000 1916 
] dogrey 
5 Setcolor
/absolu true def
6 Setcolor
/closeflag false def
 (drawpoly) 14 [ 0]
[3300 1916 3375 1847 3450 1847 3525 1916 3450 1984 3375 1984 3300 1916 
] dogrey 
6 Setcolor
/absolu true def
0 Setcolor
0 Setcolor
/Symbol findfont 80 scf mul scalefont setfont
HardMark 0 16#2b put
 (drawpolymark) 14 [ 0]
[1500 1643 1575 1575 1650 1575 1725 1643 1650 1711 1575 1711 1500 1643 
] dogrey 
/absolu true def
/Times-Roman findfont 100 scf mul scalefont setfont
0 Setcolor
/Symbol findfont 80 scf mul scalefont setfont
HardMark 0 16#b4 put
 (drawpolymark) 14 [ 0]
[1800 1643 1875 1575 1950 1575 2025 1643 1950 1711 1875 1711 1800 1643 
] dogrey 
/absolu true def
/Times-Roman findfont 100 scf mul scalefont setfont
0 Setcolor
/Symbol findfont 80 scf mul scalefont setfont
HardMark 0 16#c5 put
 (drawpolymark) 14 [ 0]
[2100 1643 2175 1575 2250 1575 2325 1643 2250 1711 2175 1711 2100 1643 
] dogrey 
/absolu true def
/Times-Roman findfont 100 scf mul scalefont setfont
0 Setcolor
/Symbol findfont 80 scf mul scalefont setfont
HardMark 0 16#a8 put
 (drawpolymark) 14 [ 0]
[2400 1643 2475 1575 2550 1575 2625 1643 2550 1711 2475 1711 2400 1643 
] dogrey 
/absolu true def
/Times-Roman findfont 100 scf mul scalefont setfont
0 Setcolor
/Symbol findfont 80 scf mul scalefont setfont
HardMark 0 16#e0 put
 (drawpolymark) 14 [ 0]
[2700 1643 2775 1575 2850 1575 2925 1643 2850 1711 2775 1711 2700 1643 
] dogrey 
/absolu true def
/Times-Roman findfont 100 scf mul scalefont setfont
0 Setcolor
/Symbol findfont 80 scf mul scalefont setfont
HardMark 0 16#44 put
 (drawpolymark) 14 [ 0]
[3000 1643 3075 1575 3150 1575 3225 1643 3150 1711 3075 1711 3000 1643 
] dogrey 
/absolu true def
/Times-Roman findfont 100 scf mul scalefont setfont
0 Setcolor
/Symbol findfont 80 scf mul scalefont setfont
HardMark 0 16#d1 put
 (drawpolymark) 14 [ 0]
[3300 1643 3375 1575 3450 1575 3525 1643 3450 1711 3375 1711 3300 1643 
] dogrey 
/absolu true def
/Times-Roman findfont 100 scf mul scalefont setfont
0 Setcolor
 (drawsegs) 28 [ 0]
[1500 1439 1725 1302 1800 1439 2025 1302 2100 1439 2325 1302 2400 1439 2625 1302 2700 1439 2925 1302 
3000 1439 3225 1302 3300 1439 3525 1302 
] dogrey 
0 Setcolor
0 Setcolor
 (drawarrows) 28 [ 640]
[1500 1302 1725 1166 1800 1302 2025 1166 2100 1302 2325 1166 2400 1302 2625 1166 2700 1302 2925 1166 
3000 1302 3225 1166 3300 1302 3525 1166 
] dogrey 
0 Setcolor
(10   ) 1500 984 1  0.00 [1500 894 287 120] Show
(20   ) 2250 984 1  0.00 [2250 894 287 120] Show
(35   ) 3000 984 1  0.00 [3000 894 287 120] Show
(10   ) 1500 757 0  0.00 [1500 667 287 120] Show
(20   ) 2250 757 0  0.00 [2250 667 287 120] Show
(35   ) 3000 757 0  0.00 [3000 667 287 120] Show
 showpage

 end saved restore 

