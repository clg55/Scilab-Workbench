<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">

<!--Converted with LaTeX2HTML 2002-2-1 (1.70)
original version by:  Nikos Drakos, CBLU, University of Leeds
* revised and updated by:  Marcus Hennecke, Ross Moore, Herb Swan
* with significant contributions from:
  Jens Lippmann, Marek Rouchal, Martin Wilck and others -->
<HTML>
<HEAD>
<TITLE>Relational operation </TITLE>
<META NAME="description" CONTENT="Relational operation ">
<META NAME="keywords" CONTENT="main">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">

<META NAME="Generator" CONTENT="LaTeX2HTML v2002-2-1">
<META HTTP-EQUIV="Content-Style-Type" CONTENT="text/css">

<LINK REL="STYLESHEET" HREF="main.css">

</HEAD>

<BODY bgcolor="#FFFFFF">

<!--Table of Child-Links-->
<A NAME="CHILD_LINKS"><STRONG>Subsections</STRONG></A>

<UL>
<LI><A NAME="tex2html4813"
  HREF="RELATIONALOP.htm#SECTION005714100000000000000">Library</A>
<LI><A NAME="tex2html4814"
  HREF="RELATIONALOP.htm#SECTION005714200000000000000">Description</A>
<LI><A NAME="tex2html4815"
  HREF="RELATIONALOP.htm#SECTION005714300000000000000">Dialog Box</A>
<LI><A NAME="tex2html4816"
  HREF="RELATIONALOP.htm#SECTION005714400000000000000">Default properties</A>
<LI><A NAME="tex2html4817"
  HREF="RELATIONALOP.htm#SECTION005714500000000000000">Interfacing function</A>
<LI><A NAME="tex2html4818"
  HREF="RELATIONALOP.htm#SECTION005714600000000000000">Computational function (type 4)</A>
</UL>
<!--End of Table of Child-Links-->
<HR>

<H2><A NAME="SECTION005714000000000000000"></A><A NAME="RELATIONALOP"></A>
<BR>
Relational operation 
</H2>
<DIV ALIGN="CENTER">
<!-- MATH
 $\epsfig{file=RELATIONALOP.eps,width=90.00pt}$
 -->
<IMG
 WIDTH="143" HEIGHT="129" ALIGN="BOTTOM" BORDER="0"
 SRC="img136.gif"
 ALT="\epsfig{file=RELATIONALOP.eps,width=90.00pt}">
</DIV>
<H3><font color="blue"><A NAME="SECTION005714100000000000000">
Library</A>
</font></H3>
Others

<H3><font color="blue"><A NAME="SECTION005714200000000000000">
Description</A>
</font></H3>
Comparison operator. The output is 0 or 1.
<P>

<H3><font color="blue"><A NAME="SECTION005714300000000000000">
Dialog Box</A>
</font></H3>
<DIV ALIGN="CENTER">
<TABLE CELLPADDING=3 BORDER="1">
<TR><TD ALIGN="CENTER">Set parameters</TD>
<TD></TD>
</TR>
<TR><TD ALIGN="CENTER">Operator: == (0),&nbsp;= (1), <IMG
 WIDTH="18" HEIGHT="32" ALIGN="MIDDLE" BORDER="0"
 SRC="img1.gif"
 ALT="$ &lt;$"> (2), <IMG
 WIDTH="18" HEIGHT="32" ALIGN="MIDDLE" BORDER="0"
 SRC="img1.gif"
 ALT="$ &lt;$">= (3), <IMG
 WIDTH="18" HEIGHT="32" ALIGN="MIDDLE" BORDER="0"
 SRC="img2.gif"
 ALT="$ &gt;$">= (4), <IMG
 WIDTH="18" HEIGHT="32" ALIGN="MIDDLE" BORDER="0"
 SRC="img2.gif"
 ALT="$ &gt;$"> (5)</TD>
<TD ALIGN="CENTER">2</TD>
</TR>
<TR><TD ALIGN="CENTER">Use zero crossing (no: 0), (yes: 1)</TD>
<TD ALIGN="CENTER">0</TD>
</TR>
</TABLE>
</DIV>

<UL>
<LI>Operator: integer for the following operators: equal (0), not
equal (1), less (2), less or equal (3), larger or equal (4), larger (5)
</LI>
<LI>Use zero crossing : 0 or 1
</LI>
</UL>

<H3><font color="blue"><A NAME="SECTION005714400000000000000">
Default properties</A>
</font></H3>

<UL>
<LI>always active: no
</LI>
<LI>direct-feedthrough: yes
</LI>
<LI>zero-crossing: no
</LI>
<LI>mode: no
</LI>
<LI>number/sizes of inputs: 2 / 1  1
</LI>
<LI>number/sizes of outputs: 1 / 1
</LI>
<LI>number/sizes of activation inputs: 0 / 
</LI>
<LI>number/sizes of activation outputs: 0 / 
</LI>
<LI>continuous-time state: no
</LI>
<LI>discrete-time state: no
</LI>
<LI>name of computational function: <EM>relationalop</EM>
</LI>
</UL>
<H3><font color="blue"><A NAME="SECTION005714500000000000000">
Interfacing function</A>
</font></H3>
<TT>scilab/macros/scicos_blocks/misc/RELATIONALOP.sci</TT>

<H3><font color="blue"><A NAME="SECTION005714600000000000000">
Computational function (type 4)</A>
</font></H3>
<BR>
<PRE>#include "scicos_block.h"
#include &lt;math.h&gt;


void relationalop(scicos_block *block,int flag)
{
  int i;
  i=block-&gt;ipar[0];
  if(flag==1){
    if ((block-&gt;ng!=0)&amp;(get_phase_simulation()==2))
      {
	block-&gt;outptr[0][0]=block-&gt;mode[0]-1.0;
      }
    else {
      switch (i)
	{
	case 0:
	  if(block-&gt;inptr[0][0]==block-&gt;inptr[1][0]) {
	    block-&gt;outptr[0][0]=1.0;
	  }else{
	    block-&gt;outptr[0][0]=0.0;
	  }
	  break;
	  
	case 1:
	  if(block-&gt;inptr[0][0]!=block-&gt;inptr[1][0]) {
	    block-&gt;outptr[0][0]=1.0;
	  }else{
	    block-&gt;outptr[0][0]=0.0;
	  }
	  break;
	case 2:
	  if(block-&gt;inptr[0][0]&lt;block-&gt;inptr[1][0]) {
	    block-&gt;outptr[0][0]=1.0;
	  }else{
	    block-&gt;outptr[0][0]=0.0;
	  }
	  break;    
	case 3:
	  if(block-&gt;inptr[0][0]&lt;block-&gt;inptr[1][0]) {
	    block-&gt;outptr[0][0]=1.0;
	  }else{
	    block-&gt;outptr[0][0]=0.0;
	  }
	  break;    
	case 4:
	  if(block-&gt;inptr[0][0]&lt;=block-&gt;inptr[1][0]) {
	    block-&gt;outptr[0][0]=1.0;
	  }else{
	    block-&gt;outptr[0][0]=0.0;
	  }
	  break;   
	case 5:
	  if(block-&gt;inptr[0][0]&gt;=block-&gt;inptr[1][0]) {
	    block-&gt;outptr[0][0]=1.0;
	  }else{
	    block-&gt;outptr[0][0]=0.0;
	  }
	  break;   
	case 6:
	  if(block-&gt;inptr[0][0]&gt;block-&gt;inptr[1][0]) {
	    block-&gt;outptr[0][0]=1.0;
	  }else{
	    block-&gt;outptr[0][0]=0.0;
	  }
	  break;
	}
    }

  }else if(flag==9){
    block-&gt;g[0]=block-&gt;inptr[0][0]-block-&gt;inptr[1][0];
    if (get_phase_simulation()==1) {
      switch (i)
	{
	case 0:
	  if(block-&gt;inptr[0][0]==block-&gt;inptr[1][0]) {
	    block-&gt;mode[0]=2.0;
	  }else{
	    block-&gt;mode[0]=1.0;
	  }
	  break;
	  
	case 1:
	  if(block-&gt;inptr[0][0]!=block-&gt;inptr[1][0]) {
	    block-&gt;mode[0]=2.0;
	  }else{
	    block-&gt;mode[0]=1.0;
	  }
	  break;
	case 2:
	  if(block-&gt;inptr[0][0]&lt;block-&gt;inptr[1][0]) {
	    block-&gt;mode[0]=2.0;
	  }else{
	    block-&gt;mode[0]=1.0;
	  }
	  break;    
	case 3:
	  if(block-&gt;inptr[0][0]&lt;block-&gt;inptr[1][0]) {
	    block-&gt;mode[0]=2.0;
	  }else{
	    block-&gt;mode[0]=1.0;
	  }
	  break;    
	case 4:
	  if(block-&gt;inptr[0][0]&lt;=block-&gt;inptr[1][0]) {
	    block-&gt;mode[0]=2.0;
	  }else{
	    block-&gt;mode[0]=1.0;
	  }
	  break;   
	case 5:
	  if(block-&gt;inptr[0][0]&gt;=block-&gt;inptr[1][0]) {
	    block-&gt;mode[0]=2.0;
	  }else{
	    block-&gt;mode[0]=1.0;
	  }
	  break;   
	case 6:
	  if(block-&gt;inptr[0][0]&gt;block-&gt;inptr[1][0]) {
	    block-&gt;mode[0]=2.0;
	  }else{
	    block-&gt;mode[0]=1.0;
	  }
	  break;
	}
    }
  }
}
</PRE>
<BR><HR>
<ADDRESS>
Ramine Nikoukhah
2004-06-22
</ADDRESS>
</BODY>
</HTML>
