%!PS-Adobe-2.0 EPSF-2.0
%%BoundingBox:  0 0 300 212
%%
%%Scilab Postscript File (1995-1997 J.Ph Chancelier)
%%EndComments
/saved save def 
/$pictdict 100 dict def
$pictdict begin

/dogrey
{ /Arraybox exch def
	/Arraygrey exch def
	/nargs exch def 
	/func exch cvx def
	Arraybox 0 nargs getinterval Arraygrey 0 get func 
	1 1 Arraygrey length 1 sub 
	{/i exch def
	Arraybox i nargs mul nargs getinterval 
	Arraygrey i get func
	}for
} def
%--------------------------------------------
% [x y width height] nivgris drawbox 
% si niv gris > 1.0 alors on fait un stroke 
% sans closepath 
%--------------------------------------------

/drawpoly
	{/glev exch def /Ar exch def
	newpath
	Ar 0 get Ar 1 get moveto 
	2 2 Ar length 1 sub 
	{/i exch def
	Ar i get Ar i 1 add get absolu {lineto} {rlineto} ifelse
	}for
	glev -1 le 
	{ % filling the polygon with current pattern ( gray or color)
	  closepath gsave glev neg 1 sub WhiteLev 2 add lmin 0 lmax Setgray eofill grestore }
	{ glev 1 ge 
	   { % drawing the polygon with current dash style or color 
	     % XXXXX : a voir c'est pas clair il faudrait sauver 
	     % and filling it with other color (glev) 
	     closepath gsave glev 1 sub WhiteLev 2 add lmin 0 lmax Setgray 
		 eofill grestore stroke }
	   {% drawing the polygon with current style 
	    closeflag {closepath} if stroke} 
	ifelse }
	ifelse 
} def 


/drawbox 
	{/glev exch def /Ar exch def 
	/x Ar 0 get def /y Ar 1 get def 
	/w Ar 2 get def /h Ar 3 get def 
	newpath
	x y moveto
	x w add y lineto
	x w add y h add lineto
	x y h add lineto
	glev 1 ge 
	{ % filling 
	 closepath gsave glev 1 sub WhiteLev 2 add lmin 0 lmax Setgray eofill 
		grestore}
	{ 
	  % drawing 
	  glev -1 le 
	  {
    	  closepath gsave glev neg 1 sub WhiteLev 2 add lmin 0 lmax Setgray
		 stroke grestore  }
	  { closepath stroke} ifelse 
	} ifelse
} def 

%--------------------------------------------
% [x y width height] clearzone
%--------------------------------------------
/clearzone
        {/Ar exch def
        /x Ar 0 get def /y Ar 1 get def
        /w Ar 2 get def /h Ar 3 get def
        newpath
        x y moveto
        x w add y lineto
        x w add y h add lineto
        x y h add lineto
	closepath WhiteLev 2 add Setcolor  eofill grestore
} def

%------------------------------------------------------
% polyline stroke or polygon fill or both 
%------------------------------------------------------
/absolu true def 
/closeflag false def 

/lmin { /y exch def /x exch def x y le { x  } {  y  } ifelse } def
/lmax { /y exch def /x exch def x y le { y } {  x } ifelse } def 


/drawpoly
	{/glev exch def /Ar exch def
	newpath
	Ar 0 get Ar 1 get moveto 
	2 2 Ar length 1 sub 
	{/i exch def
	Ar i get Ar i 1 add get absolu {lineto} {rlineto} ifelse
	}for
	glev -1 le 
	{ % filling the polygon with current pattern ( gray or color)
	  closepath gsave glev neg 1 sub WhiteLev 2 add lmin 0 lmax Setgray eofill grestore }
	{ glev 1 ge 
	   { % drawing the polygon with current dash style or color 
	     % XXXXX : a voir c'est pas clair il faudrait sauver 
	     % and filling it with other color (glev) 
	     closepath gsave glev 1 sub WhiteLev 2 add lmin 0 lmax Setgray 
		 eofill grestore stroke }
	   {% drawing the polygon with current style 
	    closeflag {closepath} if stroke} 
	ifelse }
	ifelse 
} def 

%------------------------------------------------------
% segments non connectes 
%------------------------------------------------------

/drawsegs
	{/glev exch def /Ar exch def
	newpath
	Ar 0 get Ar 1 get moveto Ar 2 get Ar 3 get lineto 
	gsave glev Setgray stroke grestore
	4 4 Ar length 3 sub 
	{/i exch def
	newpath 
	Ar i get Ar i 1 add get moveto
	Ar i 2 add get Ar i 3 add get lineto 
	gsave glev Setgray stroke grestore
	}for
} def 


%------------------------------------------------------
% unconected arrows
%-----------------------------------------------------

/drawarrows
	{/arsize10 exch def /Ar exch def
	Ar 0 get  Ar 1 get Ar 2 get Ar 3 get arsize10 drawarrow
	4 4 Ar length 3 sub 
	{/i exch def
	Ar i get Ar i 1 add get  Ar i 2 add get  Ar i 3 add get arsize10 
	drawarrow
	}for
} def 
		
/cos20 20 cos def
/sin20 20 sin def

/drawarrow                                
  { 
      /arsize exch 10 div def 
      /tipy exch def /tipx exch def       
      /taily exch def /tailx exch def
      /dx tipx tailx sub  def               
      /dy tipy taily sub  def               
      newpath tipx tipy moveto tailx taily lineto stroke   
      /norme dx dx mul dy dy mul add sqrt def 
      norme 1.e-8 ge 
	{
	 arsize dx mul norme div /dx1 exch def 
	 arsize dy mul norme div /dy1 exch def 
	 /depx tipx cos20 dx1 mul add def 
	/depy  tipy cos20 dy1 mul add def 
	newpath depx depy moveto 
	cos20 neg dx1 mul sin20 dy1 mul sub depx add
	sin20 dx1  mul cos20 dy1 mul sub depy add lineto 
	cos20 neg dx1 mul sin20 dy1 mul add  depx add
	sin20 neg dx1 mul cos20 dy1 mul sub depy add lineto closepath 
	fill
	} {} ifelse 
  } def


%------------------------------------------------------
% cercle ou portions de cercle 
% attention argument (x y w h angl1*64 angl2*64 )
% devrait tracer une ellipse a modifier donc 
%------------------------------------------------------

/fillarc
	{/glev exch def /Ar exch def
	/cx Ar 0 get Ar 2 get 2 div add def 
	/cy Ar 1 get Ar 3 get 2 div add def 
	/hom Ar 3 get Ar 2 get div def 
	/Cmsave1 matrix def Cmsave1 currentmatrix pop
	%-- on change de transformation pour faire homothetie en (x,y) 
	cx cy [1 0 0 hom 0 0 ] transform
	/t1 exch neg cy add def 
	/t2 exch neg cx add def 
	[1 0 0 hom t2 t1 ] concat 
	glev WhiteLev le
	{ % filling 
	newpath
	cx cy moveto 
	cx cy Ar 2 get 2 div Ar 5 get Ar 4 get add  64 div neg
	 Ar 4 get 64 div neg  arc closepath
	gsave glev Setgray eofill grestore}
	{
	%drawing with current dash or color unclosed path 
	newpath
	cx cy Ar 2 get 2 div Ar 5 get Ar 4 get add 64 div neg Ar 4 get 64 div neg arc
	  stroke} ifelse 
	Cmsave1 setmatrix } def 

/drawarc
	{/glev exch def /Ar exch def
	/cx Ar 0 get Ar 2 get 2 div add def 
	/cy Ar 1 get Ar 3 get 2 div add def 
	/hom Ar 3 get Ar 2 get div def 
	/Cmsave1 matrix def Cmsave1 currentmatrix pop
	%-- on change de transformation pour faire homothetie en (x,y) 
	cx cy [1 0 0 hom 0 0 ] transform
	/t1 exch neg cy add def 
	/t2 exch neg cx add def 
	[1 0 0 hom t2 t1 ] concat 
	newpath
	cx cy Ar 2 get 2 div Ar 5 get Ar 4 get add 64 div neg Ar 4 get 64 div neg arc
	closepath glev Setgray stroke
	Cmsave1 setmatrix } def 

%------------------------------------------------------
% centred hard mark 
%------------------------------------------------------

% x y str ShowCString 
% on fait un show mais string est centre autour du point (x,y) 

/ShowCString { /str exch def /y exch def /x exch def 
 newpath 
 x y moveto 
 str true charpath flattenpath pathbbox 
 /y2 exch def /x2 exch def /y1 exch def /x1 exch def 
 x 2 mul x2 x1 add 2 div sub 
 y 2 mul y2 y1 add 2 div sub moveto str show 
 } def 

/drawpolymark {/glev exch def /Ar exch def 
	Ar 0 get Ar 1 get HardMark ShowCString 
	2 2 Ar length 1 sub 
	{/i exch def
	Ar i get Ar i 1 add get HardMark ShowCString
	}for
} def 

%---------------------------------------------------
% chaines de caracteres 
%---------------------------------------------------
/FBox {/Ar exch def /rot exch def /str exch def /y exch def /x exch def 
 newpath Ar 0 get Ar 1 get moveto 
	/sina rot sin def /cosa rot cos def 
	/-sina sina neg def 
	[cosa -sina sina cosa 0 0 ] CtmModif
 Ar 2 get 0 rlineto 0 Ar 3 get neg rlineto Ar 2 get neg 0 rlineto 
 0 Ar 3 get  rlineto  stroke CtmRestore 
 x y str rot ShowRotate 
 } def 

% x y str ang Showrotate 
% inverse du sens trigo 

/ShowRotate { /ang exch def /str exch def 
	/y exch def /x exch def 
	x y moveto 
	/sina ang sin def /cosa ang cos def 
	/-sina 0 sina sub def 
	[cosa -sina sina cosa 0 0 ] CtmModif
	str show 
	CtmRestore 
} def 

/HardMark (0) def 

%(Chaine de caracteres) x y flag angle [arfbox] Show

/Show { /Ar exch def 
	/rot exch def /flag exch def /y exch def /x exch def /str exch def 
	flag 1 eq 
	{x y str rot Ar FBox}
	{x y str rot ShowRotate } ifelse} def 

/L {/y2 exch def /x2 exch def /y1 exch def /x1 exch def 
    newpath x1 y1 moveto x2 y2 lineto stroke } def 

%---------------------------------------------------------
% drawing an axis 
% angle [nsep1,nsep2] ,[siz1,siz2,coeff] [x0,y0] drawaxis",
%---------------------------------------------------------

/drawaxis {/XX exch def /Arsize exch def /Arsep exch def /ang exch def 
	/Cmsave1 matrix def Cmsave1 currentmatrix pop
	/sina ang sin def /cosa ang cos def /-sina sina neg def 
	/x XX 0 get def /y XX 1 get def
	%-- on change de transformation pour tourner autour de (x,y) 
	x y [cosa sina -sina cosa 0 0 ] transform
	/t1 exch neg y add def 
	/t2 exch neg x add def 
	[cosa sina -sina cosa t2 t1 ] concat 
	newpath x y moveto 0 Arsize 1 get Arsize 2 get mul rlineto
	stroke 
	0 1 Arsep 1 get 1 sub
	{
	 % i don't want the value of the for indice 
	 pop
	newpath 
	x y moveto 
	0 1 Arsep 0 get 1 sub
		{
		 % i don't want the value of the for indice 
		 pop
		 Arsize 0 get 0  rlineto
		 0 Arsize 1 get rlineto 
	 	0 Arsize 1 get  neg rlineto }
		for 
	currentpoint /y exch def /x exch def 
	stroke 
	newpath x y moveto 0 Arsize 1 get Arsize 2 get mul rlineto
	stroke }
	for 
	Cmsave1 setmatrix } def 

%---------------------------------------------------------
% change and restore CTM
%---------------------------------------------------------

/CtmModif {
	/arg exch def 
	/Cmsave matrix def 
	Cmsave currentmatrix pop
	[1 0 0 -1 0 0 ] concat 
	arg concat 
} def 

/CtmRestore { Cmsave setmatrix } def 

/Thickness { /th exch def th 0 le {/th 0.1 def} if th setlinewidth} def 

/WhiteLev 15 def

/Setgray { WhiteLev div setgray} def 

/fillsolid { 0 setgray } def 

%--------------------------------------
% clip zones ( rectangle ) 
%-------------------------------------

/setclipzone {initclip 
	/h exch def /w exch def /y exch def /x exch def 
	newpath x y moveto w 0 rlineto 0 h rlineto w neg 0 rlineto 
	0 h neg rlineto closepath clip} def 

%------------------
% to change the position of a picture 
%------------------
/cm{28.346457 mul}def

/DesPosi { /YH exch def /XW exch def /YP exch def /XP exch def 
	XP cm YP cm neg translate 
	XW cm 6000 div YH cm 4240 div  scale } def 

0 setlinecap 
2 setlinejoin 
1 setlinewidth

%-- Color database 
/ColorR [0.000000 0.000000 0.000000 0.529412 0.498039 0.133333 0.000000 0.878431 0.000000 1.000000 1.000000 1.000000 0.933333 1.000000 1.000000 0.960784 1.000000 ] def
/ColorG [0.000000 0.000000 0.000000 0.807843 1.000000 0.545098 1.000000 1.000000 1.000000 0.647059 0.000000 0.000000 0.509804 1.000000 0.843137 0.960784 1.000000 ] def
/ColorB [0.000000 0.501961 1.000000 0.921569 0.831373 0.133333 0.000000 1.000000 1.000000 0.000000 0.000000 1.000000 0.933333 0.000000 0.000000 0.862745 1.000000 ] def

/Setcolor {/i exch def ColorR i get ColorG i get ColorB i get setrgbcolor } def

% to multiply all the fontsizes by a factor  scf
/scf 1.0 def


% changing fonts encoding 

/Courier findfont
dup length dict begin
  {1 index /FID ne {def} {pop pop} ifelse} forall
  /Encoding ISOLatin1Encoding def
  currentdict
  end
/Courier exch definefont pop

/Times-Roman findfont
dup length dict begin
  {1 index /FID ne {def} {pop pop} ifelse} forall
  /Encoding ISOLatin1Encoding def
  currentdict
  end
/Times-Roman exch definefont pop

/Times-Bold findfont
dup length dict begin
  {1 index /FID ne {def} {pop pop} ifelse} forall
  /Encoding ISOLatin1Encoding def
  currentdict
  end
/Times-Bold exch definefont pop


/Times-BoldItalic findfont
dup length dict begin
  {1 index /FID ne {def} {pop pop} ifelse} forall
  /Encoding ISOLatin1Encoding def
  currentdict
  end
/Times-BoldItalic exch definefont pop


%------ End Main Program ------%
% XP YP XW YW DesPosi in the following code 
% will output the picture in the rectangle defined by 
% upper left point (XP,YP) wide :XW Height: YW
% the coordinates are given in centimeter and 
% are the (0,0) point is the down-left point of the paper 


/ColorR [0.000000 
0.000000 0.000000 0.000000 1.000000 1.000000 1.000000 1.000000 0.000000 0.000000 0.000000 
0.529412 0.000000 0.000000 0.000000 0.000000 0.000000 0.000000 0.564706 0.690196 0.815686 
0.564706 0.690196 0.815686 0.501961 0.627451 0.752941 1.000000 1.000000 1.000000 1.000000 
1.000000 0.0 1.0] def
/ColorG [0.000000 
0.000000 1.000000 1.000000 0.000000 0.000000 0.000000 1.000000 0.000000 0.000000 0.000000 
0.807843 0.564706 0.690196 0.815686 0.564706 0.690196 0.815686 0.000000 0.000000 0.000000 
0.000000 0.000000 0.000000 0.188235 0.250980 0.376471 0.501961 0.627451 0.752941 0.878431 
0.843137 0.0 1.0] def
/ColorB [0.000000 
1.000000 0.000000 1.000000 0.000000 1.000000 0.000000 1.000000 0.564706 0.690196 0.815686 
1.000000 0.000000 0.000000 0.000000 0.564706 0.690196 0.815686 0.000000 0.000000 0.000000 
0.564706 0.690196 0.815686 0.000000 0.000000 0.000000 0.501961 0.627451 0.752941 0.878431 
0.000000 0.0 1.0] def
% Dessin en bas a gauche de taille 3000,2120
[0.5 10 div 0 0 0.5 10 div neg  0 2120 10 div] concat
% Init driver 
5 Thickness
% 3 setalufunction
-1 -1 200000 200000 setclipzone
0 Setcolor
/Times-Roman findfont 100 scf mul scalefont setfont
fillsolid
[] 0 setdash
0 Setcolor
%--use color 1 
fillsolid
[] 0 setdash
0 Setcolor
/WhiteLev 31 def
/Setgray {/i exch def ColorR i get ColorG i get ColorB i get setrgbcolor } def 
/Setcolor {/i exch def ColorR i get ColorG i get ColorB i get setrgbcolor } def 
%--end use color 1 
% End init driver 
/WhiteLev 31 def
0 Setcolor
 (drawbox) 4 [ 0]
[750 530 4500 3180 
] dogrey 
0 Setcolor
(0) 722 3906 0  0.00 [722 3816 57 120] Show
 (drawsegs) 4 [ 0]
[750 3710 750 3773 
] dogrey 
0 Setcolor
 (drawsegs) 4 [ 0]
[1200 3710 1200 3741 
] dogrey 
0 Setcolor
(100) 1564 3906 0  0.00 [1564 3816 172 120] Show
 (drawsegs) 4 [ 0]
[1650 3710 1650 3773 
] dogrey 
0 Setcolor
 (drawsegs) 4 [ 0]
[2100 3710 2100 3741 
] dogrey 
0 Setcolor
(200) 2464 3906 0  0.00 [2464 3816 172 120] Show
 (drawsegs) 4 [ 0]
[2550 3710 2550 3773 
] dogrey 
0 Setcolor
 (drawsegs) 4 [ 0]
[3000 3710 3000 3741 
] dogrey 
0 Setcolor
(300) 3364 3906 0  0.00 [3364 3816 172 120] Show
 (drawsegs) 4 [ 0]
[3450 3710 3450 3773 
] dogrey 
0 Setcolor
 (drawsegs) 4 [ 0]
[3900 3710 3900 3741 
] dogrey 
0 Setcolor
(400) 4264 3906 0  0.00 [4264 3816 172 120] Show
 (drawsegs) 4 [ 0]
[4350 3710 4350 3773 
] dogrey 
0 Setcolor
 (drawsegs) 4 [ 0]
[4800 3710 4800 3741 
] dogrey 
0 Setcolor
(500) 5164 3906 0  0.00 [5164 3816 172 120] Show
 (drawsegs) 4 [ 0]
[5250 3710 5250 3773 
] dogrey 
0 Setcolor
(-10) 506 3770 0  0.00 [506 3680 172 120] Show
 (drawsegs) 4 [ 0]
[750 3710 690 3710 
] dogrey 
0 Setcolor
 (drawsegs) 4 [ 0]
[750 3445 720 3445 
] dogrey 
0 Setcolor
(30) 564 3240 0  0.00 [564 3150 114 120] Show
 (drawsegs) 4 [ 0]
[750 3180 690 3180 
] dogrey 
0 Setcolor
 (drawsegs) 4 [ 0]
[750 2915 720 2915 
] dogrey 
0 Setcolor
(70) 564 2710 0  0.00 [564 2620 114 120] Show
 (drawsegs) 4 [ 0]
[750 2650 690 2650 
] dogrey 
0 Setcolor
 (drawsegs) 4 [ 0]
[750 2385 720 2385 
] dogrey 
0 Setcolor
(110) 506 2180 0  0.00 [506 2090 172 120] Show
 (drawsegs) 4 [ 0]
[750 2120 690 2120 
] dogrey 
0 Setcolor
 (drawsegs) 4 [ 0]
[750 1855 720 1855 
] dogrey 
0 Setcolor
(150) 506 1650 0  0.00 [506 1560 172 120] Show
 (drawsegs) 4 [ 0]
[750 1590 690 1590 
] dogrey 
0 Setcolor
 (drawsegs) 4 [ 0]
[750 1325 720 1325 
] dogrey 
0 Setcolor
(190) 506 1120 0  0.00 [506 1030 172 120] Show
 (drawsegs) 4 [ 0]
[750 1060 690 1060 
] dogrey 
0 Setcolor
 (drawsegs) 4 [ 0]
[750 795 720 795 
] dogrey 
0 Setcolor
(230) 506 590 0  0.00 [506 500 172 120] Show
 (drawsegs) 4 [ 0]
[750 530 690 530 
] dogrey 
0 Setcolor
0 Setcolor
750 530 4500 3180 setclipzone
0 Setcolor
/closeflag false def
 (drawpoly) 432 [ 0]
[759 1026 768 1075 777 1177 786 1282 795 1388 804 1496 813 1605 822 1716 831 1829 840 1943 
849 2059 858 2175 867 2292 876 2408 885 2524 894 2638 903 2750 912 2859 921 2964 930 3064 
939 3159 948 3247 957 3328 966 3402 975 3468 984 3527 993 3570 1002 3573 1011 3544 1020 3513 
1029 3490 1038 3473 1047 3463 1056 3458 1065 3457 1074 3461 1083 3467 1092 3476 1101 3486 1110 3497 
1119 3509 1128 3521 1137 3532 1146 3542 1155 3552 1164 3560 1173 3567 1182 3573 1191 3577 1200 3574 
1209 3572 1218 3570 1227 3569 1236 3569 1245 3570 1254 3571 1263 3572 1272 3573 1281 3574 1290 3575 
1299 3576 1308 3576 1317 3577 1326 3577 1335 3577 1344 3577 1353 3577 1362 3577 1371 3577 1380 3577 
1389 3577 1398 3577 1407 3577 1416 3577 1425 3577 1434 3577 1443 3577 1452 3577 1461 3577 1470 3577 
1479 3577 1488 3577 1497 3577 1506 3577 1515 3577 1524 3577 1533 3577 1542 3577 1551 3577 1560 3577 
1569 3577 1578 3577 1587 3577 1596 3577 1605 3577 1614 3577 1623 3577 1632 3577 1641 3576 1650 3576 
1659 3576 1668 3576 1677 3577 1686 3577 1695 3577 1704 3577 1713 3577 1722 3577 1731 3577 1740 3577 
1749 3576 1758 3576 1767 3577 1776 3577 1785 3577 1794 3577 1803 3577 1812 3577 1821 3577 1830 3577 
1839 3577 1848 3577 1857 3577 1866 3577 1875 3577 1884 3577 1893 3577 1902 3577 1911 3577 1920 3577 
1929 3577 1938 3577 1947 3577 1956 3577 1965 3577 1974 3577 1983 3577 1992 3577 2001 3577 2010 3577 
2019 3577 2028 3577 2037 3577 2046 3577 2055 3577 2064 3577 2073 3577 2082 3577 2091 3577 2100 3577 
2109 3577 2118 3577 2127 3577 2136 3577 2145 3577 2154 3577 2163 3577 2172 3577 2181 3577 2190 3577 
2199 3577 2208 3577 2217 3577 2226 3577 2235 3577 2244 3577 2253 3577 2262 3577 2271 3577 2280 3577 
2289 3577 2298 3577 2307 3577 2316 3577 2325 3577 2334 3577 2343 3577 2352 3577 2361 3577 2370 3577 
2379 3577 2388 3577 2397 3577 2406 3577 2415 3577 2424 3577 2433 3577 2442 3577 2451 3577 2460 3577 
2469 3577 2478 3577 2487 3577 2496 3577 2505 3577 2514 3577 2523 3577 2532 3577 2541 3577 2550 3577 
2559 3577 2568 3577 2577 3577 2586 3577 2595 3577 2604 3577 2613 3577 2622 3577 2631 3577 2640 3577 
2649 3577 2658 3577 2667 3577 2676 3577 2685 3577 2694 3577 
] dogrey 
 (drawpoly) 418 [0]
[2703 3577 2712 3577 2721 3577 2730 3577 2739 3577 2748 3577 2757 3577 2766 3577 2775 3577 2784 3577 
2793 3577 2802 3577 2811 3577 2820 3577 2829 3577 2838 3577 2847 3577 2856 3577 2865 3577 2874 3577 
2883 3577 2892 3577 2901 3577 2910 3577 2919 3577 2928 3577 2937 3577 2946 3577 2955 3577 2964 3577 
2973 3577 2982 3577 2991 3577 3000 3577 3009 3577 3018 3577 3027 3577 3036 3577 3045 3577 3054 3577 
3063 3577 3072 3577 3081 3577 3090 3577 3099 3577 3108 3577 3117 3577 3126 3577 3135 3577 3144 3577 
3153 3577 3162 3577 3171 3577 3180 3577 3189 3577 3198 3577 3207 3577 3216 3577 3225 3577 3234 3577 
3243 3577 3252 3577 3261 3577 3270 3577 3279 3577 3288 3577 3297 3577 3306 3577 3315 3577 3324 3577 
3333 3577 3342 3577 3351 3577 3360 3577 3369 3577 3378 3577 3387 3577 3396 3577 3405 3577 3414 3577 
3423 3577 3432 3577 3441 3577 3450 3577 3459 3577 3468 3577 3477 3577 3486 3577 3495 3577 3504 3577 
3513 3577 3522 3577 3531 3577 3540 3577 3549 3577 3558 3577 3567 3577 3576 3577 3585 3576 3594 3576 
3603 3577 3612 3577 3621 3577 3630 3577 3639 3577 3648 3577 3657 3577 3666 3577 3675 3576 3684 3576 
3693 3576 3702 3576 3711 3577 3720 3577 3729 3577 3738 3577 3747 3577 3756 3577 3765 3577 3774 3577 
3783 3577 3792 3577 3801 3577 3810 3577 3819 3577 3828 3577 3837 3577 3846 3577 3855 3577 3864 3577 
3873 3577 3882 3577 3891 3577 3900 3577 3909 3577 3918 3577 3927 3577 3936 3577 3945 3577 3954 3577 
3963 3577 3972 3577 3981 3577 3990 3577 3999 3577 4008 3577 4017 3577 4026 3577 4035 3576 4044 3576 
4053 3575 4062 3574 4071 3573 4080 3572 4089 3571 4098 3570 4107 3569 4116 3569 4125 3570 4134 3572 
4143 3574 4152 3577 4161 3573 4170 3567 4179 3560 4188 3552 4197 3542 4206 3532 4215 3521 4224 3509 
4233 3497 4242 3486 4251 3476 4260 3467 4269 3461 4278 3457 4287 3458 4296 3463 4305 3473 4314 3490 
4323 3513 4332 3544 4341 3573 4350 3570 4359 3527 4368 3468 4377 3402 4386 3328 4395 3247 4404 3159 
4413 3064 4422 2964 4431 2859 4440 2750 4449 2638 4458 2524 4467 2408 4476 2292 4485 2175 4494 2059 
4503 1943 4512 1829 4521 1716 4530 1605 4539 1496 4548 1388 4557 1282 4566 1177 4575 1075 
] dogrey 
0 Setcolor
/absolu true def
0 Setcolor
-1 -1 200000 200000 setclipzone
 showpage

 end saved restore 

