 
getf SCI/util/testexamples.sci
 
reinit_for_test()
 
%U=mopen('SCI/tests/graphical_tests/plot_data.ref','rb');
 
// x initialisation
 
x = (0:0.1:2 * %pi)';
 
//simple plot
 
%ans = plot(sin(x));
 
if load_ref('%ans') then   bugmes();quit;end,
 
 
%ans = clf_run();
 
if load_ref('%ans') then   bugmes();quit;end,
 
 
%ans = plot(x, sin(x));
 
if load_ref('%ans') then   bugmes();quit;end,
 
 
//multiple plot
 
%ans = clf_run();
 
if load_ref('%ans') then   bugmes();quit;end,
 
 
%ans = plot(x, [sin(x),sin(2 * x),sin(3 * x)]);
 
if load_ref('%ans') then   bugmes();quit;end,
 
 
%ans = clf_run();
 
if load_ref('%ans') then   bugmes();quit;end,
 
 
 
// axis on the right
 
%ans = plot(x, sin(x));
 
if load_ref('%ans') then   bugmes();quit;end,
 
 
a = gca();// Handle on current axes entity
 
a('y_location') = 'right';
 
%ans = clf_run();
 
if load_ref('%ans') then   bugmes();quit;end,
 
 
 
// axis centered at (0,0)
 
%ans = plot(x - 4, sin(x), x + 2, cos(x));
 
if load_ref('%ans') then   bugmes();quit;end,
 
 
a = gca();// Handle on axes entity
 
a('x_location') = 'middle';
 
a('y_location') = 'middle';
 
 
// Some operations on entities created by plot0...
 
a = gca();
 
a('isoview') = 'on';
 
%ans = a('children');
 
if load_ref('%ans') then   bugmes();quit;end,
 
// list the children of the axes : here it is an Compound child composed of 2 entities
 
poly1 = a.children.children(2);//store polyline handle into poly1
 
poly1('foreground') = 4;// another way to change the style...
 
poly1('thickness') = 3;//0...and the tickness of a curve.
 
poly1('clip_state') = 'off';
 
if load_ref('poly1') then   bugmes();quit;end,
 
// clipping control
 
leg = a.children.children(1);// store legend handle into leg
 
leg('font_style') = 9;
 
leg('foreground') = 6;
 
a('isoview') = 'off';
 
 
//LineSpec and GlobalProperty examples:
 
clf_run();
 
t = 0:%pi/20:2 * %pi;
 
%ans = plot(t, sin(t), 'ro-0.', t, cos(t), 'cya+', t, abs(sin(t)), '--mo');
 
if load_ref('%ans') then   bugmes();quit;end,
 
 
%ans = scf(2);
 
if load_ref('%ans') then   bugmes();quit;end,
 
 
%ans = plot([t;t], [sin(t);cos(t)], 'xdat', 1:2);
 
if load_ref('%ans') then   bugmes();quit;end,
 
 
%ans = scf(3);
 
if load_ref('%ans') then   bugmes();quit;end,
 
 
axfig3 = gca();
 
%ans = scf(4);
 
if load_ref('%ans') then   bugmes();quit;end,
 
// should remain blank
 
%ans = plot(axfig3, [t;t], [sin(t);cos(t)], 'zdat', 1:2, 'marker', 'd', 'markerfac', 'green', 'markeredg', 'yel');
 
if load_ref('%ans') then   bugmes();quit;end,
 
 
%ans = xdel_run(winsid());
 
if load_ref('%ans') then   bugmes();quit;end,
 
 
 
//Data specification
 
t = -%pi:0.1:%pi;
 
%ans = size(t);
 
if load_ref('%ans') then   bugmes();quit;end,
 
 
%ans = plot(t);
 
if load_ref('%ans') then   bugmes();quit;end,
 
// simply plots y versus t vector size
 
clf_run();// clear figure
 
 
plot(t, sin(t));// plots sin(t) versus t
 
clf_run();
 
 
t = [1,1,1,1;
  2,3,4,5;
  3,4,5,6;
  4,5,6,7];
 
 
%ans = plot(t);
 
if load_ref('%ans') then   bugmes();quit;end,
 
// plots each t column versus row size
 
clf_run();
 
 
%ans = subplot(221);
 
if load_ref('%ans') then   bugmes();quit;end,
 
 
plot(t, sin(t));// plots sin(t) versus t column by column this time
 
%ans = xtitle('sin(t) versus t');
 
if load_ref('%ans') then   bugmes();quit;end,
 
 
%ans = subplot(222);
 
if load_ref('%ans') then   bugmes();quit;end,
 
 
%ans = plot(t, sin(t)');
 
if load_ref('%ans') then   bugmes();quit;end,
 
 
%ans = xtitle('sin(t)'' versus t');
 
if load_ref('%ans') then   bugmes();quit;end,
 
 
%ans = subplot(223);
 
if load_ref('%ans') then   bugmes();quit;end,
 
 
%ans = plot(t', sin(t));
 
if load_ref('%ans') then   bugmes();quit;end,
 
 
a = gca();
 
a('data_bounds') = [0,-1;7,1];// to see the vertical line hiddden by the y axis
 
%ans = xtitle('sin(t) versus t''');
 
if load_ref('%ans') then   bugmes();quit;end,
 
 
%ans = subplot(224);
 
if load_ref('%ans') then   bugmes();quit;end,
 
 
%ans = plot(t', sin(t)');
 
if load_ref('%ans') then   bugmes();quit;end,
 
 
%ans = xtitle('sin(t)'' versus t''');
 
if load_ref('%ans') then   bugmes();quit;end,
 
 
 
clf_run();
 
 
//Special case 1
 
//x : vector ([5 6 7 8]) and y : matrix (t)
 
x = [5,6,7,8];
 
if load_ref('x') then   bugmes();quit;end,
 
 
plot(x, t);
 
plot(x', t);// idem, x is automatically transposed to match t (here the columns)
 
%ans = clf_run();
 
if load_ref('%ans') then   bugmes();quit;end,
 
 
 
// Only one matching possibility case : how to make 4 identical plots in 4 manners...
 
// x is 1x4 (vector) and y is 4x5 (non square matrix)
 
subplot(221);
 
plot(x, [t,[8;9;10;12]]');
 
subplot(222);
 
plot(x', [t,[8;9;10;12]]');
 
subplot(223);
 
plot(x, [t,[8;9;10;12]]');
 
subplot(224);
 
plot(x', [t,[8;9;10;12]]');
 
%ans = clf_run();
 
if load_ref('%ans') then   bugmes();quit;end,
 
 
 
 
//Special case 2
 
// Case where only x or y is a square matrix
 
//x : matrix (t) and y  : vector ([1 2 3 4])
 
%ans = plot(t, [1,2,3,4]);
 
if load_ref('%ans') then   bugmes();quit;end,
 
// equivalent to plot(t,[1 1 1 1;2 2 2 2;3 3 3 3;4 4 4 4])
 
%ans = plot(t, [1;2;3;4]);
 
if load_ref('%ans') then   bugmes();quit;end,
 
// the same plot
 
clf_run();
 
 
// t is transposed : notice the priority given to the columns treatment
 
%ans = plot(t', [1,2,3,4]);
 
if load_ref('%ans') then   bugmes();quit;end,
 
// equivalent to plot(t',[1 1 1 1;2 2 2 2;3 3 3 3;4 4 4 4])
 
%ans = plot(t', [1,2,3,4]');
 
if load_ref('%ans') then   bugmes();quit;end,
 
// the same plot
 
clf_run();
 
 
// y is a function defined by..
 
//0..a primitive
 
%ans = plot(1:0.1:10, sin);
 
if load_ref('%ans') then   bugmes();quit;end,
 
// equivalent to plot(1:0.1:10,sin(1:0.1:10))
 
clf_run();
 
 
//0..a macro:
 
%ans = deff('[y]=toto(x)', 'y=x.*x');
 
if load_ref('%ans') then   bugmes();quit;end,
 
 
%ans = plot(1:10, toto);
 
if load_ref('%ans') then   bugmes();quit;end,
 
 
 
xdel_run(winsid());
 
 
mclose(%U);
 
