<?xml version="1.0" encoding="ISO-8859-1"?>
<!--
 * Scilab ( http://www.scilab.org/ ) - This file is part of Scilab
 * Copyright (C) 2008 - INRIA
 * 
 * This file must be used under the terms of the CeCILL.
 * This source file is licensed as described in the file COPYING, which
 * you should have received as part of this distribution.  The terms
 * are also available at    
 * http://www.cecill.info/licences/Licence_CeCILL_V2-en.txt
 *
 -->
<refentry xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:svg="http://www.w3.org/2000/svg" xmlns:mml="http://www.w3.org/1998/Math/MathML" xmlns:db="http://docbook.org/ns/docbook" version="5.0-subset Scilab" xml:lang="en" xml:id="adj_lists">
  <info>
    <pubdate>$LastChangedDate$</pubdate>
  </info>
  <refnamediv>
    <refname>adj_lists</refname>
    <refpurpose> computes adjacency lists</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <title>Calling Sequence</title>
    <synopsis>[lp,la,ls] = adj_lists(g)
[lp,la,ls] = adj_lists(directed,n,tail,head)</synopsis>
  </refsynopsisdiv>
  <refsection>
    <title>Parameters</title>
    <variablelist>
      <varlistentry>
        <term>g</term>
        <listitem>
          <para>:a graph (see <link linkend="graph_data_structure">graph_data_structure</link>).</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>directed</term>
        <listitem>
          <para>integer, 0 (undirected graph) or 1 (directed  graph)</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>n</term>
        <listitem>
          <para>integer, the number of nodes of the graph</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>tail</term>
        <listitem>
          <para>the row vector of the numbers of the tail nodes of the
          graph (its size is the number of edges of the graph)</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>head</term>
        <listitem>
          <para>the row vector of the numbers of the head nodes of the
          graph (its size is the number of edges of the graph)</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>lp</term>
        <listitem>
          <para>row vector, pointer array of the adjacency lists
          description of the graph (its size is the number of nodes of
          the graph + 1)</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>la</term>
        <listitem>
          <para>row vector, arc array of the adjacency lists
          description of the graph (its size is the number of edges of
          the graph)</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>ls</term>
        <listitem>
          <para>row vector, node array of the adjacency lists
          description of the graph (its size is the number of edges of
          the graph)</para>
        </listitem>
      </varlistentry>
    </variablelist>
  </refsection>
  <refsection>
    <title>Description</title>
    <para><literal>adj_lists</literal> computes the row vectors of the
    adjacency lists description of the graph <literal>g</literal>.  It is
    also possible to give <literal>adj_lists</literal> the description of
    the graph given by the number of nodes <literal>n</literal> and the row
    vectors <literal>tail</literal> and <literal>head</literal>.</para>
    <para>For a node numbered <literal>k</literal>, the connected edges are
   given by <literal>la(lp(k):(lp(k+1)-1))</literal>, while the other bounds
   of these edges are connected to nodes ls((lp(k):(lp(k+1)-1))).</para>
  </refsection>
  <refsection>
    <title>Examples</title>
    <programlisting role="example"><![CDATA[

ta=[2 3 3 5 3 4 4 5 8];
he=[1 2 4 2 6 6 7 7 4];
g=make_graph('foo',1,8,ta,he);
g.nodes.graphics.x=[129 200 283 281 128 366 122 333];
g.nodes.graphics.y=[61 125 129 189 173 135 236 249];
g.nodes.graphics.display='number';
g.edges.graphics.display='number';


show_graph(g);
//directed graph
[lp,la,ls]=adj_lists(g)
[lp,la,ls]=adj_lists(1,g.nodes.number,ta,he)
for k=1:node_number(g)
  sel=lp(k):(lp(k+1)-1);
  g1=g;
  g1.nodes.graphics.colors(2,k)=color('red');
  g1.edges.graphics.foreground(la(sel))=color('green');
  g1.nodes.graphics.colors(1,ls(sel))=color('red');
  show_graph(g1);
  halt() 
end

//non directed graph
g.directed=0;
[lp,la,ls]=adj_lists(g);
for k=1:node_number(g)
  sel=lp(k):(lp(k+1)-1);
  g1=g;
  g1.nodes.graphics.colors(2,k)=color('red');
  g1.edges.graphics.foreground(la(sel))=color('green');
  g1.nodes.graphics.colors(1,ls(sel))=color('red');
  show_graph(g1);
  halt()
end

 
  ]]></programlisting>
  </refsection>
  <refsection>
    <title>See Also</title>
    <simplelist type="inline">
      <member>
        <link linkend="chain_struct">chain_struct</link>
      </member>
      <member>
        <link linkend="graph_2_mat">graph_2_mat</link>
      </member>
    </simplelist>
  </refsection>
</refentry>
