<?xml version="1.0" encoding="ISO-8859-1"?>
<!--
 * Scilab ( http://www.scilab.org/ ) - This file is part of Scilab
 * Copyright (C) 2008 - INRIA
 * 
 * This file must be used under the terms of the CeCILL.
 * This source file is licensed as described in the file COPYING, which
 * you should have received as part of this distribution.  The terms
 * are also available at    
 * http://www.cecill.info/licences/Licence_CeCILL_V2-en.txt
 *
 -->
<refentry xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:svg="http://www.w3.org/2000/svg" xmlns:mml="http://www.w3.org/1998/Math/MathML" xmlns:db="http://docbook.org/ns/docbook" version="5.0-subset Scilab" xml:lang="en" xml:id="cycle_basis">
  <info>
    <pubdate>$LastChangedDate$</pubdate>
  </info>
  <refnamediv>
    <refname>cycle_basis</refname>
    <refpurpose> basis of cycle of a simple undirected graph</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <title>Calling Sequence</title>
    <synopsis>spc = cycle_basis(g)
cycles_list = cycle_basis(g,'list')</synopsis>
  </refsynopsisdiv>
  <refsection>
    <title>Parameters</title>
    <variablelist>
      <varlistentry>
        <term>g</term>
        <listitem>
          <para> a <link linkend="graph_data_structure">graph_data_structure</link>.</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>spc</term>
        <listitem>
          <para>a sparse matrix with <literal>edge_number(g)</literal> columns</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>cycles_list</term>
        <listitem>
          <para>a list.</para>
        </listitem>
      </varlistentry>
    </variablelist>
  </refsection>
  <refsection>
    <title>Description</title>
    <para>
    First a spanning tree is found by using <link linkend="min_weight_tree">min_weight_tree</link> and then used to 
    find all fundamental cycles with respect to this tree. They are returned as a 
    set of cycles, each cycle being represented by a set of edges.
    </para>
    <para> The graph <literal>g</literal> is supposed to be a simple undirected and connected graph
    (<literal>cycle_basis</literal> does not check that the graph is simple, use 
    <literal>graph_simp</literal> before calling it if necessary).</para>
    <para><literal>spc = cycle_basis(g)</literal> returns these cycles in the
    sparse matrix <literal>spc</literal>: each row of this matrix
    corresponds to a cycle.</para>
    <para><literal>cycles_list = cycle_basis(g,'list')</literal> returns these
    cycles in the list <literal>cycles_list</literal>: each entry of this
    list is the row vector of the cycle edges index.</para>
  </refsection>
  <refsection>
    <title>Examples</title>
    <programlisting role="example"><![CDATA[
    
//create a directed graph
ta=[1 1 2 2 2 3 4 5 5 7 8 8 9 10 10 10 10 10 11 12 13 13 13 14 15 16 16 17 17];
he=[2 10 3 5 7 4 2 4 6 8 6 9 7 7 11 13 13 15 12 13 9 10 14 11 16 1 17 14 15];
gt=make_graph('foo',1,17,ta,he);
gt.nodes.graphics.x=[283 163 63 57 164 164 273 271 339 384 504 513 439 623 631 757 642]/2;
gt.nodes.graphics.y=[59 133 223 318 227 319 221 324 432 141 209 319 428 443 187 151 301]/2;
show_graph(gt);

//Make simple and undirected
g=graph_simp(gt);
show_graph(g,'new');

//Compute the cycle basis
cycles_list=cycle_basis(g,'list');

//Display the cycles
for c=cycles_list,hilite_edges(c);xpause(1d6),unhilite_edges(c);end;
   ]]></programlisting>
  </refsection>
  <refsection>
    <title>See Also</title>
    <simplelist type="inline">
      <member>
        <link linkend="min_weight_tree">min_weight_tree</link>
      </member>
      <member>
        <link linkend="graph_simp">graph_simp</link>
      </member>
    </simplelist>
  </refsection>
</refentry>
