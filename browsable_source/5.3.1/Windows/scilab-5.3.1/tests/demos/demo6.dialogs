//x_choose:  Click to choose a demo
  6//Optimization
//x_choose:  Choose a demo
  1//LMITOOL
//x_choose:  This is a sample of LMI problems that LMITOOL can solve
  1//H-infinity gain
//x_dialog:The problem is here:
  function [X,c]=normopt(A,B,C,D)
  /// Generated by lmitool on 
    Mbound = 1e3;
    abstol = 1e-10;
    nu = 10;
    maxiters = 100;
    reltol = 1e-10;
    options=[Mbound,abstol,nu,maxiters,reltol];
  ///////////INITIAL GUESS
  X_init=eye(A);Ib=eye(B'*B);Ic=eye(C*C');c_init=10;              
  /////////// 
  XLIST0=list(X_init,c_init)
  XLIST=lmisolver(XLIST0,normopt_eval,options)
  [X,c]=XLIST(:)
  endfunction   
  /////////////////EVALUATION FUNCTION////////////////////////////
   
  function [LME,LMI,OBJ]=normopt_eval(XLIST)
  [X,c]=XLIST(:)
   
  /////////////////LME, LMI and OBJ
  LME=X'-X                                                        
  LMI=-[A*X+X*A', B, X*C';                                        
  B', -gama*Ib, D';                                               
  C*X, D, -gama*Ic]                                               
  OBJ=gama                                                        
  endfunction                                                                  
o //OK
//x_mdialog: Enter A, B, C, D matrices
  [0,1,0;2,3,1;-1,-2,0]
  [1,0;-2,1;0,1]
  [1,2,0;0,1,-2]
  [0,0;0,0]
o //OK

//x_choose:  This is a sample of LMI problems that LMITOOL can solve
  2//Output Feedback
//x_dialog:The problem is here:
  function [P,Q]=of(A,B,C)
  /// Generated by lmitool on 
    
    Mbound = 1e3;
    abstol = 1e-10;
    nu = 10;
    maxiters = 100;
    reltol = 1e-10;
    options=[Mbound,abstol,nu,maxiters,reltol];
     
    ///////////INITIAL GUESS
    P_init=zeros(A)                                                   
    Q_init=zeros(A)                                                   
    NB=kernel(B');                                                    
    NC=kernel(C);                                                     
    I=eye(A);                                                         
    /////////// 
   
    XLIST0=list(P_init,Q_init)
    XLIST=lmisolver(XLIST0,of_eval,options)
    [P,Q]=XLIST(:)
  endfunction	

  /////////////////EVALUATION FUNCTION////////////////////////////
   
  function [LME,LMI,OBJ]=of_eval(XLIST)
  [P,Q]=XLIST(:)
  /////////////////LME, LMI and OBJ
  LME=list(P-P',Q-Q')                                               
  LMI= list(-NB'*(A*Q+Q*A'+Q)*NB,-NC'*(A'*P+P*A+P)*NC,[P I; I Q]);  
  OBJ=trace(P+Q);                                                   
  endfunction	                                                                  
o //OK
//x_mdialog: Edit below A, B, C matrices
  [0,1,0;2,3,1;-1,-2,0]
  [1,0;-2,1;0,1]
  [1,2,0;0,1,-2]
o //OK
//x_choose:  This is a sample of LMI problems that LMITOOL can solve
  3//Sylvester equation
//x_dialog:The problem is here:
  function [X]=sylvester(A,B,C,flag)
  /// Generated by lmitool on 
    Mbound = 1e3;
    abstol = 1e-10;
    nu = 10;
    maxiters = 100;
    reltol = 1e-10;
    options=[Mbound,abstol,nu,maxiters,reltol];
    ///////////INITIAL GUESS
    [na,ma]=size(A);[nb,mb]=size(B)                                   
    if ma<>na|mb<>nb then error("invalid dimensions");end             
    X_init=zeros(ma,nb)                                               
    /////////// 
    XLIST0=list(X_init)
    XLIST=lmisolver(XLIST0,sylvester_eval,options)
    [X]=XLIST(:)
  endfunction		 
  /////////////////EVALUATION FUNCTION////////////////////////////
  function [LME,LMI,OBJ]=sylvester_eval(XLIST)
  [X]=XLIST(:)
  /////////////////LME, LMI and OBJ
  if flag=='c' then LME=A*X+X*B-C                                   
  else LME=A*X*B-C                                                  
  end                                                               
  LMI=[]                                                            
  OBJ=[]                                                            
  endfunction	                                                                 
o //OK
//x_mdialog: Edit below A, B, C matrices
  [0,1,0;2,3,1;-1,-2,0]
  [1,0;-2,1]
  [1,2;0,1;1,-2]
  o //OK
//x_choose:  This is a sample of LMI problems that LMITOOL can solve
  0// Cancel
//x_choose:  Choose a demo
  2//Multiflow problem
//x_choose:  Choose a demo
  3//Non linear data fitting
//x_choose:  Choose a demo
  0// Cancel
//x_choose:  Click to choose a demo
  0// Cancel
