%!PS-Adobe-2.0 EPSF-2.0
%%BoundingBox:  0 0 300 212
%%
%%Scilab Postscript File (1995-1997 J.Ph Chancelier)
%%EndComments
/saved save def 
/$pictdict 100 dict def
$pictdict begin

/dogrey
{ /Arraybox exch def
	/Arraygrey exch def
	/nargs exch def 
	/func exch cvx def
	Arraybox 0 nargs getinterval Arraygrey 0 get func 
	1 1 Arraygrey length 1 sub 
	{/i exch def
	Arraybox i nargs mul nargs getinterval 
	Arraygrey i get func
	}for
} def
%--------------------------------------------
% [x y width height] nivgris drawbox 
% si niv gris > 1.0 alors on fait un stroke 
% sans closepath 
%--------------------------------------------

/drawpoly
	{/glev exch def /Ar exch def
	newpath
	Ar 0 get Ar 1 get moveto 
	2 2 Ar length 1 sub 
	{/i exch def
	Ar i get Ar i 1 add get absolu {lineto} {rlineto} ifelse
	}for
	glev -1 le 
	{ % filling the polygon with current pattern ( gray or color)
	  closepath gsave glev neg 1 sub WhiteLev 2 add lmin 0 lmax Setgray eofill grestore }
	{ glev 1 ge 
	   { % drawing the polygon with current dash style or color 
	     % XXXXX : a voir c'est pas clair il faudrait sauver 
	     % and filling it with other color (glev) 
	     closepath gsave glev 1 sub WhiteLev 2 add lmin 0 lmax Setgray 
		 eofill grestore stroke }
	   {% drawing the polygon with current style 
	    closeflag {closepath} if stroke} 
	ifelse }
	ifelse 
} def 


/drawbox 
	{/glev exch def /Ar exch def 
	/x Ar 0 get def /y Ar 1 get def 
	/w Ar 2 get def /h Ar 3 get def 
	newpath
	x y moveto
	x w add y lineto
	x w add y h add lineto
	x y h add lineto
	glev 1 ge 
	{ % filling 
	 closepath gsave glev 1 sub WhiteLev 2 add lmin 0 lmax Setgray eofill 
		grestore}
	{ 
	  % drawing 
	  glev -1 le 
	  {
    	  closepath gsave glev neg 1 sub WhiteLev 2 add lmin 0 lmax Setgray
		 stroke grestore  }
	  { closepath stroke} ifelse 
	} ifelse
} def 

%--------------------------------------------
% [x y width height] clearzone
%--------------------------------------------
/clearzone
        {/Ar exch def
        /x Ar 0 get def /y Ar 1 get def
        /w Ar 2 get def /h Ar 3 get def
        newpath
        x y moveto
        x w add y lineto
        x w add y h add lineto
        x y h add lineto
	closepath WhiteLev Setgray eofill
} def

%------------------------------------------------------
% polyline stroke or polygon fill or both 
%------------------------------------------------------
/absolu true def 
/closeflag false def 

/lmin { /y exch def /x exch def x y le { x  } {  y  } ifelse } def
/lmax { /y exch def /x exch def x y le { y } {  x } ifelse } def 


/drawpoly
	{/glev exch def /Ar exch def
	newpath
	Ar 0 get Ar 1 get moveto 
	2 2 Ar length 1 sub 
	{/i exch def
	Ar i get Ar i 1 add get absolu {lineto} {rlineto} ifelse
	}for
	glev -1 le 
	{ % filling the polygon with current pattern ( gray or color)
	  closepath gsave glev neg 1 sub WhiteLev 2 add lmin 0 lmax Setgray eofill grestore }
	{ glev 1 ge 
	   { % drawing the polygon with current dash style or color 
	     % XXXXX : a voir c'est pas clair il faudrait sauver 
	     % and filling it with other color (glev) 
	     closepath gsave glev 1 sub WhiteLev 2 add lmin 0 lmax Setgray 
		 eofill grestore stroke }
	   {% drawing the polygon with current style 
	    closeflag {closepath} if stroke} 
	ifelse }
	ifelse 
} def 

%------------------------------------------------------
% segments non connectes 
%------------------------------------------------------

/drawsegs
	{/glev exch def /Ar exch def
	newpath
	Ar 0 get Ar 1 get moveto Ar 2 get Ar 3 get lineto 
	gsave glev Setgray stroke grestore
	4 4 Ar length 3 sub 
	{/i exch def
	newpath 
	Ar i get Ar i 1 add get moveto
	Ar i 2 add get Ar i 3 add get lineto 
	gsave glev Setgray stroke grestore
	}for
} def 


%------------------------------------------------------
% unconected arrows
%-----------------------------------------------------

/drawarrows
	{/arsize10 exch def /Ar exch def
	Ar 0 get  Ar 1 get Ar 2 get Ar 3 get arsize10 drawarrow
	4 4 Ar length 3 sub 
	{/i exch def
	Ar i get Ar i 1 add get  Ar i 2 add get  Ar i 3 add get arsize10 
	drawarrow
	}for
} def 
		
/cos20 20 cos def
/sin20 20 sin def

/drawarrow                                
  { 
      /arsize exch 10 div def 
      /tipy exch def /tipx exch def       
      /taily exch def /tailx exch def
      /dx tipx tailx sub  def               
      /dy tipy taily sub  def               
      newpath tipx tipy moveto tailx taily lineto stroke   
      /norme dx dx mul dy dy mul add sqrt def 
      norme 1.e-8 ge 
	{
	 arsize dx mul norme div /dx1 exch def 
	 arsize dy mul norme div /dy1 exch def 
	 /depx tipx cos20 dx1 mul add def 
	/depy  tipy cos20 dy1 mul add def 
	newpath depx depy moveto 
	cos20 neg dx1 mul sin20 dy1 mul sub depx add
	sin20 dx1  mul cos20 dy1 mul sub depy add lineto 
	cos20 neg dx1 mul sin20 dy1 mul add  depx add
	sin20 neg dx1 mul cos20 dy1 mul sub depy add lineto closepath 
	fill
	} {} ifelse 
  } def


%------------------------------------------------------
% cercle ou portions de cercle 
% attention argument (x y w h angl1*64 angl2*64 )
% devrait tracer une ellipse a modifier donc 
%------------------------------------------------------

/fillarc
	{/glev exch def /Ar exch def
	/cx Ar 0 get Ar 2 get 2 div add def 
	/cy Ar 1 get Ar 3 get 2 div add def 
	/hom Ar 3 get Ar 2 get div def 
	/Cmsave1 matrix def Cmsave1 currentmatrix pop
	%-- on change de transformation pour faire homothetie en (x,y) 
	cx cy [1 0 0 hom 0 0 ] transform
	/t1 exch neg cy add def 
	/t2 exch neg cx add def 
	[1 0 0 hom t2 t1 ] concat 
	glev WhiteLev le
	{ % filling 
	newpath
	cx cy moveto 
	cx cy Ar 2 get 2 div Ar 5 get 64 div neg
	 Ar 4 get 64 div neg  arc closepath
	gsave glev Setgray eofill grestore}
	{
	%drawing with current dash or color unclosed path 
	newpath
	cx cy Ar 2 get 2 div Ar 5 get 64 div neg Ar 4 get 64 div neg arc
	  stroke} ifelse 
	Cmsave1 setmatrix } def 

/drawarc
	{/glev exch def /Ar exch def
	/cx Ar 0 get Ar 2 get 2 div add def 
	/cy Ar 1 get Ar 3 get 2 div add def 
	/hom Ar 3 get Ar 2 get div def 
	/Cmsave1 matrix def Cmsave1 currentmatrix pop
	%-- on change de transformation pour faire homothetie en (x,y) 
	cx cy [1 0 0 hom 0 0 ] transform
	/t1 exch neg cy add def 
	/t2 exch neg cx add def 
	[1 0 0 hom t2 t1 ] concat 
	newpath
	cx cy Ar 2 get 2 div Ar 5 get 64 div neg Ar 4 get 64 div neg arc
	closepath glev Setgray stroke
	Cmsave1 setmatrix } def 

%------------------------------------------------------
% centred hard mark 
%------------------------------------------------------

% x y str ShowCString 
% on fait un show mais string est centre autour du point (x,y) 

/ShowCString { /str exch def /y exch def /x exch def 
 newpath 
 x y moveto 
 str true charpath flattenpath pathbbox 
 /y2 exch def /x2 exch def /y1 exch def /x1 exch def 
 x 2 mul x2 x1 add 2 div sub 
 y 2 mul y2 y1 add 2 div sub moveto str show 
 } def 

/drawpolymark {/glev exch def /Ar exch def 
	Ar 0 get Ar 1 get HardMark ShowCString 
	2 2 Ar length 1 sub 
	{/i exch def
	Ar i get Ar i 1 add get HardMark ShowCString
	}for
} def 

%---------------------------------------------------
% chaines de caracteres 
%---------------------------------------------------
/FBox {/Ar exch def /rot exch def /str exch def /y exch def /x exch def 
 newpath Ar 0 get Ar 1 get moveto 
	/sina rot sin def /cosa rot cos def 
	/-sina sina neg def 
	[cosa -sina sina cosa 0 0 ] CtmModif
 Ar 2 get 0 rlineto 0 Ar 3 get neg rlineto Ar 2 get neg 0 rlineto 
 0 Ar 3 get  rlineto  stroke CtmRestore 
 x y str rot ShowRotate 
 } def 

% x y str ang Showrotate 
% inverse du sens trigo 

/ShowRotate { /ang exch def /str exch def 
	/y exch def /x exch def 
	x y moveto 
	/sina ang sin def /cosa ang cos def 
	/-sina 0 sina sub def 
	[cosa -sina sina cosa 0 0 ] CtmModif
	str show 
	CtmRestore 
} def 

/HardMark (0) def 

%(Chaine de caracteres) x y flag angle [arfbox] Show

/Show { /Ar exch def 
	/rot exch def /flag exch def /y exch def /x exch def /str exch def 
	flag 1 eq 
	{x y str rot Ar FBox}
	{x y str rot ShowRotate } ifelse} def 

/L {/y2 exch def /x2 exch def /y1 exch def /x1 exch def 
    newpath x1 y1 moveto x2 y2 lineto stroke } def 

%---------------------------------------------------------
% drawing an axis 
% angle [nsep1,nsep2] ,[siz1,siz2,coeff] [x0,y0] drawaxis",
%---------------------------------------------------------

/drawaxis {/XX exch def /Arsize exch def /Arsep exch def /ang exch def 
	/Cmsave1 matrix def Cmsave1 currentmatrix pop
	/sina ang sin def /cosa ang cos def /-sina sina neg def 
	/x XX 0 get def /y XX 1 get def
	%-- on change de transformation pour tourner autour de (x,y) 
	x y [cosa sina -sina cosa 0 0 ] transform
	/t1 exch neg y add def 
	/t2 exch neg x add def 
	[cosa sina -sina cosa t2 t1 ] concat 
	newpath x y moveto 0 Arsize 1 get Arsize 2 get mul rlineto
	stroke 
	0 1 Arsep 1 get 1 sub
	{
	 % i don't want the value of the for indice 
	 pop
	newpath 
	x y moveto 
	0 1 Arsep 0 get 1 sub
		{
		 % i don't want the value of the for indice 
		 pop
		 Arsize 0 get 0  rlineto
		 0 Arsize 1 get rlineto 
	 	0 Arsize 1 get  neg rlineto }
		for 
	currentpoint /y exch def /x exch def 
	stroke 
	newpath x y moveto 0 Arsize 1 get Arsize 2 get mul rlineto
	stroke }
	for 
	Cmsave1 setmatrix } def 

%---------------------------------------------------------
% change and restore CTM
%---------------------------------------------------------

/CtmModif {
	/arg exch def 
	/Cmsave matrix def 
	Cmsave currentmatrix pop
	[1 0 0 -1 0 0 ] concat 
	arg concat 
} def 

/CtmRestore { Cmsave setmatrix } def 

/Thickness { /th exch def th 0 le {/th 0.1 def} if th setlinewidth} def 

/WhiteLev 15 def

/Setgray { WhiteLev div setgray} def 

/fillsolid { 0 setgray } def 

%--------------------------------------
% clip zones ( rectangle ) 
%-------------------------------------

/setclipzone {initclip 
	/h exch def /w exch def /y exch def /x exch def 
	newpath x y moveto w 0 rlineto 0 h rlineto w neg 0 rlineto 
	0 h neg rlineto closepath clip} def 

%------------------
% to change the position of a picture 
%------------------
/cm{28.346457 mul}def

/DesPosi { /YH exch def /XW exch def /YP exch def /XP exch def 
	XP cm YP cm neg translate 
	XW cm 6000 div YH cm 4240 div  scale } def 

0 setlinecap 
2 setlinejoin 
1 setlinewidth

%-- Color database 
/ColorR [0.000000 0.000000 0.000000 0.529412 0.498039 0.133333 0.000000 0.878431 0.000000 1.000000 1.000000 1.000000 0.933333 1.000000 1.000000 0.960784 1.000000 ] def
/ColorG [0.000000 0.000000 0.000000 0.807843 1.000000 0.545098 1.000000 1.000000 1.000000 0.647059 0.000000 0.000000 0.509804 1.000000 0.843137 0.960784 1.000000 ] def
/ColorB [0.000000 0.501961 1.000000 0.921569 0.831373 0.133333 0.000000 1.000000 1.000000 0.000000 0.000000 1.000000 0.933333 0.000000 0.000000 0.862745 1.000000 ] def

/Setcolor {/i exch def ColorR i get ColorG i get ColorB i get setrgbcolor } def

% to multiply all the fontsizes by a factor  scf
/scf 1.0 def

%------ End Main Program ------%
% XP YP XW YW DesPosi in the following code 
% will output the picture in the rectangle defined by 
% upper left point (XP,YP) wide :XW Height: YW
% the coordinates are given in centimeter and 
% are the (0,0) point is the down-left point of the paper 


/ColorR [0.000000 
0.000000 0.000000 0.000000 1.000000 1.000000 1.000000 1.000000 0.000000 0.000000 0.000000 
0.529412 0.000000 0.000000 0.000000 0.000000 0.000000 0.000000 0.564706 0.690196 0.815686 
0.564706 0.690196 0.815686 0.501961 0.627451 0.752941 1.000000 1.000000 1.000000 1.000000 
1.000000 0.0 1.0] def
/ColorG [0.000000 
0.000000 1.000000 1.000000 0.000000 0.000000 0.000000 1.000000 0.000000 0.000000 0.000000 
0.807843 0.564706 0.690196 0.815686 0.564706 0.690196 0.815686 0.000000 0.000000 0.000000 
0.000000 0.000000 0.000000 0.188235 0.250980 0.376471 0.501961 0.627451 0.752941 0.878431 
0.843137 0.0 1.0] def
/ColorB [0.000000 
1.000000 0.000000 1.000000 0.000000 1.000000 0.000000 1.000000 0.564706 0.690196 0.815686 
1.000000 0.000000 0.000000 0.000000 0.564706 0.690196 0.815686 0.000000 0.000000 0.000000 
0.564706 0.690196 0.815686 0.000000 0.000000 0.000000 0.501961 0.627451 0.752941 0.878431 
0.000000 0.0 1.0] def
% Dessin en bas a gauche de taille 3000,2120
[0.5 10 div 0 0 0.5 10 div neg  0 2120 10 div] concat
% Init driver 
5 Thickness
% 3 setalufunction
-1 -1 200000 200000 setclipzone
0 Setcolor
/Times-Roman findfont 100 scf mul scalefont setfont
fillsolid
[] 0 setdash
0 Setcolor
%--use color 1 
fillsolid
[] 0 setdash
0 Setcolor
/WhiteLev 31 def
/Setgray {/i exch def ColorR i get ColorG i get ColorB i get setrgbcolor } def 
/Setcolor {/i exch def ColorR i get ColorG i get ColorB i get setrgbcolor } def 
%--end use color 1 
% End init driver 
/WhiteLev 31 def
0 Setcolor
 (drawbox) 4 [ 0]
[750 530 4500 3180 
] dogrey 
0 Setcolor
 0 [2 5] [450.000000 30.000000 2.000000] [750 3710] drawaxis
(0) 722 3902 0  0.00 [722 3812 57 120] Show
(100) 1564 3902 0  0.00 [1564 3812 172 120] Show
(200) 2464 3902 0  0.00 [2464 3812 172 120] Show
(300) 3364 3902 0  0.00 [3364 3812 172 120] Show
(400) 4264 3902 0  0.00 [4264 3812 172 120] Show
(500) 5164 3902 0  0.00 [5164 3812 172 120] Show
 -90 [2 10] [159.000000 -31.800000 2.000000] [750 3710] drawaxis
(0) 617 3740 0  0.00 [617 3650 57 120] Show
(20) 560 3422 0  0.00 [560 3332 114 120] Show
(40) 560 3104 0  0.00 [560 3014 114 120] Show
(60) 560 2786 0  0.00 [560 2696 114 120] Show
(80) 560 2468 0  0.00 [560 2378 114 120] Show
(100) 502 2150 0  0.00 [502 2060 172 120] Show
(120) 502 1832 0  0.00 [502 1742 172 120] Show
(140) 502 1514 0  0.00 [502 1424 172 120] Show
(160) 502 1196 0  0.00 [502 1106 172 120] Show
(180) 502 878 0  0.00 [502 788 172 120] Show
(200) 502 560 0  0.00 [502 470 172 120] Show
0 Setcolor
750 530 4500 3180 setclipzone
0 Setcolor
/closeflag false def
 (drawpoly) 432 [ 0]
[759 649 768 707 777 829 786 955 795 1082 804 1212 813 1343 822 1477 831 1612 840 1749 
849 1888 858 2027 867 2167 876 2307 885 2446 894 2583 903 2717 912 2848 921 2974 930 3094 
939 3207 948 3313 957 3411 966 3500 975 3579 984 3649 993 3701 1002 3705 1011 3670 1020 3632 
1029 3605 1038 3585 1047 3572 1056 3566 1065 3566 1074 3570 1083 3577 1092 3588 1101 3600 1110 3614 
1119 3628 1128 3642 1137 3655 1146 3668 1155 3679 1164 3689 1173 3697 1182 3704 1191 3710 1200 3706 
1209 3703 1218 3701 1227 3700 1236 3700 1245 3701 1254 3702 1263 3703 1272 3704 1281 3706 1290 3707 
1299 3708 1308 3709 1317 3709 1326 3710 1335 3710 1344 3709 1353 3709 1362 3709 1371 3709 1380 3709 
1389 3709 1398 3709 1407 3709 1416 3709 1425 3710 1434 3710 1443 3710 1452 3710 1461 3710 1470 3710 
1479 3710 1488 3710 1497 3710 1506 3710 1515 3710 1524 3710 1533 3710 1542 3709 1551 3709 1560 3710 
1569 3710 1578 3710 1587 3710 1596 3710 1605 3710 1614 3709 1623 3709 1632 3709 1641 3709 1650 3709 
1659 3709 1668 3709 1677 3709 1686 3709 1695 3710 1704 3710 1713 3710 1722 3709 1731 3709 1740 3709 
1749 3709 1758 3709 1767 3709 1776 3709 1785 3709 1794 3709 1803 3710 1812 3710 1821 3710 1830 3710 
1839 3710 1848 3710 1857 3710 1866 3710 1875 3710 1884 3710 1893 3710 1902 3710 1911 3710 1920 3710 
1929 3710 1938 3710 1947 3710 1956 3710 1965 3710 1974 3710 1983 3710 1992 3710 2001 3710 2010 3710 
2019 3710 2028 3710 2037 3710 2046 3710 2055 3710 2064 3710 2073 3710 2082 3710 2091 3709 2100 3709 
2109 3709 2118 3709 2127 3709 2136 3709 2145 3710 2154 3710 2163 3710 2172 3710 2181 3709 2190 3709 
2199 3709 2208 3709 2217 3709 2226 3709 2235 3709 2244 3709 2253 3710 2262 3710 2271 3710 2280 3710 
2289 3710 2298 3710 2307 3710 2316 3710 2325 3710 2334 3710 2343 3710 2352 3710 2361 3710 2370 3710 
2379 3710 2388 3710 2397 3710 2406 3710 2415 3710 2424 3710 2433 3710 2442 3710 2451 3710 2460 3710 
2469 3710 2478 3710 2487 3710 2496 3710 2505 3710 2514 3710 2523 3710 2532 3710 2541 3710 2550 3710 
2559 3710 2568 3709 2577 3710 2586 3710 2595 3710 2604 3710 2613 3710 2622 3710 2631 3710 2640 3709 
2649 3709 2658 3709 2667 3709 2676 3709 2685 3709 2694 3709 
] dogrey 
 (drawpoly) 418 [0]
[2703 3709 2712 3710 2721 3710 2730 3710 2739 3710 2748 3710 2757 3710 2766 3710 2775 3709 2784 3710 
2793 3710 2802 3710 2811 3710 2820 3710 2829 3710 2838 3710 2847 3710 2856 3710 2865 3710 2874 3710 
2883 3710 2892 3710 2901 3710 2910 3710 2919 3710 2928 3710 2937 3710 2946 3710 2955 3710 2964 3710 
2973 3710 2982 3710 2991 3710 3000 3710 3009 3710 3018 3710 3027 3710 3036 3710 3045 3710 3054 3710 
3063 3710 3072 3710 3081 3710 3090 3710 3099 3709 3108 3709 3117 3709 3126 3709 3135 3709 3144 3709 
3153 3709 3162 3709 3171 3710 3180 3710 3189 3710 3198 3710 3207 3709 3216 3709 3225 3709 3234 3709 
3243 3709 3252 3709 3261 3710 3270 3710 3279 3710 3288 3710 3297 3710 3306 3710 3315 3710 3324 3710 
3333 3710 3342 3710 3351 3710 3360 3710 3369 3710 3378 3710 3387 3710 3396 3710 3405 3710 3414 3710 
3423 3710 3432 3710 3441 3710 3450 3710 3459 3710 3468 3710 3477 3710 3486 3710 3495 3710 3504 3710 
3513 3710 3522 3710 3531 3710 3540 3710 3549 3709 3558 3709 3567 3709 3576 3709 3585 3709 3594 3709 
3603 3709 3612 3709 3621 3709 3630 3710 3639 3710 3648 3710 3657 3709 3666 3709 3675 3709 3684 3709 
3693 3709 3702 3709 3711 3709 3720 3709 3729 3709 3738 3710 3747 3710 3756 3710 3765 3710 3774 3710 
3783 3710 3792 3709 3801 3709 3810 3710 3819 3710 3828 3710 3837 3710 3846 3710 3855 3710 3864 3710 
3873 3710 3882 3710 3891 3710 3900 3710 3909 3710 3918 3710 3927 3709 3936 3709 3945 3709 3954 3709 
3963 3709 3972 3709 3981 3709 3990 3709 3999 3709 4008 3710 4017 3710 4026 3709 4035 3709 4044 3708 
4053 3707 4062 3706 4071 3704 4080 3703 4089 3702 4098 3701 4107 3700 4116 3700 4125 3701 4134 3703 
4143 3706 4152 3710 4161 3704 4170 3697 4179 3689 4188 3679 4197 3668 4206 3655 4215 3642 4224 3628 
4233 3614 4242 3600 4251 3588 4260 3577 4269 3570 4278 3566 4287 3566 4296 3572 4305 3585 4314 3605 
4323 3632 4332 3670 4341 3705 4350 3701 4359 3649 4368 3579 4377 3500 4386 3411 4395 3313 4404 3207 
4413 3094 4422 2974 4431 2848 4440 2717 4449 2583 4458 2446 4467 2307 4476 2167 4485 2027 4494 1888 
4503 1749 4512 1612 4521 1477 4530 1343 4539 1212 4548 1082 4557 955 4566 829 4575 707 
] dogrey 
0 Setcolor
/absolu true def
0 Setcolor
-1 -1 200000 200000 setclipzone
 showpage

 end saved restore 

