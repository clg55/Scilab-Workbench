<?xml version="1.0" encoding="ISO-8859-1" standalone="no"?> 
<!DOCTYPE MAN SYSTEM "../../man.dtd">
<MAN>
  <LANGUAGE>fr</LANGUAGE>
  <TITLE>nlev  </TITLE>
  <TYPE>Scilab Function  </TYPE>
  <DATE>April 1993  </DATE>
  <SHORT_DESCRIPTION name="nlev"> Algorithme de Leverrier   </SHORT_DESCRIPTION>
  <CALLING_SEQUENCE>
  <CALLING_SEQUENCE_ITEM>[num,den]=nlev(A,z [,rmax])    </CALLING_SEQUENCE_ITEM>
  </CALLING_SEQUENCE>
  <PARAM>
 <PARAM_INDENT>
  <PARAM_ITEM>
  <PARAM_NAME>A  </PARAM_NAME>
  <PARAM_DESCRIPTION>
    : matrice réelle carrée
  </PARAM_DESCRIPTION> 
  </PARAM_ITEM>
  <PARAM_ITEM>
  <PARAM_NAME>z  </PARAM_NAME>
  <PARAM_DESCRIPTION>
    : chaîne de caractères
  </PARAM_DESCRIPTION> 
  </PARAM_ITEM>
  <PARAM_ITEM>
  <PARAM_NAME>rmax  </PARAM_NAME>
  <PARAM_DESCRIPTION>
    : paramètre optionnel (voir <VERB>bdiag</VERB>) 
  </PARAM_DESCRIPTION> 
  </PARAM_ITEM>
 </PARAM_INDENT>
  </PARAM>
  <DESCRIPTION>
  <P>
    calcule 
  </P>
  <P>
    par bloc diagonalisation de A suivie de l&apos;algorithme de Leverrier sur chaque bloc.
  </P>
  </DESCRIPTION>
  <ITEMIZE label='REMARQUE'>
  <P>
    Cet algorithme est plus efficace que l&apos;algorithme de Leverrier seul, mais il n&apos;est toujours pas parfait !
  </P>
  </ITEMIZE>
  <EXAMPLE><![CDATA[
A=rand(3,3);x=poly(0,'x');
[NUM,den]=nlev(A,'x')
clean(den-poly(A,'x'))
clean(NUM/den-inv(x*eye()-A))
 ]]></EXAMPLE>
  <SEE_ALSO>
    <SEE_ALSO_ITEM> <LINK>coff</LINK> </SEE_ALSO_ITEM>     <SEE_ALSO_ITEM> <LINK>coffg</LINK> </SEE_ALSO_ITEM>     <SEE_ALSO_ITEM> <LINK>glever</LINK> </SEE_ALSO_ITEM>     <SEE_ALSO_ITEM> <LINK>ss2tf</LINK> </SEE_ALSO_ITEM>
  </SEE_ALSO>
  <AUTHOR>F. D., S. S.;   </AUTHOR>
</MAN>
