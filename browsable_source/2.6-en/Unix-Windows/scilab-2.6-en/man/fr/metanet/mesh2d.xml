<?xml version="1.0" encoding="ISO-8859-1" standalone="no"?> 
<!DOCTYPE MAN SYSTEM "../../man.dtd">
<MAN>
  <LANGUAGE>fr</LANGUAGE>
  <TITLE>mesh2d  </TITLE>
  <TYPE>Scilab function  </TYPE>
  <DATE>September 1996  </DATE>
  <SHORT_DESCRIPTION name="mesh2d"> triangulation de n points dans le plan  </SHORT_DESCRIPTION>
  <CALLING_SEQUENCE>
  <CALLING_SEQUENCE_ITEM>[nutr,A] = mesh2d(x,y,[front])  </CALLING_SEQUENCE_ITEM>
  </CALLING_SEQUENCE>
  <PARAM>
 <PARAM_INDENT>
  <PARAM_ITEM>
  <PARAM_NAME>x  </PARAM_NAME>
  <PARAM_DESCRIPTION>
    : vecteur ligne réel
  </PARAM_DESCRIPTION> 
  </PARAM_ITEM>
  <PARAM_ITEM>
  <PARAM_NAME>y  </PARAM_NAME>
  <PARAM_DESCRIPTION>
    : vecteur ligne réel
  </PARAM_DESCRIPTION> 
  </PARAM_ITEM>
  <PARAM_ITEM>
  <PARAM_NAME>front  </PARAM_NAME>
  <PARAM_DESCRIPTION>
    : vecteur ligne entier
  </PARAM_DESCRIPTION> 
  </PARAM_ITEM>
  <PARAM_ITEM>
  <PARAM_NAME>nutr  </PARAM_NAME>
  <PARAM_DESCRIPTION>
    : matrice d&apos;entiers
  </PARAM_DESCRIPTION> 
  </PARAM_ITEM>
  <PARAM_ITEM>
  <PARAM_NAME>A  </PARAM_NAME>
  <PARAM_DESCRIPTION>
    : matrice creuse 0-1
  </PARAM_DESCRIPTION> 
  </PARAM_ITEM>
 </PARAM_INDENT>
  </PARAM>
  <DESCRIPTION>
  <P>
    Les vecteurs <VERB>x</VERB> et <VERB>y</VERB> sont les coordonnées de n points dans le 
    plan.
    <VERB>mesh2d</VERB> renvoie une matrice <VERB>nutr(3,nbt)</VERB> des numéros des
    sommets des <VERB>nbt</VERB> triangles de la triangulation des points.
    Elle renvoie aussi une matrice creuse <VERB>A</VERB> représentant les connections 
    entre les sommets (<VERB>A(i,j)=1</VERB> si <VERB>(i,j)</VERB> est un coté de l&apos;un des 
    triangles ou <VERB>i=j</VERB>).
    Dans le cas de trois 3 paramètres <VERB>front</VERB> est le vecteur définissant la
    frontière : il contient les indices des points sur la frontière.
    La frontière est définie telle que la normale
     est orientée à l&apos;extérieur. La frontière est donnée par ses composantes
    connexes : une composante est donnée par <VERB>(i1,i2)</VERB> tels que 
    <VERB>front(i1)=front(i2)</VERB> (la frontière externe est définie dans le sens 
    trigonométrique. Voir les exemples ci-dessous). 
  </P>
  <P>
    Les cas d&apos;erreurs sont les suivants :
               err = 0 si aucune erreur.
               err = 3 si tous les sommets sont alignés.
  </P>
  <P>
    Si la frontière est donnée les autres cas possibles sont :
               err = 2 des points sont identiques;
        err = 5 vecteur frontière incorrect;
               err = 6 croisement de frontière;
               err = 7 mauvaise orientation de la frontière;
               err = 10 un point intérieur est sur la frontière;
               err = 8 limitation de taille;
               err = 9 croisement de frontière;
               err = 12 des points sont identiques ou limitation de taille;
  </P>
  </DESCRIPTION>
  <EXAMPLE><![CDATA[
// PREMIER CAS
theta=0.025*[1:40]*2.*%pi;
x=1+cos(theta);
y=1.+sin(theta);
theta=0.05*[1:20]*2.*%pi;
x1=1.3+0.4*cos(theta);
y1=1.+0.4*sin(theta);
theta=0.1*[1:10]*2.*%pi;
x2=0.5+0.2*cos(theta);
y2=1.+0.2*sin(theta);
x=[x x1 x2];
y=[y y1 y2];
//
nu=mesh2d(x,y);
nbt=size(nu,2);
jj=[nu(1,:)' nu(2,:)';nu(2,:)' nu(3,:)';nu(3,:)' nu(1,:)'];
as=sparse(jj,ones(size(jj,1),1));
ast=tril(as+abs(as'-as));
[jj,v,mn]=spget(ast);
n=size(x,2);
g=make_graph('foo',0,n,jj(:,1)',jj(:,2)');
g('node_x')=300*x;
g('node_y')=300*y;
g('default_node_diam')=10;
show_graph(g)
// DEUXÈME CAS !!! NECESSITE x,y DU PREMIER CAS
x3=2.*rand(1:200);
y3=2.*rand(1:200);
wai=((x3-1).*(x3-1)+(y3-1).*(y3-1));
ii=find(wai >= .94);
x3(ii)=[];y3(ii)=[];
wai=((x3-0.5).*(x3-0.5)+(y3-1).*(y3-1));
ii=find(wai <= 0.055);
x3(ii)=[];y3(ii)=[];
wai=((x3-1.3).*(x3-1.3)+(y3-1).*(y3-1));
ii=find(wai <= 0.21);
x3(ii)=[];y3(ii)=[];
xnew=[x x3];ynew=[y y3];
fr1=[[1:40] 1];fr2=[[41:60] 41];fr2=fr2($:-1:1);
fr3=[[61:70] 61];fr3=fr3($:-1:1);
front=[fr1 fr2 fr3];
//
nu=mesh2d(xnew,ynew,front);
nbt=size(nu,2);
jj=[nu(1,:)' nu(2,:)';nu(2,:)' nu(3,:)';nu(3,:)' nu(1,:)'];
as=sparse(jj,ones(size(jj,1),1));
ast=tril(as+abs(as'-as));
[jj,v,mn]=spget(ast);
n=size(xnew,2);
g=make_graph('foo',0,n,jj(:,1)',jj(:,2)');
g('node_x')=300*xnew;
g('node_y')=300*ynew;
g('default_node_diam')=10;
show_graph(g)
// CAS RÉGULIER !!! NÉCESSITE LES CAS PRÉCÉDENTS pour x,y,front
xx=0.1*[1:20];
yy=xx.*.ones(1,20);
zz= ones(1,20).*.xx;
x3=yy;y3=zz;
wai=((x3-1).*(x3-1)+(y3-1).*(y3-1));
ii=find(wai >= .94);
x3(ii)=[];y3(ii)=[];
wai=((x3-0.5).*(x3-0.5)+(y3-1).*(y3-1));
ii=find(wai <= 0.055);
x3(ii)=[];y3(ii)=[];
wai=((x3-1.3).*(x3-1.3)+(y3-1).*(y3-1));
ii=find(wai <= 0.21);
x3(ii)=[];y3(ii)=[];
xnew=[x x3];ynew=[y y3];
nu=mesh2d(xnew,ynew,front);
nbt=size(nu,2);
jj=[nu(1,:)' nu(2,:)';nu(2,:)' nu(3,:)';nu(3,:)' nu(1,:)'];
as=sparse(jj,ones(size(jj,1),1));
ast=tril(as+abs(as'-as));
[jj,v,mn]=spget(ast);
n=size(xnew,2);
g=make_graph('foo',0,n,jj(:,1)',jj(:,2)');
g('node_x')=300*xnew;
g('node_y')=300*ynew;
g('default_node_diam')=3;
show_graph(g)
 ]]></EXAMPLE>
</MAN>
