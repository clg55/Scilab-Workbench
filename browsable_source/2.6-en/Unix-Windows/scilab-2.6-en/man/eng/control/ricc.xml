<?xml version="1.0" encoding="ISO-8859-1" standalone="no"?> 
<!DOCTYPE MAN SYSTEM "../../man.dtd">
<MAN>
  <LANGUAGE>eng</LANGUAGE>
  <TITLE>RICC  </TITLE>
  <TYPE>Scilab Function  </TYPE>
  <DATE>April 1993  </DATE>
  <SHORT_DESCRIPTION name="ricc"> Riccati equation   </SHORT_DESCRIPTION>
  <CALLING_SEQUENCE>
  <CALLING_SEQUENCE_ITEM>[X]=ricc(A,B,C,&quot;cont&quot;)  </CALLING_SEQUENCE_ITEM>
  <CALLING_SEQUENCE_ITEM>[X]=ricc(F,G,H,&quot;disc&quot;)  </CALLING_SEQUENCE_ITEM>
  </CALLING_SEQUENCE>
  <PARAM>
 <PARAM_INDENT>
  <PARAM_ITEM>
  <PARAM_NAME>A,B,C  </PARAM_NAME>
  <PARAM_DESCRIPTION>
    : real matrices of appropriate dimensions
  </PARAM_DESCRIPTION> 
  </PARAM_ITEM>
  <PARAM_ITEM>
  <PARAM_NAME>F,G,H  </PARAM_NAME>
  <PARAM_DESCRIPTION>
    : real matrices of appropriate dimensions
  </PARAM_DESCRIPTION> 
  </PARAM_ITEM>
  <PARAM_ITEM>
  <PARAM_NAME>X  </PARAM_NAME>
  <PARAM_DESCRIPTION>
    : real matrix
  </PARAM_DESCRIPTION> 
  </PARAM_ITEM>
  <PARAM_ITEM>
  <PARAM_NAME>&quot;cont&quot;,&quot;disc&quot;&apos;  </PARAM_NAME>
  <PARAM_DESCRIPTION>
    : imposed string (flag for continuous or discrete)
  </PARAM_DESCRIPTION> 
  </PARAM_ITEM>
 </PARAM_INDENT>
  </PARAM>
  <DESCRIPTION>
  <P>
    Riccati solver.
  </P>
  <P>
    Continuous time:
  </P>
  <VERBATIM><![CDATA[
  X=ricc(A,B,C,'cont')
   ]]></VERBATIM>
  <P>
    gives a solution to the continuous time ARE
  </P>
  <VERBATIM><![CDATA[
  A'*X+X*A-X*B*X+C=0 .
   ]]></VERBATIM>
  <P>
    <VERB>B</VERB> and <VERB>C</VERB> are assumed to be nonnegative definite.
    <VERB>(A,G)</VERB> is assumed to be stabilizable with <VERB>G*G&apos;</VERB> a full rank
    factorization of <VERB>B</VERB>.
  </P>
  <P>
    <VERB>(A,H)</VERB> is assumed to be detectable with <VERB>H*H&apos;</VERB> a full rank
    factorization of <VERB>C</VERB>.
  </P>
  <P>
  </P>
  <P>
    Discrete time:
  </P>
  <VERBATIM><![CDATA[
  X=ricc(F,G,H,'disc')
   ]]></VERBATIM>
  <P>
    gives a solution  to the discrete time ARE 
  </P>
  <VERBATIM><![CDATA[
  X=F'*X*F-F'*X*G1*((G2+G1'*X*G1)^-1)*G1'*X*F+H
   ]]></VERBATIM>
  <P>
    <VERB>F</VERB> is assumed invertible and   <VERB>G = G1*inv(G2)*G1&apos;</VERB>.
  </P>
  <P>
    One  assumes  <VERB>(F,G1)</VERB> stabilizable and <VERB>(C,F)</VERB> detectable
    with <VERB>C&apos;*C</VERB> full rank factorization of <VERB>H</VERB>. Use preferably
    <VERB>ric_desc</VERB>.
  </P>
  </DESCRIPTION>
  <EXAMPLE><![CDATA[
//Standard formulas to compute Riccati solutions
A=rand(3,3);B=rand(3,2);C=rand(3,3);C=C*C';R=rand(2,2);R=R*R'+eye();
B=B*inv(R)*B';
X=ricc(A,B,C,'cont');
norm(A'*X+X*A-X*B*X+C,1)
H=[A -B;-C -A'];
[T,d]=gschur(eye(H),H,'cont');T=T(:,1:d);
X1=T(4:6,:)/T(1:3,:);
norm(X1-X,1)
[T,d]=schur(H,'cont');T=T(:,1:d);
X2=T(4:6,:)/T(1:3,:);
norm(X2-X,1)
//       Discrete time case
F=A;B=rand(3,2);G1=B;G2=R;G=G1/G2*G1';H=C;
X=ricc(F,G,H,'disc');
norm(F'*X*F-(F'*X*G1/(G2+G1'*X*G1))*(G1'*X*F)+H-X)
H1=[eye(3,3) G;zeros(3,3) F'];
H2=[F zeros(3,3);-H eye(3,3)];
[T,d]=gschur(H2,H1,'disc');T=T(:,1:d);X1=T(4:6,:)/T(1:3,:);
norm(X1-X,1)
Fi=inv(F);
Hami=[Fi Fi*G;H*Fi F'+H*Fi*G];
[T,d]=schur(Hami,'d');T=T(:,1:d);
Fit=inv(F');
Ham=[F+G*Fit*H -G*Fit;-Fit*H Fit];
[T,d]=schur(Ham,'d');T=T(:,1:d);X2=T(4:6,:)/T(1:3,:);
norm(X2-X,1)
 ]]></EXAMPLE>
  <SEE_ALSO>
    <SEE_ALSO_ITEM> <LINK>riccati</LINK> </SEE_ALSO_ITEM>     <SEE_ALSO_ITEM> <LINK>ric_desc</LINK> </SEE_ALSO_ITEM>     <SEE_ALSO_ITEM> <LINK>schur</LINK> </SEE_ALSO_ITEM>     <SEE_ALSO_ITEM> <LINK>gschur</LINK> </SEE_ALSO_ITEM>
  </SEE_ALSO>
</MAN>
