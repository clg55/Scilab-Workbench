<?xml version="1.0" encoding="ISO-8859-1" standalone="no"?> 
<!DOCTYPE MAN SYSTEM "../../man.dtd">
<MAN>
  <LANGUAGE>eng</LANGUAGE>
  <TITLE>grand  </TITLE>
  <TYPE>Scilab Function  </TYPE>
  <DATE>Dec 1997  </DATE>
  <SHORT_DESCRIPTION name="grand"> Random number generator   </SHORT_DESCRIPTION>
  <CALLING_SEQUENCE>
  <CALLING_SEQUENCE_ITEM>Y=grand(m,n,&apos;option&apos; [,arg1,..,argn])  </CALLING_SEQUENCE_ITEM>
  <CALLING_SEQUENCE_ITEM>Y=grand(x,&apos;option&apos; [,arg1,....,argn])  </CALLING_SEQUENCE_ITEM>
  <CALLING_SEQUENCE_ITEM>Y=grand(&apos;option&apos;)  </CALLING_SEQUENCE_ITEM>
  <CALLING_SEQUENCE_ITEM>Y=grand(&apos;option&apos;  [,arg1,....,argn])  </CALLING_SEQUENCE_ITEM>
  </CALLING_SEQUENCE>
  <PARAM>
 <PARAM_INDENT>
  <PARAM_ITEM>
  <PARAM_NAME>grand(&apos;advnst&apos;,K)  </PARAM_NAME>
  <PARAM_DESCRIPTION>
    : Advances the state of the current generator by 2^K values and  resets the initial seed to that value. 
  </PARAM_DESCRIPTION> 
  </PARAM_ITEM>
  <PARAM_ITEM>
  <PARAM_NAME>Y=grand(m,n,&apos;bet&apos;,A,B), Y=grand(x,&apos;bet&apos;,A,B)  </PARAM_NAME>
  <PARAM_DESCRIPTION>
    : Returns random deviates from the beta distribution with  parameters A and B. The density of the beta is  <VERB>x^(a-1) * (1-x)^(b-1) / B(a,b)</VERB> for <VERB>0 &lt; x &lt; 1</VERB>  Method: R. C. H. Cheng  Generating Beta Variables with Nonintegral Shape Parameters  Communications of the ACM, 21:317-322 (1978)  (Algorithms BB and BC)
  </PARAM_DESCRIPTION> 
  </PARAM_ITEM>
  <PARAM_ITEM>
  <PARAM_NAME>Y=grand(m,n,&apos;bin&apos;,N,P), Y=grand(x,&apos;bin&apos;,N,P)  </PARAM_NAME>
  <PARAM_DESCRIPTION>
    : Generates random deviates from a binomial distribution whose number of  trials is N and whose  probability of an event in each trial is P.  N is the number of trials in the binomial distribution  from which a random deviate is to be generated.  P is the probability of an event in each trial of the  binomial distribution from which a random deviate is to be generated.  (0.0 &lt;= P &lt;= 1.0)  Method: This is algorithm BTPE from:  Kachitvichyanukul, V. and Schmeiser, B. W. Binomial Random Variate Generation. Communications of the ACM, 31, 2  (February, 1988) 216. 
  </PARAM_DESCRIPTION> 
  </PARAM_ITEM>
  <PARAM_ITEM>
  <PARAM_NAME>Y=grand(m,n,&apos;chi&apos;,Df), Y=grand(x,&apos;chi&apos;,Df)  </PARAM_NAME>
  <PARAM_DESCRIPTION>
    : Generates random deviates from the distribution of a chisquare  with DF degrees of freedom random variable.  Uses relation between chisquare and gamma.
  </PARAM_DESCRIPTION> 
  </PARAM_ITEM>
  <PARAM_ITEM>
  <PARAM_NAME>Y=grand(m,n,&apos;def&apos;), Y=grand(x,&apos;def&apos;)  </PARAM_NAME>
  <PARAM_DESCRIPTION>
    : Returns random floating point numbers from a uniform distribution  over 0 - 1 (endpoints of this interval are not returned) using the  current generator
  </PARAM_DESCRIPTION> 
  </PARAM_ITEM>
  <PARAM_ITEM>
  <PARAM_NAME>Y=grand(m,n,&apos;exp&apos;,Av), Y=grand(x,&apos;exp&apos;,Av)  </PARAM_NAME>
  <PARAM_DESCRIPTION>
    : Generates random deviates from an exponential  distribution with mean AV.  For details see:   Ahrens, J.H. and Dieter, U.  Computer Methods for Sampling From the   Exponential and Normal Distributions.  Comm. ACM, 15,10 (Oct. 1972), 873 - 882. 
  </PARAM_DESCRIPTION> 
  </PARAM_ITEM>
  <PARAM_ITEM>
  <PARAM_NAME>Y=grand(m,n,&apos;f&apos;,Dfn,Dfd), Y=grand(x,&apos;f&apos;,Dfn,Dfd)  </PARAM_NAME>
  <PARAM_DESCRIPTION>
    : Generates random deviates from the F (variance ratio)  distribution with DFN degrees of freedom in the numerator and DFD degrees of freedom in the denominator.  Method: Directly generates ratio of chisquare variates
  </PARAM_DESCRIPTION> 
  </PARAM_ITEM>
  <PARAM_ITEM>
  <PARAM_NAME>Y=grand(m,n,&apos;gam&apos;,Shape,Scale), Y=grand(x,&apos;gam&apos;,Shape,Scale)  </PARAM_NAME>
  <PARAM_DESCRIPTION>
    : Generates random deviates from the gamma distribution whose  density is  (Scale**Shape)/Gamma(Shape) * X**(Shape-1) * Exp(-Scale*X) For details see: 
  </PARAM_DESCRIPTION> 
  </PARAM_ITEM>
 <PARAM_INDENT>
  <PARAM_ITEM>
  <PARAM_NAME>(Case R &gt;= 1.0)  </PARAM_NAME>
  <PARAM_DESCRIPTION>
    : Ahrens, J.H. and Dieter, U.  Generating Gamma Variates by a   Modified Rejection Technique.   Comm. ACM, 25,1 (Jan. 1982), 47 - 54.  Algorithm GD
  </PARAM_DESCRIPTION> 
  </PARAM_ITEM>
  <PARAM_ITEM>
  <PARAM_NAME>(Case 0.0 &lt; R &lt; 1.0)  </PARAM_NAME>
  <PARAM_DESCRIPTION>
    : Ahrens, J.H. and Dieter, U.  Computer Methods for Sampling from Gamma,   Beta, Poisson and Binomial Distributions.   Computing, 12 (1974), 223-246/   Adapted algorithm GS.
  </PARAM_DESCRIPTION> 
  </PARAM_ITEM>
 </PARAM_INDENT>
  <PARAM_ITEM>
  <PARAM_NAME>G=grand(&apos;getcgn&apos;)  </PARAM_NAME>
  <PARAM_DESCRIPTION>
    : Returns in G the number of the current random number generator (1..32) 
  </PARAM_DESCRIPTION> 
  </PARAM_ITEM>
  <PARAM_ITEM>
  <PARAM_NAME>Sd=grand(&apos;getsd&apos;)  </PARAM_NAME>
  <PARAM_DESCRIPTION>
    : Returns the value of two integer seeds of the current generator Sd=[sd1,sd2]
  </PARAM_DESCRIPTION> 
  </PARAM_ITEM>
  <PARAM_ITEM>
  <PARAM_NAME>grand(&apos;initgn&apos;,I)  </PARAM_NAME>
  <PARAM_DESCRIPTION>
    : Reinitializes the state of the current generator 
  </PARAM_DESCRIPTION> 
  </PARAM_ITEM>
 <PARAM_INDENT>
  <PARAM_ITEM>
  <PARAM_NAME>I = -1  </PARAM_NAME>
  <PARAM_DESCRIPTION>
    : sets the state to its initial seed 
  </PARAM_DESCRIPTION> 
  </PARAM_ITEM>
  <PARAM_ITEM>
  <PARAM_NAME>I = 0  </PARAM_NAME>
  <PARAM_DESCRIPTION>
    : sets the state to its last (previous) seed 
  </PARAM_DESCRIPTION> 
  </PARAM_ITEM>
  <PARAM_ITEM>
  <PARAM_NAME>I = 1  </PARAM_NAME>
  <PARAM_DESCRIPTION>
    : sets the state to a new seed 2^w values from its last seed 
  </PARAM_DESCRIPTION> 
  </PARAM_ITEM>
 </PARAM_INDENT>
  <PARAM_ITEM>
  <PARAM_NAME>Y=grand(m,n,&apos;lgi&apos;),Y=grand(x,&apos;lgi&apos;)  </PARAM_NAME>
  <PARAM_DESCRIPTION>
    : Returns random integers following a uniform distribution over  (1, 2147483562) using the current generator. 
  </PARAM_DESCRIPTION> 
  </PARAM_ITEM>
  <PARAM_ITEM>
  <PARAM_NAME>Y=grand(M,&apos;mn&apos;,Mean,Cov)  </PARAM_NAME>
  <PARAM_DESCRIPTION>
    :Generate M Multivariate Normal random deviates Mean must be a Nx1 matrix and Cov a NxN positive definite matrix Y is a NxM matrix 
  </PARAM_DESCRIPTION> 
  </PARAM_ITEM>
  <PARAM_ITEM>
  <PARAM_NAME>Y=grand(n,&apos;markov&apos;,P,x0)  </PARAM_NAME>
  <PARAM_DESCRIPTION>
    Generates <VERB>n</VERB> successive states of a Markov chain described  by the transition matrix <VERB>P</VERB>. Initial state is  given by <VERB>x0</VERB>. If <VERB>x0</VERB> is a matrix of size <VERB>m=size(x0,&apos;*&apos;)</VERB> then <VERB>Y</VERB> is a matrix of size <VERB>m*n</VERB>. <VERB>Y(i,:)</VERB> is the sample path  obtained from initial state <VERB>x0(i)</VERB>.
  </PARAM_DESCRIPTION> 
  </PARAM_ITEM>
  <PARAM_ITEM>
  <PARAM_NAME>Y=grand(M,&apos;mul&apos;,N,P)  </PARAM_NAME>
  <PARAM_DESCRIPTION>
    Generate M observations from the Multinomial distribution.  N is the number of categories, P is the vector of probabilities. P(i) is the probability that an event will be classified into category i. Thus, P(i) must be [0,1]. P is of size N-1, (the probability of category N  is 1-sum(P). Y(:,i) is an observation from multinomial distribution. All Y(:,i)  will be nonnegative and their sum will be N. Y is of size NxM  Algorithm from page 559 of Devroye, Luc. Non-Uniform Random Variate Generation. Springer-Verlag, New York, 1986.
  </PARAM_DESCRIPTION> 
  </PARAM_ITEM>
  <PARAM_ITEM>
  <PARAM_NAME>Y=grand(m,n,&apos;nbn&apos;,N,P),Y=grand(x,&apos;nbn&apos;,N,P)  </PARAM_NAME>
  <PARAM_DESCRIPTION>
    : Generates random deviates from a negative binomial  distribution.  N is the required number of events (N &gt; 0).  P is The probability of an event during a Bernoulli trial (0.0 &lt; P &lt; 1.0).  Method: Algorithm from page 480 of Devroye, Luc. Non-Uniform Random Variate Generation. Springer-Verlag, New York, 1986.
  </PARAM_DESCRIPTION> 
  </PARAM_ITEM>
  <PARAM_ITEM>
  <PARAM_NAME>Y=grand(m,n,&apos;nch&apos;,Df,Xnon), Y=grand(x,&apos;nch&apos;,Df,Xnon)  </PARAM_NAME>
  <PARAM_DESCRIPTION>
    : Generates random deviates from the distribution of a noncentral  chisquare with DF degrees of freedom and noncentrality parameter XNONC.  DF is he degrees of freedom of the chisquare (Must be &gt;= 1.0) XNON the Noncentrality parameter of the chisquare  (Must be &gt;= 0.0)  Uses fact that noncentral chisquare is the sum of a chisquare  deviate with DF-1 degrees of freedom plus the square of a normal  deviate with mean XNONand standard deviation 1. 
  </PARAM_DESCRIPTION> 
  </PARAM_ITEM>
  <PARAM_ITEM>
  <PARAM_NAME>Y=grand(m,n,&apos;nf&apos;,Dfn,Dfd,Xnon), Y=grand(x,&apos;nf&apos;,Dfn,Dfd,Xnon)  </PARAM_NAME>
  <PARAM_DESCRIPTION>
    : Generates random deviates from the noncentral F (variance ratio)  distribution with DFN degrees of freedom in the numerator, and DFD  degrees of freedom in the denominator, and noncentrality parameter XNONC.  DFN is the numerator degrees of freedom  (Must be &gt;= 1.0)  DFD is the Denominator degrees of freedom (Must be positive)  XNON is the Noncentrality parameter (Must be nonnegative)  Method:  Directly generates ratio of noncentral numerator chisquare variate   to central denominator chisquare variate. 
  </PARAM_DESCRIPTION> 
  </PARAM_ITEM>
  <PARAM_ITEM>
  <PARAM_NAME>Y=grand(m,n,&apos;nor&apos;,Av,Sd), Y=grand(x,&apos;nor&apos;,Av,Sd)  </PARAM_NAME>
  <PARAM_DESCRIPTION>
    : Generates random deviates from a normal distribution  with mean, AV, and standard deviation, SD. AV is the mean of the normal distribution.  SD is the standard deviation of the normal distribution.  For details see:  Ahrens, J.H. and Dieter, U. Extensions of Forsythe&apos;s Method for Random Sampling from the Normal Distribution. Math. Comput., 27,124 (Oct. 1973), 927 - 937. 
  </PARAM_DESCRIPTION> 
  </PARAM_ITEM>
  <PARAM_ITEM>
  <PARAM_NAME>Sd=grand(&apos;phr2sd&apos;,&apos;string&apos;)  </PARAM_NAME>
  <PARAM_DESCRIPTION>
    : Uses a phrase (character string) to generate two seeds for the RGN  random number generator. Sd is an integer vector of size 2 <VERB>Sd=[Sd1,Sd2]</VERB>
  </PARAM_DESCRIPTION> 
  </PARAM_ITEM>
  <PARAM_ITEM>
  <PARAM_NAME>Y=grand(m,n,&apos;poi&apos;,mu), Y=grand(x,&apos;poi&apos;,mu)  </PARAM_NAME>
  <PARAM_DESCRIPTION>
    : Generates random deviates from a Poisson distribution with mean MU.  MU is the mean of the Poisson distribution from which random deviates are to be generated (MU &gt;= 0.0). For details see:  Ahrens, J.H. and Dieter, U.  Computer Generation of Poisson Deviates   From Modified Normal Distributions.   ACM Trans. Math. Software, 8, 2   (June 1982),163-179 
  </PARAM_DESCRIPTION> 
  </PARAM_ITEM>
  <PARAM_ITEM>
  <PARAM_NAME>Mat=grand(M,&apos;prm&apos;,vect)  </PARAM_NAME>
  <PARAM_DESCRIPTION>
    : Generate M random permutation of column vector <VERB>vect</VERB>. Mat is of size <VERB>(size(vect)xM)</VERB>
  </PARAM_DESCRIPTION> 
  </PARAM_ITEM>
  <PARAM_ITEM>
  <PARAM_NAME>grand(&apos;setall&apos;,ISEED1,ISEED2)  </PARAM_NAME>
  <PARAM_DESCRIPTION>
    : Sets the initial seed of generator 1 to ISEED1 and ISEED2. The initial seeds of the other generators are set accordingly, and all generators states are set to these seeds. 
  </PARAM_DESCRIPTION> 
  </PARAM_ITEM>
  <PARAM_ITEM>
  <PARAM_NAME>grand(&apos;setcgn&apos;,G)  </PARAM_NAME>
  <PARAM_DESCRIPTION>
    : Sets the current generator to G. All references to a generator are to the current generator. 
  </PARAM_DESCRIPTION> 
  </PARAM_ITEM>
  <PARAM_ITEM>
  <PARAM_NAME>grand(&apos;setsd&apos;,ISEED1,ISEED2)  </PARAM_NAME>
  <PARAM_DESCRIPTION>
    : Resets the initial seed and state of generator g to ISEED1 and ISEED2. The seeds and states of the other generators remain  unchanged. 
  </PARAM_DESCRIPTION> 
  </PARAM_ITEM>
  <PARAM_ITEM>
  <PARAM_NAME>Y=grand(m,n,&apos;uin&apos;,Low,High), Y=grand(x,&apos;uin&apos;,Low,High)  </PARAM_NAME>
  <PARAM_DESCRIPTION>
    : Generates integers uniformly distributed between LOW and HIGH.  Low is the low bound (inclusive) on integer value to be generated. High is the high bound (inclusive) on integer value to be generated. If (HIGH-LOW) &gt; 2,147,483,561 prints error message 
  </PARAM_DESCRIPTION> 
  </PARAM_ITEM>
  <PARAM_ITEM>
  <PARAM_NAME>Y=grand(m,n,&apos;unf&apos;,Low,High),Y=grand(x,&apos;unf&apos;,Low,High)  </PARAM_NAME>
  <PARAM_DESCRIPTION>
    : Generates reals uniformly distributed between LOW and HIGH.  Low is the  low bound (exclusive) on real value to be generated  High is the high bound (exclusive) on real value to be generated 
  </PARAM_DESCRIPTION> 
  </PARAM_ITEM>
 </PARAM_INDENT>
  </PARAM>
  <DESCRIPTION>
  <P>
    Interface fo Library of Fortran Routines for Random Number Generation
    (Barry W. Brown and James Lovato, Department of Biomathematics,
    The University of Texas, Houston) 
  </P>
  <P>
    This   set of programs contains   32 virtual random number generators.
    Each generator can provide 1,048,576 blocks of numbers, and each block
    is of length 1,073,741,824.  Any generator can be set to the beginning
    or end of the current block or to its starting value.  The methods are
    from the paper  cited  immediately below, and  most of the  code  is a
    transliteration from the Pascal of the paper into Fortran.
  </P>
  <P>
    P.  L&apos;Ecuyer and S. Cote.   Implementing a Random  Number Package with
    Splitting Facilities.  ACM Transactions on Mathematical Software 17:1,
    pp 98-111.
  </P>
  <P>
    Most users won&apos;t need the sophisticated  capabilities of this package,
    and will desire a single generator.  This single generator (which will
    have a non-repeating length  of 2.3 X  10^18 numbers) is the  default.
    In order to accommodate this use, the concept of the current generator
    is added to those of the  cited paper;  references to a  generator are
    always to the current generator.  The  current generator  is initially
    generator number  1; it  can  be  changed by &apos;setcgn&apos;, and the ordinal
    number of the current generator can be obtained from &apos;getcgn&apos;.
  </P>
  <P>
    The user of the default can set the  initial values of the two integer
    seeds with &apos;setall&apos;.   If the user does  not set the   seeds, the random
    number   generation will  use   the  default   values, 1234567890  and
    123456789.  The values of the current seeds can be  achieved by a call
    to &apos;getsd&apos;.  Random number may be obtained as integers ranging from 1 to
    a large integer by reference to option &apos;lgi&apos; or as a floating point
    number between 0 and 1 by a reference to option &apos;def&apos;.  These are the
    only routines  needed by a user desiring   a single stream   of random
    numbers.
  </P>
  </DESCRIPTION>
  <ITEMIZE label='CONCEPTS'>
  <P>
    A stream of pseudo-random numbers is a sequence, each member  of which can be obtained either as an integer in  the range 1..2,147,483,563 or as a floating point number in the range [0..1].  The user is in charge of which representation is desired.  The method contains an algorithm  for generating a  stream with a very long period, 2.3 X 10^18.   This  stream  in  partitioned into G (=32) virtual generators.  Each virtual generator contains 2^20 (=1,048,576) blocks   of non-overlapping   random  numbers.   Each  block is   2^30 (=1,073,741,824) in length.  The state of a generator  is determined by two  integers called seeds. The seeds can be  initialized  by the  user; the initial values of the first must lie between 1 and 2,147,483,562, that of the second between 1 and 2,147,483,398.  Each time a number is generated,  the  values of the seeds  change.   Three  values   of seeds are remembered   by  the generators  at all times:  the   value with  which the  generator  was initialized, the value at the beginning of the current block,  and the value at the beginning of the next block.   The seeds of any generator can be set to any of these three values at any time.  Of the  32 virtual   generators, exactly one    will  be  the  current generator, i.e., that one will  be used to  generate values for &apos;lgi&apos; and &apos;def&apos;.   Initially, the current generator is   set to number  one. The current generator may be changed by calling &apos;setcgn&apos;, and the number of the current generator can be obtained using &apos;getcgn&apos;.
  </P>
  </ITEMIZE>
  <ITEMIZE label='TEST EXAMPLE'>
  <P>
    An example of  the  need  for these capabilities   is as follows.  Two statistical techniques are being compared on  data of different sizes. The first  technique uses   bootstrapping  and is  thought to   be  as accurate using less data   than the second method  which  employs only brute force.  For the first method, a data set of size uniformly distributed between 25 and 50 will be generated.  Then the data set  of the specified size will be generated and alalyzed.  The second method will  choose a data set size between 100 and 200, generate the data  and alalyze it.  This process will be repeated 1000 times.  For  variance reduction, we  want the  random numbers  used in the two methods to be the  same for each of  the 1000 comparisons.  But method two will  use more random  numbers than   method one and  without this package, synchronization might be difficult.  With the package, it is a snap.  Use generator 1 to obtain  the sample size for  method one and generator 2  to obtain the  data.  Then reset the state to the beginning  of the current  block and do the same  for the second method.  This assures that the initial data  for method two is that used by  method  one.  When both  have concluded,  advance the block for both generators.
  </P>
  </ITEMIZE>
  <ITEMIZE label='INTERFACE'>
  <P>
    A random number is obtained either  as a random  integer between 1 and 2,147,483,562  by using option &apos;lgi&apos; (large integer)  or as a  random  floating point  number  between 0 and 1  by using option &apos;def&apos;.  The  seed of the  first generator  can  be set by using option &apos;setall&apos;;   the values of   the seeds  of   the other 31 generators  are calculated from this value.  The number of  the current generator can be set by using option &apos;setcgn&apos; The number of the current  generator can be obtained by using option &apos;getcgn&apos;.
  </P>
  </ITEMIZE>
</MAN>
