<?xml version="1.0" encoding="ISO-8859-1"?>
<!--
 * Scilab ( http://www.scilab.org/ ) - This file is part of Scilab
 * Copyright (C) 2008 - INRIA
 * 
 * This file must be used under the terms of the CeCILL.
 * This source file is licensed as described in the file COPYING, which
 * you should have received as part of this distribution.  The terms
 * are also available at    
 * http://www.cecill.info/licences/Licence_CeCILL_V2-en.txt
 *
 -->
<refentry xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:svg="http://www.w3.org/2000/svg" xmlns:mml="http://www.w3.org/1998/Math/MathML" xmlns:db="http://docbook.org/ns/docbook" version="5.0-subset Scilab" xml:lang="en" xml:id="graph_union">
  <info>
    <pubdate>$LastChangedDate$</pubdate>
  </info>
  <refnamediv>
    <refname>graph_union</refname>
    <refpurpose> union of two graphs</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <title>Calling Sequence</title>
    <synopsis>g2 = graph_union(g,g1 [,opt])</synopsis>
  </refsynopsisdiv>
  <refsection>
    <title>Parameters</title>
    <variablelist>
      <varlistentry>
        <term>g</term>
        <listitem>
          <para> a <link linkend="graph_data_structure">graph_data_structure</link>.</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>g1</term>
        <listitem>
          <para>a graph data structure.</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>opt</term>
        <listitem>
          <para>a boolean, with  <literal>%t</literal> as default value.</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>g2</term>
        <listitem>
          <para>graph data structure of the new graph</para>
        </listitem>
      </varlistentry>
    </variablelist>
  </refsection>
  <refsection>
    <title>Description</title>
    <itemizedlist>
      <listitem>
        <para><literal>graph_union(g,g1)</literal> creates a new graph
    <literal>g2</literal>. The node set of <literal>g2</literal> is the union (in
    the usual sense) of the node sets of <literal>g</literal> and
    <literal>g1</literal>. If node names are given in both graph, nodes with
    equal names in <literal>g1</literal> and <literal>g2</literal> are considered
    as common nodes. </para>
        <para><literal>g2</literal> has an edge for each edge of <literal>g</literal> and
    an edge for each edge of <literal>g1</literal>. The edges of
    <literal>g</literal> and <literal>g1</literal> having the same endpoints are
    kept and in this case <literal>g2</literal> has multiple edges.</para>
      </listitem>
      <listitem>
        <para><literal>graph_union(g,g1,%f)</literal> creates a new graph
    <literal>g2</literal>. The node set of <literal>g2</literal> is the union (in
    the usual sense) of the node sets of t<literal>g</literal> and
    <literal>g1</literal>. In this case the function does not looks for
    common nodes.</para>
        <para><literal>g2</literal> has an edge for each edge of <literal>g</literal> and an edge for each edge of 
    <literal>g1</literal>. The edges of <literal>g</literal> and <literal>g1</literal> having the same endpoints are kept 
    and in this case <literal>g2</literal> has multiple edges.</para>
      </listitem>
    </itemizedlist>
  </refsection>
  <refsection>
    <title>Examples</title>
    <programlisting role="example"><![CDATA[

ta1=[1,2,3,4,4,4,4,5,6,7,7];he1=[2,3,1,1,5,7,7,6,7,3,4];
g1=make_graph('foo1',1,7,ta1,he1);
g1.nodes.graphics.x= [273,271,339,384,504,513,439];
g1.nodes.graphics.y= [221,324,432,141,209,319,428];
g1.nodes.graphics.display= 'name';
g1.nodes.graphics.name= ['A' 'B' 'C' 'D' 'E' 'F' 'G'];
w1=show_graph(g1);

ta2=[1,1,2,2,3,5,6,6,7,8];he2=[2,8,3,5,4,6,4,7,5,5];
g2=make_graph('foo2',1,8,ta2,he2);
g2.nodes.graphics.x= [233,113,114,114,223,221,289,334];
g2.nodes.graphics.y= [59, 133,227,319,221,324,432,141];
g2.nodes.graphics.name= ['H' 'I' 'J' 'K' 'A' 'B' 'C' 'D'];
g2.nodes.graphics.display= 'name';
w2=show_graph(g2,'new');


g=graph_union(g1,g2);
show_graph(g,'new');

g=graph_union(g1,g2,%f);
show_graph(g,'new');

 
  ]]></programlisting>
  </refsection>
  <refsection>
    <title>See Also</title>
    <simplelist type="inline">
      <member>
        <link linkend="supernode">supernode</link>
      </member>
      <member>
        <link linkend="subgraph">subgraph</link>
      </member>
    </simplelist>
  </refsection>
</refentry>
