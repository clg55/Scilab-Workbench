<?xml version="1.0" encoding="ISO-8859-1"?>
<!--
 * Scilab ( http://www.scilab.org/ ) - This file is part of Scilab
 * Copyright (C) 2008 - INRIA
 * 
 * This file must be used under the terms of the CeCILL.
 * This source file is licensed as described in the file COPYING, which
 * you should have received as part of this distribution.  The terms
 * are also available at    
 * http://www.cecill.info/licences/Licence_CeCILL_V2-en.txt
 *
 -->
<refentry xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:svg="http://www.w3.org/2000/svg" xmlns:mml="http://www.w3.org/1998/Math/MathML" xmlns:db="http://docbook.org/ns/docbook" version="5.0-subset Scilab" xml:lang="en" xml:id="graph_sum">
  <info>
    <pubdate>$LastChangedDate$</pubdate>
  </info>
  <refnamediv>
    <refname>graph_sum</refname>
    <refpurpose> sum of two graphs</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <title>Calling Sequence</title>
    <synopsis>g2 = graph_sum(g,g1)</synopsis>
  </refsynopsisdiv>
  <refsection>
    <title>Parameters</title>
    <variablelist>
      <varlistentry>
        <term>g</term>
        <listitem>
          <para>a <link linkend="graph_data_structure">graph_data_structure</link>.</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>g1</term>
        <listitem>
          <para>an other graph data structure, with same nodes</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>g2</term>
        <listitem>
          <para>graph data structure of the new graph sum.</para>
        </listitem>
      </varlistentry>
    </variablelist>
  </refsection>
  <refsection>
    <title>Description</title>
    <para><literal>graph_sum</literal> creates a graph <literal>g2</literal> with an adjacency matrix  
    equal to the sum of the adjacency matrices of the two graphs <literal>g</literal> and 
    <literal>g1</literal>.
    <literal>g</literal> and <literal>g1</literal> are supposed to be simple graphs (use <literal>graph_simp</literal> 
    before calling <literal>graph_complement</literal> if necessary) and to have the same 
    number of nodes.</para>
  </refsection>
  <refsection>
    <title>Examples</title>
    <programlisting role="example"><![CDATA[

ta=[1 1 2 2 2 3 4 5 5 7 8 8 9 10 10 10 10 11 12 13 13 13 14 15 16 16 17 17];
he=[2 10 3 5 7 4 2 4 6 8 6 9 7 7 11 13 15 12 13 9 10 14 11 16 1 17 14 15];
g=make_graph('foo',1,17,ta,he);
g.nodes.graphics.x=[283 163 63 57 164 164 273 271 339 384 504 513 439 623 631 757 642]/2;
g.nodes.graphics.y=[59 133 223 318 227 319 221 324 432 141 209 319 428 443 187 151 301]/2;
g.nodes.graphics.name=['A' 'B' 'C' 'D' 'E' 'F' 'G' 'H' 'I' 'J' 'K' 'L' 'M' 'N' 'O' 'P' 'Q'];
g.nodes.graphics.display='name';
show_graph(g);

ta1=[2 3 4 5 11 12 1];
he1=[10 5 6 7 15 17 7];
g1=make_graph('foo',1,17,ta1,he1);
g1.nodes.graphics.x=g.nodes.graphics.x
g1.nodes.graphics.y=g.nodes.graphics.y
g1.nodes.graphics.name=g.nodes.graphics.name
g1.nodes.graphics.display='name';

show_graph(g1,'new');
g2=graph_sum(g,g1);
show_graph(g2,'new');
hilite_edges(index_from_tail_head(g2,ta,he))

//chech if g and g1 adjacency matrices sum is equal to g1 adjacency matrix
a=graph_2_mat(g,'node-node');
a1=graph_2_mat(g1,'node-node');
a2=graph_2_mat(g2,'node-node');
and(a+a1==a2)
 
  ]]></programlisting>
  </refsection>
  <refsection>
    <title>See Also</title>
    <simplelist type="inline">
      <member>
        <link linkend="graph_complement">graph_complement</link>
      </member>
      <member>
        <link linkend="graph_union">graph_union</link>
      </member>
    </simplelist>
  </refsection>
</refentry>
