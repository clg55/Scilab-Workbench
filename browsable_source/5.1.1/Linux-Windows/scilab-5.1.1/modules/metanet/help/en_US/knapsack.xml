<?xml version="1.0" encoding="ISO-8859-1"?>
<!--
 * Scilab ( http://www.scilab.org/ ) - This file is part of Scilab
 * Copyright (C) 2008 - INRIA
 * 
 * This file must be used under the terms of the CeCILL.
 * This source file is licensed as described in the file COPYING, which
 * you should have received as part of this distribution.  The terms
 * are also available at    
 * http://www.cecill.info/licences/Licence_CeCILL_V2-en.txt
 *
 -->
<refentry xmlns="http://docbook.org/ns/docbook" 
	  xmlns:xlink="http://www.w3.org/1999/xlink" 
	  xmlns:svg="http://www.w3.org/2000/svg" 
	  xmlns:mml="http://www.w3.org/1998/Math/MathML" 
	  xmlns:db="http://docbook.org/ns/docbook" 
	  version="5.0-subset Scilab" 
	  xml:lang="en" 
	  xml:id="knapsack">
  <info>
    <pubdate>$LastChangedDate$</pubdate>
  </info>
  <refnamediv>
    <refname>knapsack</refname>
    <refpurpose> solves a 0-1 multiple knapsack problem</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <title>Calling Sequence</title>
    <synopsis>[earn,ind] = knapsack(profit,weight,capa,[bck])</synopsis>
  </refsynopsisdiv>
  <refsection>
    <title>Parameters</title>
    <variablelist>
      <varlistentry>
        <term>profit</term>
        <listitem>
          <para>integer row vector</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>weight</term>
        <listitem>
          <para>integer row vector</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>capa</term>
        <listitem>
          <para>integer row vector</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>bck</term>
        <listitem>
          <para>integer</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>earn</term>
        <listitem>
          <para>integer</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>ind</term>
        <listitem>
          <para>integer row vector</para>
        </listitem>
      </varlistentry>
    </variablelist>
  </refsection>
  <refsection>
    <title>Description</title>
    <para>The 0-1 multiple knapsack problem with  n (n &gt;= 2)
    items and  m  knapsacks (m &gt;= 1)  is defined as follow:</para>
    <para>Maximize the global profit  <literal>E=profit*sum(X,1)</literal>  under the constraints:</para>
    <para>
      <literal>X*weight &lt;= capa</literal>
    </para>
    <para>
      <literal>sum(X,1) &lt;= 1 ; i=1,...,n</literal>
    </para>
    <para>
      <literal>X(j,i)= 0 or 1</literal>
    </para>
    <para> Where</para>
    <variablelist>
      <varlistentry>
        <term>profit</term>
        <listitem>
	  <para>is the vector of the "profits" of the n items. The
	  entries must be positive integers.</para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term>weight</term>
	<listitem>
	  <para>is the vector of the corresponding "weights". The
	  entries must be positive integers.</para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term>capa</term>
	<listitem>
	  <para> is the vector of the (integer) capacities of the m
	  knapsacks.The entries must be positive integers. </para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term>X</term>
	<listitem>
	  <para>is a <literal>m</literal> by <literal>n</literal>
	  matrix.</para>
	  <para>est  une matrice <literal>m</literal> par <literal>n</literal> à valeurs dans {0,1}.</para>
	</listitem>
      </varlistentry>
    </variablelist>

    <para><literal>[earn,ind] = knapsack(profit,weight,capa)</literal> solves
    the problem. It returns in</para>
   <variablelist>
      <varlistentry>
        <term>earn</term>
	<listitem>
	  <para>the value of the criterium <literal>E</literal> for
	  the "optimal" solution if it has been found. In case of error, <literal>earn</literal> is assigned to a negative value: </para>
	  <variablelist>
	    <varlistentry>
	      <term>-3</term>
	      <listitem>
		<para>means that a knapsack cannot contain any item.</para>
	      </listitem>
	    </varlistentry>
	    <varlistentry>
	      <term>-4</term>
	      <listitem>
		<para>means that an item cannot fit into any knapsack.</para>
	      </listitem>
	    </varlistentry>
	    <varlistentry>
	      <term>-5</term>
	      <listitem>
		<para>means that a knapsack contains all the items.</para>
	      </listitem>
	    </varlistentry>
	  </variablelist>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term>ind</term>
	<listitem>
	  <para> the integer vector of the knapsack number where item
	  <literal>i</literal> is inserted and this value is 0 if the
	  item i is not in the optimal solution. The matrix
	  <literal>X</literal> can be derived from
	  <literal>ind</literal> by </para>
          <programlisting><![CDATA[
          items=1:n;
          items(ind==0)==[];
          ind(ind==0)=[];
          X=sparse([ind;items]',ones(n,1),[m,n])
	  ]]></programlisting>
	</listitem>
      </varlistentry>
   </variablelist>
   <variablelist>
     <varlistentry>
       <term>bck</term>
       <listitem>
	 <para> is an optional integer: the maximum number of
	 backtrackings to be performed if heuristic solution is
	 required. If the exact solution is required
	 <literal>bck</literal> must be omitted or assigned to a
	 negative value.</para>
       </listitem>
     </varlistentry>
   </variablelist>

 </refsection>
  <refsection>
    <title>Examples</title>
    <programlisting role="example"><![CDATA[

weight=ones(1,15).*.[1:4];
profit=ones(1,60);
capa=[15 40 30 60];
[earn,ind]=knapsack(profit,weight,capa)

items=1:60;
items(ind==0)=[];
ind(ind==0)=[];
X=full(sparse([ind;items]',ones(ind),[4,60])) //one row per sacks
X*weight' //sack weights
x=sum(X,1);
and(x<=1) //contraints check
profit*x'==earn
 
  ]]></programlisting>
  </refsection>
  <refsection>
    <title>See Also</title>
    <simplelist type="inline">
      <member>
        <link linkend="qassign">qassign</link>
      </member>
    </simplelist>
  </refsection>
  <refsection>
    <title>Bibliography</title>
    <para>Coppersmith, D. "Knapsack Used in Factoring." §4.6 in Open Problems in Communication and Computation (Ed. T. M. Cover and B. Gopinath). New York: Springer-Verlag, pp. 117-119, 1987.</para>
    <para>Honsberger, R. Mathematical Gems III. Washington, DC: Math. Assoc. Amer., pp. 163-166, 1985.</para>
  </refsection>
</refentry>
