<?xml version="1.0" encoding="ISO-8859-1"?>
<!--
 * Scilab ( http://www.scilab.org/ ) - This file is part of Scilab
 * Copyright (C) 2008 - INRIA
 * 
 * This file must be used under the terms of the CeCILL.
 * This source file is licensed as described in the file COPYING, which
 * you should have received as part of this distribution.  The terms
 * are also available at    
 * http://www.cecill.info/licences/Licence_CeCILL_V2-en.txt
 *
 -->
<refentry xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:svg="http://www.w3.org/2000/svg" xmlns:mml="http://www.w3.org/1998/Math/MathML" xmlns:db="http://docbook.org/ns/docbook" version="5.0-subset Scilab" xml:lang="en" xml:id="chain_struct">
  <info>
    <pubdate>$LastChangedDate$</pubdate>
  </info>
  <refnamediv>
    <refname>chain_struct</refname>
    <refpurpose> chained structure from adjacency lists of a graph</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <title>Calling Sequence</title>
    <synopsis>[fe,che,fn,chn] = chain_struct(g)
[fe,che,fn,chn] = chain_struct(lp,la,ls)</synopsis>
  </refsynopsisdiv>
  <refsection>
    <title>Parameters</title>
    <variablelist>
      <varlistentry>
        <term>g</term>
        <listitem>
          <para>a <link linkend="graph_data_structure">graph_data_structure</link>.</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>lp</term>
        <listitem>
          <para>row vector, pointer array of the adjacency lists
          description of the graph (its size is the number of nodes of
          the graph + 1)</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>la</term>
        <listitem>
          <para>row vector, arc array of the adjacency lists
          description of the graph (its size is the number of edges of
          the graph)</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>ls</term>
        <listitem>
          <para>row vector, node array of the adjacency lists
          description of the graph (its size is the number of edges of
          the graph)</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>fe</term>
        <listitem>
          <para>row vector of the numbers of the first edges starting
          from nodes (its size is the number of nodes of the
          graph)</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>che</term>
        <listitem>
          <para>row vector of the numbers of the chained edges (its
          size is the number of edges of the graph)</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>fn</term>
        <listitem>
          <para>row vector of the numbers of the first nodes reached
          by the edges of <literal>fe</literal> (its size is the number of
          nodes of the graph)</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>chn</term>
        <listitem>
          <para>row vector of the nodes reached by the edges of <literal>che</literal></para>
        </listitem>
      </varlistentry>
    </variablelist>
  </refsection>
  <refsection>
    <title>Description</title>
    <para><literal>chain_struct</literal> computes the row vectors of the edge chained structure 
    description of the graph <literal>g</literal>.
    It is also possible to give directly <literal>chain_struct</literal> the adjacency lists of
    the graph. This is more efficient if the adjacency lists are already
    available since <literal>chain_struct</literal> uses them to make computations.</para>
    <para>
    The vectors <literal>fe</literal>, <literal>che</literal>, <literal>fn</literal> and <literal>chn</literal> describe the
    chained structure in the following way:</para>
    <para><literal>fe(i)</literal> is the number of the first edge starting from node i</para>
    <para><literal>che(fe(i))</literal> is the number of the second edge starting from
    node i, <literal>che(che(fe(i)))</literal> is the number of the third edge starting from
    node i and so on until the value is 0</para>
    <para><literal>fn(i)</literal> is the number of the first node reached from node i</para>
    <para><literal>ch(i)</literal> is the number of the node reached by edge <literal>che(i)</literal>.</para>
  </refsection>
  <refsection>
    <title>Examples</title>
    <programlisting role="example"><![CDATA[

ta=[1 1 2 3 5 4 6 7 7 3 3 8 8 5];
he=[2 3 5 4 6 6 7 4 3 2 8 1 7 4];
g=make_graph('foo',1,8,ta,he);
g.nodes.graphics.x=[116 231 192 323 354 454 305 155];
g.nodes.graphics.y=[118 116 212 219 117 185 334 316];
show_graph(g);
[fe,che,fn,chn] = chain_struct(g)
for i=1:node_number(g)
  hilite_nodes(i); xpause(1d6)
  cur=fe(i);while cur<>0;hilite_edges(cur);cur=che(cur);xpause(5d5);end

  unhilite_nodes(i);
  cur=fe(i);while cur<>0;unhilite_edges(cur);cur=che(cur);end
end
 
  ]]></programlisting>
  </refsection>
  <refsection>
    <title>See Also</title>
    <simplelist type="inline">
      <member>
        <link linkend="adj_lists">adj_lists</link>
      </member>
      <member>
        <link linkend="graph_2_mat">graph_2_mat</link>
      </member>
    </simplelist>
  </refsection>
</refentry>
