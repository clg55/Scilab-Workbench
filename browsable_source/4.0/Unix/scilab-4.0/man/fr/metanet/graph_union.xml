<?xml version="1.0" encoding="ISO-8859-1" standalone="no"?> 
<!DOCTYPE MAN SYSTEM "../../manrev.dtd">
<MAN>
  <LANGUAGE>fr</LANGUAGE>
  <TITLE>graph_union  </TITLE>
  <TYPE>Scilab function  </TYPE>
  <DATE>September 1996  </DATE>
  <SHORT_DESCRIPTION name="graph_union"> union de deux graphes  </SHORT_DESCRIPTION>
  <CALLING_SEQUENCE>
  <CALLING_SEQUENCE_ITEM>g2 = graph_union(g,g1)  </CALLING_SEQUENCE_ITEM>
  </CALLING_SEQUENCE>
  <PARAM>
 <PARAM_INDENT>
  <PARAM_ITEM>
  <PARAM_NAME>g  </PARAM_NAME>
  <PARAM_DESCRIPTION>
  <SP>
    : graphe (liste)
</SP>
  </PARAM_DESCRIPTION> 
  </PARAM_ITEM>
  <PARAM_ITEM>
  <PARAM_NAME>g1  </PARAM_NAME>
  <PARAM_DESCRIPTION>
  <SP>
    : graphe (liste)
</SP>
  </PARAM_DESCRIPTION> 
  </PARAM_ITEM>
  <PARAM_ITEM>
  <PARAM_NAME>g2  </PARAM_NAME>
  <PARAM_DESCRIPTION>
  <SP>
    : nouveau graphe (liste)
</SP>
  </PARAM_DESCRIPTION> 
  </PARAM_ITEM>
 </PARAM_INDENT>
  </PARAM>
  <DESCRIPTION>
  <P>
    <VERB>graph_union</VERB> crée un nouveau graphe <VERB>g2</VERB>. L&apos;ensemble des sommets de <VERB>g2</VERB>
    est l&apos;union (au sens usuel) de l&apos;ensemble des sommets de <VERB>g</VERB> et <VERB>g1</VERB>.
    <VERB>g2</VERB> a une arête pour chaque arête de<VERB>g</VERB> et une arête pour chaque arête 
    de <VERB>g1</VERB>.
    Les arêtes de <VERB>g</VERB> et <VERB>g1</VERB> ayant les mêmes destinations sont 
    conservées et dans ce cas <VERB>g2</VERB> a des arêtes multiples.
  </P>
  </DESCRIPTION>
  <EXAMPLE><![CDATA[
ta=[1 1 2 2 2 3 4 5 5 7 8 8 9 10 10 10 10 10 11 12 13 13 13 14 15 16 16 17 17];
he=[2 10 3 5 7 4 2 4 6 8 6 9 7 7 11 13 13 15 12 13 9 10 14 11 16 1 17 14 15];
g=make_graph('foo',1,17,ta,he);
g('node_x')=[283 163 63 57 164 164 273 271 339 384 504 513 439 623 631 757 642];
g('node_y')=[59 133 223 318 227 319 221 324 432 141 209 319 428 443 187 151 301];
g('edge_color')=modulo([1:(edge_number(g))],15)+1;
g('node_diam')=[1:(g('node_number'))]+20;
g('node_name')=['A' 'B' 'C' 'D' 'E' 'F' 'G' 'H' 'I' 'J' 'K' 'L' 'M' 'N' 'O' 'P' 'Q'];
w=show_graph(g);
v=[7 8 9 10 11 12 13];
show_nodes(v);
g1=subgraph(v,'nodes',g);
show_graph(g1,'new');
v=[1 2 5 6 7 8 9 10];
netwindow(w);
show_nodes(v);
g2=subgraph(v,'nodes',g);
show_graph(g2,'new');
g=graph_union(g1,g2);
show_graph(g,'new');
 ]]></EXAMPLE>
  <SEE_ALSO>
    <SEE_ALSO_ITEM> <LINK>supernode</LINK> </SEE_ALSO_ITEM>     <SEE_ALSO_ITEM> <LINK>subgraph</LINK> </SEE_ALSO_ITEM>
  </SEE_ALSO>
</MAN>
