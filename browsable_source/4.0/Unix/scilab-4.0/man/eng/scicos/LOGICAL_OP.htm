<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">

<!--Converted with LaTeX2HTML 2002-2-1 (1.70)
original version by:  Nikos Drakos, CBLU, University of Leeds
* revised and updated by:  Marcus Hennecke, Ross Moore, Herb Swan
* with significant contributions from:
  Jens Lippmann, Marek Rouchal, Martin Wilck and others -->
<HTML>
<HEAD>
<TITLE>Logical operation </TITLE>
<META NAME="description" CONTENT="Logical operation ">
<META NAME="keywords" CONTENT="main">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">

<META NAME="Generator" CONTENT="LaTeX2HTML v2002-2-1">
<META HTTP-EQUIV="Content-Style-Type" CONTENT="text/css">

<LINK REL="STYLESHEET" HREF="main.css">

</HEAD>

<BODY bgcolor="#FFFFFF">

<!--Table of Child-Links-->
<A NAME="CHILD_LINKS"><STRONG>Subsections</STRONG></A>

<UL>
<LI><A NAME="tex2html4795"
  HREF="LOGICAL_OP.htm#SECTION005713100000000000000">Library</A>
<LI><A NAME="tex2html4796"
  HREF="LOGICAL_OP.htm#SECTION005713200000000000000">Description</A>
<LI><A NAME="tex2html4797"
  HREF="LOGICAL_OP.htm#SECTION005713300000000000000">Dialog Box</A>
<LI><A NAME="tex2html4798"
  HREF="LOGICAL_OP.htm#SECTION005713400000000000000">Default properties</A>
<LI><A NAME="tex2html4799"
  HREF="LOGICAL_OP.htm#SECTION005713500000000000000">Interfacing function</A>
<LI><A NAME="tex2html4800"
  HREF="LOGICAL_OP.htm#SECTION005713600000000000000">Computational function (type 4)</A>
</UL>
<!--End of Table of Child-Links-->
<HR>

<H2><A NAME="SECTION005713000000000000000"></A><A NAME="LOGICAL_OP"></A>
<BR>
Logical operation 
</H2>
<DIV ALIGN="CENTER">
<!-- MATH
 $\epsfig{file=LOGICAL_OP.eps,width=90.00pt}$
 -->
<IMG
 WIDTH="143" HEIGHT="129" ALIGN="BOTTOM" BORDER="0"
 SRC="img135.gif"
 ALT="\epsfig{file=LOGICAL_OP.eps,width=90.00pt}">
</DIV>
<H3><font color="blue"><A NAME="SECTION005713100000000000000">
Library</A>
</font></H3>
Others

<H3><font color="blue"><A NAME="SECTION005713200000000000000">
Description</A>
</font></H3>
The Logical Operator block performs the specified logical operation on
its inputs. An input value is TRUE (1) if it is nonzero and FALSE (0)
if it is zero. 

<H3><font color="blue"><A NAME="SECTION005713300000000000000">
Dialog Box</A>
</font></H3>
<DIV ALIGN="CENTER">
<TABLE CELLPADDING=3 BORDER="1">
<TR><TD ALIGN="CENTER">Set parameters</TD>
<TD></TD>
</TR>
<TR><TD ALIGN="CENTER">number of inputs</TD>
<TD ALIGN="CENTER">2</TD>
</TR>
<TR><TD ALIGN="CENTER">Operator: AND (0), OR (1), NAND (2), NOR (3), XOR (4), NOT (5)</TD>
<TD ALIGN="CENTER">0</TD>
</TR>
</TABLE>
</DIV>

<UL>
<LI>number of inputs: The number of block inputs. The value must
  be appropriate for the selected operator. 
</LI>
<LI>Operator: AND : The logical operator to be applied to the
  block inputs. Valid choices are the operators from the list. 
</LI>
</UL>

<H3><font color="blue"><A NAME="SECTION005713400000000000000">
Default properties</A>
</font></H3>

<UL>
<LI>always active: no
</LI>
<LI>direct-feedthrough: yes
</LI>
<LI>zero-crossing: no
</LI>
<LI>mode: no
</LI>
<LI>number/sizes of inputs: 2 / -1  -1
</LI>
<LI>number/sizes of outputs: 1 / -1
</LI>
<LI>number/sizes of activation inputs: 0 / 
</LI>
<LI>number/sizes of activation outputs: 0 / 
</LI>
<LI>continuous-time state: no
</LI>
<LI>discrete-time state: no
</LI>
<LI>name of computational function: <EM>logicalop</EM>
</LI>
</UL>
<H3><font color="blue"><A NAME="SECTION005713500000000000000">
Interfacing function</A>
</font></H3>
<TT>scilab/macros/scicos_blocks/misc/LOGICAL_OP.sci</TT>

<H3><font color="blue"><A NAME="SECTION005713600000000000000">
Computational function (type 4)</A>
</font></H3>
<BR>
<PRE>#include "scicos_block.h"
#include &lt;math.h&gt;

void logicalop(scicos_block *block,int flag)
{
  int i,j,k,l;
  i=block-&gt;ipar[0];
  switch (i)
    {
    case 0:
      if (block-&gt;nin==1)
	{
	  block-&gt;outptr[0][0]=1.0;
	  for (j=0;j&lt;block-&gt;insz[0];j++) {
	    if(block-&gt;inptr[0][j]&lt;=0)
	      {
		block-&gt;outptr[0][0]=0.0;
		break;
	      }
	  }
	}
      else {
	for (j=0;j&lt;block-&gt;insz[0];j++) {
	  block-&gt;outptr[0][j]=1.0;
	  for (k=0;k&lt;block-&gt;nin;k++) {
	    if(block-&gt;inptr[k][j]&lt;=0) {
	      block-&gt;outptr[0][j]=0.0;
	      break;
	    }
	  }
	}
      }
      break;
      
    case 1:
      if (block-&gt;nin==1)
	{
	  block-&gt;outptr[0][0]=0.0;
	  for (j=0;j&lt;block-&gt;insz[0];j++) {
	    if(block-&gt;inptr[0][j]&gt;0) {
	      block-&gt;outptr[0][0]=1.0;
	      break;
	    }
	  }
	}
      else {
	for (j=0;j&lt;block-&gt;insz[0];j++) {
	  block-&gt;outptr[0][j]=0.0;
	  for (k=0;k&lt;block-&gt;nin;k++) {
	    if(block-&gt;inptr[k][j]&gt;0) {
	      block-&gt;outptr[0][j]=1.0;
	      break;
	    }
	  }
	}
      }
      break;

    case 2:
      if (block-&gt;nin==1)
	{
	  block-&gt;outptr[0][0]=0.0;
	  for (j=0;j&lt;block-&gt;insz[0];j++) {
	    if(block-&gt;inptr[0][j]&lt;=0)
	      {
		block-&gt;outptr[0][0]=1.0;
		break;
	      }
	  }
	}
      else {
	for (j=0;j&lt;block-&gt;insz[0];j++) {
	  block-&gt;outptr[0][j]=0.0;
	  for (k=0;k&lt;block-&gt;nin;k++) {
	    if(block-&gt;inptr[k][j]&lt;=0) {
	      block-&gt;outptr[0][j]=1.0;
	      break;
	    }
	  }
	}
      }
      break;

    case 3:
      if (block-&gt;nin==1)
	{
	  block-&gt;outptr[0][0]=1.0;
	  for (j=0;j&lt;block-&gt;insz[0];j++) {
	    if(block-&gt;inptr[0][j]&gt;0) {
	      block-&gt;outptr[0][0]=0.0;
	      break;
	    }
	  }
	}
      else {
	for (j=0;j&lt;block-&gt;insz[0];j++) {
	  block-&gt;outptr[0][j]=1.0;
	  for (k=0;k&lt;block-&gt;nin;k++) {
	    if(block-&gt;inptr[k][j]&gt;0) {
	      block-&gt;outptr[0][j]=0.0;
	      break;
	    }
	  }
	}
      }
      break;

    case 4:
      if (block-&gt;nin==1)
	{
	  l=0;
	  for (j=0;j&lt;block-&gt;insz[0];j++) {
	    if(block-&gt;inptr[0][j]&gt;0) {
	      l=(l+1)%2;
	    }
	  }
	  block-&gt;outptr[0][0]=(double) l;
	}
      else {
	for (j=0;j&lt;block-&gt;insz[0];j++) {
	  l=0;
	  for (k=0;k&lt;block-&gt;nin;k++) {
	    if(block-&gt;inptr[k][j]&gt;0) {
	      l=(l+1)%2;
	    }
	  }
	  block-&gt;outptr[0][j]=(double) l;
	}
      }
      break;

    case 5:
      for (j=0;j&lt;block-&gt;insz[0];j++) {
	if(block-&gt;inptr[0][j]&gt;0) {
	  block-&gt;outptr[0][j]=0.0;
	}
	else{
	  block-&gt;outptr[0][j]=1.0;
	}
      }
    }
}
</PRE>
<HR>
<ADDRESS>
Ramine Nikoukhah
2004-06-22
</ADDRESS>
</BODY>
</HTML>
