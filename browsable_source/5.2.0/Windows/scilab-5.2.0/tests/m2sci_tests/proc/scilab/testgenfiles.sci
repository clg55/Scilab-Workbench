function []=testgenfiles(test_files,opt)

	// Copyright INRIA
	// Function which can generate:
	// - reference files for M2SCI tests
	// - diary files for M2SCI tests
	// Input description:
	// - test_files: names of files to test ('all' for all files in generated_files/ directory)
	// - opt: 'ref' if we want to build reference files
	
	ieee(1)
	global("failed_fun")
	failed_fun=[]
	// Default arguments
	rhs=argn(2);
	// If no file of GEN_FILES_DIR is given, all files of this directory are created
	
	if rhs<1 then
		test_files=[]
	else
		if test_files=="all" then
			test_files=[]
		else
			test_files=GEN_FILES_DIR+test_files
		end
	end
	
	if isempty(test_files) then
		test_files=listfiles(GEN_FILES_DIR+"*.m");
		// Ref files are ignored
		file_ind=1
		while file_ind<=size(test_files,1)
			if strindex(test_files(file_ind),"_ref.m")<>[] then
				test_files(file_ind)=[]
				file_ind=file_ind-1
			end
			file_ind=file_ind+1
		end
		test_files=gsort(test_files,"r","i");
	end
	
	// If option is not given, test is made not ref
	if rhs<2 then
		opt=""
	end
	
	// Same format as Matlab mat2str()
	format(16)
	
	// For all files listed, a .dia or a .dia.ref file is created
	for file_ind=1:size(test_files,1)
		
		if opt=="ref" & ~isempty(fileinfo(GEN_FILES_DIR+basename(test_files(file_ind))+".dia.ref")) then
			write(%io(2),"File "+basename(test_files(file_ind))+".dia.ref already exists")
			//continue
		else
		
		end
		// Convert test file (ex: ABS.m)
		if opt=="ref" then
			write(%io(2),"****** Beginning of generation of "+basename(test_files(file_ind))+".dia.ref file  ******")
		else
			write(%io(2),"****** Beginning of test of "+basename(test_files(file_ind))+" ******")
		end
		mfile=basename(test_files(file_ind))+".m"
		
		write(%io(2),"Conversion of "+basename(test_files(file_ind))+".m file...")
		mfile2sci(GEN_FILES_DIR+mfile,GEN_FILES_DIR,%F,%F,-1,%T)  
		
		// Convert Matlab ref file
		mdiafile=basename(test_files(file_ind))+"_ref.m"
		write(%io(2),"Conversion of "+basename(test_files(file_ind))+"_ref.m file...")
		mfile2sci(GEN_FILES_DIR+mdiafile,GEN_FILES_DIR,%F,%F,3,%T)
		
		// Grep Matlab version in cat file
		catfilename=basename(test_files(file_ind))+"_ref.cat"
		catfile=mopen(GEN_FILES_DIR+catfilename);
		catfiletxt=mgetl(catfile);
		mclose(catfile);
		for k=1:size(catfiletxt,"*")
			if strindex(catfiletxt(k),"Matlab version") then
				matvers=catfiletxt(k);
			end
		end
		
		// Open testfile
		testfilename=basename(test_files(file_ind))+".sci";
		testfile=mopen(GEN_FILES_DIR+testfilename);
		
		// Read testfile data
		testfiletxt=mgetl(testfile);
		mclose(testfile);
		// Kill useless lines (empty lines, comments which do not give test number...)
		lind=1
		while lind<=size(testfiletxt,"*")
			testline=testfiletxt(lind)
			if ~isempty(strindex(testline,"//")) & isempty(strindex(testline,"TEST")) then
				testfiletxt(lind)=[]
			elseif or(stripblanks(testline)==["",";"])
				testfiletxt(lind)=[]
			elseif strindex(testline,"function") // Should be removed if batch file correcty translated...
				testfiletxt(lind)=[]
			elseif strindex(testline,"ieee") // Should be removed if batch file correcty translated...
				testfiletxt(lind)=[]
			elseif strindex(testline,"mode(0);") // Should be removed if batch file correcty translated...
				testfiletxt(lind)=[]
			else
				lind=lind+1
			end
		end
	
		// Write header
		write(%io(2),"Creation of "+basename(test_files(file_ind))+".dia ...")
		diafiletxt="// Results of execution of "+testfilename;
		diafiletxt=[diafiletxt;"// Copyright INRIA"];
		diafiletxt=[diafiletxt;"// File generated by Scilab: PLEASE DO NOT EDIT !"];
		diafiletxt=[diafiletxt;"// Scilab qualif version: "+getversion()];
		diafiletxt=[diafiletxt;"//"+matvers];
		
		lind=1
		
		while lind<=size(testfiletxt,"*")
		
			// Get first test number line
			testnbline=testfiletxt(lind);
			lind=lind+1
			diafiletxt=[diafiletxt;testnbline];
			// Get line to eval
			evalline=testfiletxt(lind);
			lind=lind+1
			offset=1
			if lind<=size(testfiletxt,"*") then
				while isempty(strindex(testfiletxt(lind),"TEST"))
					lind=lind+1
					if lind>size(testfiletxt,"*")+1 then
						break
					end
					offset=length(evalline)+2
					evalline=evalline+";"+testfiletxt(lind-1)
					if lind>size(testfiletxt,"*") then
						break
					end
				end
			end
			
			// Eval test line
			execstr(evalline);
			
			// Search output variable names
			outvars=stripblanks(part(evalline,offset:max(strindex(evalline,"= "))-1))
			if strindex(outvars,"[")==[] then
				beg=1
				closebracket=length(outvars)+1
			else
				beg=2
				closebracket=strindex(outvars,"]");
			end
			
			comma=strindex(outvars,",");
			comma=[beg-1,comma,closebracket];
		
			// For all outputs
			for k=1:size(comma,"*")-1
				
				// Name
				resname=part(outvars,comma(k)+1:comma(k+1)-1);
				
				// Value
				resval=evstr(resname);
				
				// Size
				ressize=strcat(string(size(resval))," ");
				
				infos="//"+resname+"|"+ressize+"|"+type_infos(resval);
				diafiletxt=[diafiletxt;infos];
				
				// Make string from result value
				if resval==""
					resvalstr = """""";
				else
					f_sav=format()
					format("v",16) // To write same precision as Matlab mat2str()
					resvalstr=sci2exp(resval)
					if size(resvalstr,1)>1 then
						if strindex(resvalstr(1),"..")==[] & part(resvalstr(1),length(resvalstr(1)))<>";" then
							resvalstr = strcat(resvalstr,";");
						else
							resvalstr = strsubst(strcat(resvalstr),"..","");
						end
					end
					format(f_sav(2))
				end
				// Write result value in ref file
				diafiletxt=[diafiletxt;resname+" = "+resvalstr];
			end
		end
	
		// Generate output file name
		if opt=="ref" then
			diafilename=basename(test_files(file_ind))+".dia.ref";
		else
			diafilename=basename(test_files(file_ind))+".dia";
		end
	
		mputl(diafiletxt,GEN_FILES_DIR+diafilename);
	  
	 
	funname=basename(test_files(file_ind))
  
	
		if opt=="ref" then
			// Now Scilab reference file is created, it has to be validated
			write(%io(2),"Validation of "+funname+".dia.ref file...")
			passed=validref(funname)
			if passed then
				write(%io(2),"---> Validation of "+funname+".dia.ref: PASSED !")
			
				// Delete all useles files
				mdelete(pathconvert(GEN_FILES_DIR+"*.sci",%F))
				mdelete(pathconvert(GEN_FILES_DIR+"*.cat",%F))
				mdelete(pathconvert(GEN_FILES_DIR+"*varslist*.*",%F))
				mdelete(pathconvert(GEN_FILES_DIR+"resume_*",%F))
			else
				if ~or(funname==failed_fun) then
					if size(failed_fun,"*")==0 then
						failed_fun=["Comparison between FUNNAME.dia.ref and FUNNAME.varslist.dia.ref file andFUNNAME_ref.sci ...";"";"---> Test for "+funname+": FAILED !"]
					else
						failed_fun=[failed_fun;"---> Test for "+funname+": FAILED !"]
					end
				end  
				write(%io(2),"---> Validation of "+funname+".dia: FAILED  !")
				write(%io(2),"---> Please see "+funname+"_valid.log file in valid_ref_logs/ directory.")
			end
		else
			write(%io(2),"Comparison between "+funname+".dia.ref and "+funname+".dia file...")
			mdelete(pathconvert(GEN_FILES_DIR+"*.sci",%F))
			mdelete(pathconvert(GEN_FILES_DIR+"*.cat",%F))
			mdelete(pathconvert(GEN_FILES_DIR+"*varslist*.*",%F))
			mdelete(pathconvert(GEN_FILES_DIR+"resume_*",%F))
			passed=valid_dia(funname)
			//DIATXT=mgetl(GEN_FILES_DIR+diafilename)
			//DIAREFTXT=mgetl(GEN_FILES_DIR+diafilename+".ref")
			
			// Remove Scilab and Matlab version
			//for ktxt=1:size(DIATXT,"*")
			//	if ~isempty(strindex(DIATXT(ktxt),"version")) then
			//		DIATXT(ktxt:ktxt+1)=[]
			//		break
			//	end
			//end
			
			// Remove Scilab and Matlab version
			//for ktxt=1:size(DIAREFTXT,"*")
			//	if ~isempty(strindex(DIAREFTXT(ktxt),"version")) then
			//		DIAREFTXT(ktxt:ktxt+1)=[]
			//		break
			//	end
			//end
			
			//if or(DIATXT<>DIAREFTXT) then
			
			if ~passed then	
				if ~or(funname==failed_fun) then
					if size(failed_fun,"*")==0 then
						failed_fun=["Comparison between FUNNAME.dia.ref and FUNNAME.dia file...";"";"---> Test for "+funname+": FAILED !"]
					else
						failed_fun=[failed_fun;"---> Test for "+funname+": FAILED !"]
					end
				end 
				write(%io(2),"---> Test for "+funname+": FAILED !")
			else
				write(%io(2),"---> Test for "+funname+": PASSED !")
			end
			
		end
	
		if opt=="ref" then
			write(%io(2),["****** End of generation of "+basename(test_files(file_ind))+".dia.ref file ******";""])
		else
			write(%io(2),["****** End of test of "+basename(test_files(file_ind))+" ******";""])
		end
		if opt=='' then
		mdelete(GEN_FILES_DIR+diafilename)
	end
	end
	
	// write fun_failed
	failedfunfile=GEN_FILES_DIR+"failed_fun.log"
	funfile=mopen(failedfunfile,"w")
	if failed_fun==[] then
		failed_fun=["***** NOT FAILED FUNCTION *****"]
	end
	mputl(failed_fun,funfile)
	clearglobal failed_fun
endfunction
