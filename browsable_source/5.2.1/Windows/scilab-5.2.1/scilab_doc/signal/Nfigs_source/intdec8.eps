%!PS-Adobe-2.0 EPSF-2.0
%%BoundingBox:  0 0 300 212
%%
%%Scilab Postscript File (1995-1997 J.Ph Chancelier)
%%EndComments
/saved save def 
/$pictdict 100 dict def
$pictdict begin

/dogrey
{ /Arraybox exch def
	/Arraygrey exch def
	/nargs exch def 
	/func exch cvx def
	Arraybox 0 nargs getinterval Arraygrey 0 get func 
	1 1 Arraygrey length 1 sub 
	{/i exch def
	Arraybox i nargs mul nargs getinterval 
	Arraygrey i get func
	}for
} def
%--------------------------------------------
% [x y width height] nivgris drawbox 
% si niv gris > 1.0 alors on fait un stroke 
% sans closepath 
%--------------------------------------------

/drawpoly
	{/glev exch def /Ar exch def
	newpath
	Ar 0 get Ar 1 get moveto 
	2 2 Ar length 1 sub 
	{/i exch def
	Ar i get Ar i 1 add get absolu {lineto} {rlineto} ifelse
	}for
	glev -1 le 
	{ % filling the polygon with current pattern ( gray or color)
	  closepath gsave glev neg 1 sub WhiteLev 2 add lmin 0 lmax Setgray eofill grestore }
	{ glev 1 ge 
	   { % drawing the polygon with current dash style or color 
	     % XXXXX : a voir c'est pas clair il faudrait sauver 
	     % and filling it with other color (glev) 
	     closepath gsave glev 1 sub WhiteLev 2 add lmin 0 lmax Setgray 
		 eofill grestore stroke }
	   {% drawing the polygon with current style 
	    closeflag {closepath} if stroke} 
	ifelse }
	ifelse 
} def 


/drawbox 
	{/glev exch def /Ar exch def 
	/x Ar 0 get def /y Ar 1 get def 
	/w Ar 2 get def /h Ar 3 get def 
	newpath
	x y moveto
	x w add y lineto
	x w add y h add lineto
	x y h add lineto
	glev 1 ge 
	{ % filling 
	 closepath gsave glev 1 sub WhiteLev 2 add lmin 0 lmax Setgray eofill 
		grestore}
	{ 
	  % drawing 
	  glev -1 le 
	  {
    	  closepath gsave glev neg 1 sub WhiteLev 2 add lmin 0 lmax Setgray
		 stroke grestore  }
	  { closepath stroke} ifelse 
	} ifelse
} def 

%--------------------------------------------
% [x y width height] clearzone
%--------------------------------------------
/clearzone
        {/Ar exch def
        /x Ar 0 get def /y Ar 1 get def
        /w Ar 2 get def /h Ar 3 get def
        newpath
        x y moveto
        x w add y lineto
        x w add y h add lineto
        x y h add lineto
	closepath WhiteLev 2 add Setcolor  eofill grestore
} def

%------------------------------------------------------
% polyline stroke or polygon fill or both 
%------------------------------------------------------
/absolu true def 
/closeflag false def 

/lmin { /y exch def /x exch def x y le { x  } {  y  } ifelse } def
/lmax { /y exch def /x exch def x y le { y } {  x } ifelse } def 


/drawpoly
	{/glev exch def /Ar exch def
	newpath
	Ar 0 get Ar 1 get moveto 
	2 2 Ar length 1 sub 
	{/i exch def
	Ar i get Ar i 1 add get absolu {lineto} {rlineto} ifelse
	}for
	glev -1 le 
	{ % filling the polygon with current pattern ( gray or color)
	  closepath gsave glev neg 1 sub WhiteLev 2 add lmin 0 lmax Setgray eofill grestore }
	{ glev 1 ge 
	   { % drawing the polygon with current dash style or color 
	     % XXXXX : a voir c'est pas clair il faudrait sauver 
	     % and filling it with other color (glev) 
	     closepath gsave glev 1 sub WhiteLev 2 add lmin 0 lmax Setgray 
		 eofill grestore stroke }
	   {% drawing the polygon with current style 
	    closeflag {closepath} if stroke} 
	ifelse }
	ifelse 
} def 

%------------------------------------------------------
% segments non connectes 
%------------------------------------------------------

/drawsegs
	{/glev exch def /Ar exch def
	newpath
	Ar 0 get Ar 1 get moveto Ar 2 get Ar 3 get lineto 
	gsave glev Setgray stroke grestore
	4 4 Ar length 3 sub 
	{/i exch def
	newpath 
	Ar i get Ar i 1 add get moveto
	Ar i 2 add get Ar i 3 add get lineto 
	gsave glev Setgray stroke grestore
	}for
} def 


%------------------------------------------------------
% unconected arrows
%-----------------------------------------------------

/drawarrows
	{/arsize10 exch def /Ar exch def
	Ar 0 get  Ar 1 get Ar 2 get Ar 3 get arsize10 drawarrow
	4 4 Ar length 3 sub 
	{/i exch def
	Ar i get Ar i 1 add get  Ar i 2 add get  Ar i 3 add get arsize10 
	drawarrow
	}for
} def 
		
/cos20 20 cos def
/sin20 20 sin def

/drawarrow                                
  { 
      /arsize exch 10 div def 
      /tipy exch def /tipx exch def       
      /taily exch def /tailx exch def
      /dx tipx tailx sub  def               
      /dy tipy taily sub  def               
      newpath tipx tipy moveto tailx taily lineto stroke   
      /norme dx dx mul dy dy mul add sqrt def 
      norme 1.e-8 ge 
	{
	 arsize dx mul norme div /dx1 exch def 
	 arsize dy mul norme div /dy1 exch def 
	 /depx tipx cos20 dx1 mul add def 
	/depy  tipy cos20 dy1 mul add def 
	newpath depx depy moveto 
	cos20 neg dx1 mul sin20 dy1 mul sub depx add
	sin20 dx1  mul cos20 dy1 mul sub depy add lineto 
	cos20 neg dx1 mul sin20 dy1 mul add  depx add
	sin20 neg dx1 mul cos20 dy1 mul sub depy add lineto closepath 
	fill
	} {} ifelse 
  } def


%------------------------------------------------------
% cercle ou portions de cercle 
% attention argument (x y w h angl1*64 angl2*64 )
% devrait tracer une ellipse a modifier donc 
%------------------------------------------------------

/fillarc
	{/glev exch def /Ar exch def
	/cx Ar 0 get Ar 2 get 2 div add def 
	/cy Ar 1 get Ar 3 get 2 div add def 
	/hom Ar 3 get Ar 2 get div def 
	/Cmsave1 matrix def Cmsave1 currentmatrix pop
	%-- on change de transformation pour faire homothetie en (x,y) 
	cx cy [1 0 0 hom 0 0 ] transform
	/t1 exch neg cy add def 
	/t2 exch neg cx add def 
	[1 0 0 hom t2 t1 ] concat 
	glev WhiteLev le
	{ % filling 
	newpath
	cx cy moveto 
	cx cy Ar 2 get 2 div Ar 5 get Ar 4 get add  64 div neg
	 Ar 4 get 64 div neg  arc closepath
	gsave glev Setgray eofill grestore}
	{
	%drawing with current dash or color unclosed path 
	newpath
	cx cy Ar 2 get 2 div Ar 5 get Ar 4 get add 64 div neg Ar 4 get 64 div neg arc
	  stroke} ifelse 
	Cmsave1 setmatrix } def 

/drawarc
	{/glev exch def /Ar exch def
	/cx Ar 0 get Ar 2 get 2 div add def 
	/cy Ar 1 get Ar 3 get 2 div add def 
	/hom Ar 3 get Ar 2 get div def 
	/Cmsave1 matrix def Cmsave1 currentmatrix pop
	%-- on change de transformation pour faire homothetie en (x,y) 
	cx cy [1 0 0 hom 0 0 ] transform
	/t1 exch neg cy add def 
	/t2 exch neg cx add def 
	[1 0 0 hom t2 t1 ] concat 
	newpath
	cx cy Ar 2 get 2 div Ar 5 get Ar 4 get add 64 div neg Ar 4 get 64 div neg arc
	closepath glev Setgray stroke
	Cmsave1 setmatrix } def 

%------------------------------------------------------
% centred hard mark 
%------------------------------------------------------

% x y str ShowCString 
% on fait un show mais string est centre autour du point (x,y) 

/ShowCString { /str exch def /y exch def /x exch def 
 newpath 
 x y moveto 
 str true charpath flattenpath pathbbox 
 /y2 exch def /x2 exch def /y1 exch def /x1 exch def 
 x 2 mul x2 x1 add 2 div sub 
 y 2 mul y2 y1 add 2 div sub moveto str show 
 } def 

/drawpolymark {/glev exch def /Ar exch def 
	Ar 0 get Ar 1 get HardMark ShowCString 
	2 2 Ar length 1 sub 
	{/i exch def
	Ar i get Ar i 1 add get HardMark ShowCString
	}for
} def 

%---------------------------------------------------
% chaines de caracteres 
%---------------------------------------------------
/FBox {/Ar exch def /rot exch def /str exch def /y exch def /x exch def 
 newpath Ar 0 get Ar 1 get moveto 
	/sina rot sin def /cosa rot cos def 
	/-sina sina neg def 
	[cosa -sina sina cosa 0 0 ] CtmModif
 Ar 2 get 0 rlineto 0 Ar 3 get neg rlineto Ar 2 get neg 0 rlineto 
 0 Ar 3 get  rlineto  stroke CtmRestore 
 x y str rot ShowRotate 
 } def 

% x y str ang Showrotate 
% inverse du sens trigo 

/ShowRotate { /ang exch def /str exch def 
	/y exch def /x exch def 
	x y moveto 
	/sina ang sin def /cosa ang cos def 
	/-sina 0 sina sub def 
	[cosa -sina sina cosa 0 0 ] CtmModif
	str show 
	CtmRestore 
} def 

/HardMark (0) def 

%(Chaine de caracteres) x y flag angle [arfbox] Show

/Show { /Ar exch def 
	/rot exch def /flag exch def /y exch def /x exch def /str exch def 
	flag 1 eq 
	{x y str rot Ar FBox}
	{x y str rot ShowRotate } ifelse} def 

/L {/y2 exch def /x2 exch def /y1 exch def /x1 exch def 
    newpath x1 y1 moveto x2 y2 lineto stroke } def 

%---------------------------------------------------------
% drawing an axis 
% angle [nsep1,nsep2] ,[siz1,siz2,coeff] [x0,y0] drawaxis",
%---------------------------------------------------------

/drawaxis {/XX exch def /Arsize exch def /Arsep exch def /ang exch def 
	/Cmsave1 matrix def Cmsave1 currentmatrix pop
	/sina ang sin def /cosa ang cos def /-sina sina neg def 
	/x XX 0 get def /y XX 1 get def
	%-- on change de transformation pour tourner autour de (x,y) 
	x y [cosa sina -sina cosa 0 0 ] transform
	/t1 exch neg y add def 
	/t2 exch neg x add def 
	[cosa sina -sina cosa t2 t1 ] concat 
	newpath x y moveto 0 Arsize 1 get Arsize 2 get mul rlineto
	stroke 
	0 1 Arsep 1 get 1 sub
	{
	 % i don't want the value of the for indice 
	 pop
	newpath 
	x y moveto 
	0 1 Arsep 0 get 1 sub
		{
		 % i don't want the value of the for indice 
		 pop
		 Arsize 0 get 0  rlineto
		 0 Arsize 1 get rlineto 
	 	0 Arsize 1 get  neg rlineto }
		for 
	currentpoint /y exch def /x exch def 
	stroke 
	newpath x y moveto 0 Arsize 1 get Arsize 2 get mul rlineto
	stroke }
	for 
	Cmsave1 setmatrix } def 

%---------------------------------------------------------
% change and restore CTM
%---------------------------------------------------------

/CtmModif {
	/arg exch def 
	/Cmsave matrix def 
	Cmsave currentmatrix pop
	[1 0 0 -1 0 0 ] concat 
	arg concat 
} def 

/CtmRestore { Cmsave setmatrix } def 

/Thickness { /th exch def th 0 le {/th 0.1 def} if th setlinewidth} def 

/WhiteLev 15 def

/Setgray { WhiteLev div setgray} def 

/fillsolid { 0 setgray } def 

%--------------------------------------
% clip zones ( rectangle ) 
%-------------------------------------

/setclipzone {initclip 
	/h exch def /w exch def /y exch def /x exch def 
	newpath x y moveto w 0 rlineto 0 h rlineto w neg 0 rlineto 
	0 h neg rlineto closepath clip} def 

%------------------
% to change the position of a picture 
%------------------
/cm{28.346457 mul}def

/DesPosi { /YH exch def /XW exch def /YP exch def /XP exch def 
	XP cm YP cm neg translate 
	XW cm 6000 div YH cm 4240 div  scale } def 

0 setlinecap 
2 setlinejoin 
1 setlinewidth

%-- Color database 
/ColorR [0.000000 0.000000 0.000000 0.529412 0.498039 0.133333 0.000000 0.878431 0.000000 1.000000 1.000000 1.000000 0.933333 1.000000 1.000000 0.960784 1.000000 ] def
/ColorG [0.000000 0.000000 0.000000 0.807843 1.000000 0.545098 1.000000 1.000000 1.000000 0.647059 0.000000 0.000000 0.509804 1.000000 0.843137 0.960784 1.000000 ] def
/ColorB [0.000000 0.501961 1.000000 0.921569 0.831373 0.133333 0.000000 1.000000 1.000000 0.000000 0.000000 1.000000 0.933333 0.000000 0.000000 0.862745 1.000000 ] def

/Setcolor {/i exch def ColorR i get ColorG i get ColorB i get setrgbcolor } def

% to multiply all the fontsizes by a factor  scf
/scf 1.0 def


% changing fonts encoding 

/Courier findfont
dup length dict begin
  {1 index /FID ne {def} {pop pop} ifelse} forall
  /Encoding ISOLatin1Encoding def
  currentdict
  end
/Courier exch definefont pop

/Times-Roman findfont
dup length dict begin
  {1 index /FID ne {def} {pop pop} ifelse} forall
  /Encoding ISOLatin1Encoding def
  currentdict
  end
/Times-Roman exch definefont pop

/Times-Bold findfont
dup length dict begin
  {1 index /FID ne {def} {pop pop} ifelse} forall
  /Encoding ISOLatin1Encoding def
  currentdict
  end
/Times-Bold exch definefont pop


/Times-BoldItalic findfont
dup length dict begin
  {1 index /FID ne {def} {pop pop} ifelse} forall
  /Encoding ISOLatin1Encoding def
  currentdict
  end
/Times-BoldItalic exch definefont pop


%------ End Main Program ------%
% XP YP XW YW DesPosi in the following code 
% will output the picture in the rectangle defined by 
% upper left point (XP,YP) wide :XW Height: YW
% the coordinates are given in centimeter and 
% are the (0,0) point is the down-left point of the paper 


/ColorR [0.000000 
0.000000 0.000000 0.000000 1.000000 1.000000 1.000000 1.000000 0.000000 0.000000 0.000000 
0.529412 0.000000 0.000000 0.000000 0.000000 0.000000 0.000000 0.564706 0.690196 0.815686 
0.564706 0.690196 0.815686 0.501961 0.627451 0.752941 1.000000 1.000000 1.000000 1.000000 
1.000000 0.0 1.0] def
/ColorG [0.000000 
0.000000 1.000000 1.000000 0.000000 0.000000 0.000000 1.000000 0.000000 0.000000 0.000000 
0.807843 0.564706 0.690196 0.815686 0.564706 0.690196 0.815686 0.000000 0.000000 0.000000 
0.000000 0.000000 0.000000 0.188235 0.250980 0.376471 0.501961 0.627451 0.752941 0.878431 
0.843137 0.0 1.0] def
/ColorB [0.000000 
1.000000 0.000000 1.000000 0.000000 1.000000 0.000000 1.000000 0.564706 0.690196 0.815686 
1.000000 0.000000 0.000000 0.000000 0.564706 0.690196 0.815686 0.000000 0.000000 0.000000 
0.564706 0.690196 0.815686 0.000000 0.000000 0.000000 0.501961 0.627451 0.752941 0.878431 
0.000000 0.0 1.0] def
% Dessin en bas a gauche de taille 3000,2120
[0.5 10 div 0 0 0.5 10 div neg  0 2120 10 div] concat
% Init driver 
5 Thickness
% 3 setalufunction
-1 -1 200000 200000 setclipzone
0 Setcolor
/Times-Roman findfont 100 scf mul scalefont setfont
fillsolid
[] 0 setdash
0 Setcolor
%--use color 1 
fillsolid
[] 0 setdash
0 Setcolor
/WhiteLev 31 def
/Setgray {/i exch def ColorR i get ColorG i get ColorB i get setrgbcolor } def 
/Setcolor {/i exch def ColorR i get ColorG i get ColorB i get setrgbcolor } def 
%--end use color 1 
% End init driver 
/WhiteLev 31 def
0 Setcolor
 (drawbox) 4 [ 0]
[750 530 4500 3180 
] dogrey 
0 Setcolor
(0) 722 3906 0  0.00 [722 3816 57 120] Show
 (drawsegs) 4 [ 0]
[750 3710 750 3773 
] dogrey 
0 Setcolor
 (drawsegs) 4 [ 0]
[1200 3710 1200 3741 
] dogrey 
0 Setcolor
(100) 1564 3906 0  0.00 [1564 3816 172 120] Show
 (drawsegs) 4 [ 0]
[1650 3710 1650 3773 
] dogrey 
0 Setcolor
 (drawsegs) 4 [ 0]
[2100 3710 2100 3741 
] dogrey 
0 Setcolor
(200) 2464 3906 0  0.00 [2464 3816 172 120] Show
 (drawsegs) 4 [ 0]
[2550 3710 2550 3773 
] dogrey 
0 Setcolor
 (drawsegs) 4 [ 0]
[3000 3710 3000 3741 
] dogrey 
0 Setcolor
(300) 3364 3906 0  0.00 [3364 3816 172 120] Show
 (drawsegs) 4 [ 0]
[3450 3710 3450 3773 
] dogrey 
0 Setcolor
 (drawsegs) 4 [ 0]
[3900 3710 3900 3741 
] dogrey 
0 Setcolor
(400) 4264 3906 0  0.00 [4264 3816 172 120] Show
 (drawsegs) 4 [ 0]
[4350 3710 4350 3773 
] dogrey 
0 Setcolor
 (drawsegs) 4 [ 0]
[4800 3710 4800 3741 
] dogrey 
0 Setcolor
(500) 5164 3906 0  0.00 [5164 3816 172 120] Show
 (drawsegs) 4 [ 0]
[5250 3710 5250 3773 
] dogrey 
0 Setcolor
(-1) 564 3770 0  0.00 [564 3680 114 120] Show
 (drawsegs) 4 [ 0]
[750 3710 690 3710 
] dogrey 
0 Setcolor
 (drawsegs) 4 [ 0]
[750 3483 720 3483 
] dogrey 
0 Setcolor
(3) 621 3316 0  0.00 [621 3226 57 120] Show
 (drawsegs) 4 [ 0]
[750 3256 690 3256 
] dogrey 
0 Setcolor
 (drawsegs) 4 [ 0]
[750 3029 720 3029 
] dogrey 
0 Setcolor
(7) 621 2861 0  0.00 [621 2771 57 120] Show
 (drawsegs) 4 [ 0]
[750 2801 690 2801 
] dogrey 
0 Setcolor
 (drawsegs) 4 [ 0]
[750 2574 720 2574 
] dogrey 
0 Setcolor
(11) 564 2407 0  0.00 [564 2317 114 120] Show
 (drawsegs) 4 [ 0]
[750 2347 690 2347 
] dogrey 
0 Setcolor
 (drawsegs) 4 [ 0]
[750 2120 720 2120 
] dogrey 
0 Setcolor
(15) 564 1953 0  0.00 [564 1863 114 120] Show
 (drawsegs) 4 [ 0]
[750 1893 690 1893 
] dogrey 
0 Setcolor
 (drawsegs) 4 [ 0]
[750 1666 720 1666 
] dogrey 
0 Setcolor
(19) 564 1499 0  0.00 [564 1409 114 120] Show
 (drawsegs) 4 [ 0]
[750 1439 690 1439 
] dogrey 
0 Setcolor
 (drawsegs) 4 [ 0]
[750 1211 720 1211 
] dogrey 
0 Setcolor
(23) 564 1044 0  0.00 [564 954 114 120] Show
 (drawsegs) 4 [ 0]
[750 984 690 984 
] dogrey 
0 Setcolor
 (drawsegs) 4 [ 0]
[750 757 720 757 
] dogrey 
0 Setcolor
(27) 564 590 0  0.00 [564 500 114 120] Show
 (drawsegs) 4 [ 0]
[750 530 690 530 
] dogrey 
0 Setcolor
0 Setcolor
750 530 4500 3180 setclipzone
0 Setcolor
/closeflag false def
 (drawpoly) 432 [ 0]
[759 871 768 922 777 1027 786 1135 795 1241 804 1348 813 1455 822 1562 831 1669 840 1776 
849 1883 858 1990 867 2097 876 2204 885 2310 894 2417 903 2524 912 2631 921 2738 930 2845 
939 2952 948 3059 957 3165 966 3273 975 3379 984 3488 993 3579 1002 3586 1011 3501 1020 3392 
1029 3286 1038 3179 1047 3072 1056 2965 1065 2858 1074 2751 1083 2644 1092 2538 1101 2431 1110 2324 
1119 2217 1128 2110 1137 2003 1146 1896 1155 1789 1164 1682 1173 1576 1182 1469 1191 1362 1200 1255 
1209 1148 1218 1041 1227 934 1236 872 1245 911 1254 1014 1263 1122 1272 1228 1281 1335 1290 1442 
1299 1549 1308 1656 1317 1763 1326 1869 1335 1976 1344 2083 1353 2190 1362 2297 1371 2404 1380 2511 
1389 2618 1398 2725 1407 2832 1416 2938 1425 3045 1434 3152 1443 3259 1452 3366 1461 3474 1470 3571 
1479 3591 1488 3515 1497 3406 1506 3299 1515 3192 1524 3085 1533 2978 1542 2872 1551 2765 1560 2658 
1569 2551 1578 2444 1587 2337 1596 2230 1605 2123 1614 2016 1623 1910 1632 1803 1641 1696 1650 1589 
1659 1482 1668 1375 1677 1268 1686 1161 1695 1055 1704 946 1713 874 1722 901 1731 1000 1740 1108 
1749 1215 1758 1322 1767 1428 1776 1535 1785 1642 1794 1749 1803 1856 1812 1963 1821 2070 1830 2177 
1839 2284 1848 2391 1857 2497 1866 2604 1875 2711 1884 2818 1893 2925 1902 3032 1911 3139 1920 3246 
1929 3352 1938 3460 1947 3562 1956 3594 1965 3527 1974 3419 1983 3312 1992 3206 2001 3099 2010 2992 
2019 2885 2028 2778 2037 2671 2046 2564 2055 2457 2064 2350 2073 2244 2082 2137 2091 2030 2100 1923 
2109 1816 2118 1709 2127 1602 2136 1495 2145 1388 2154 1282 2163 1175 2172 1068 2181 959 2190 879 
2199 892 2208 986 2217 1095 2226 1201 2235 1308 2244 1415 2253 1522 2262 1629 2271 1736 2280 1843 
2289 1950 2298 2057 2307 2163 2316 2270 2325 2377 2334 2484 2343 2591 2352 2698 2361 2805 2370 2912 
2379 3019 2388 3125 2397 3232 2406 3339 2415 3447 2424 3551 2433 3596 2442 3540 2451 3433 2460 3326 
2469 3219 2478 3112 2487 3005 2496 2898 2505 2791 2514 2685 2523 2578 2532 2471 2541 2364 2550 2257 
2559 2150 2568 2043 2577 1936 2586 1829 2595 1723 2604 1616 2613 1509 2622 1402 2631 1295 2640 1188 
2649 1082 2658 972 2667 885 2676 885 2685 972 2694 1082 
] dogrey 
 (drawpoly) 418 [0]
[2703 1188 2712 1295 2721 1402 2730 1509 2739 1616 2748 1723 2757 1829 2766 1936 2775 2043 2784 2150 
2793 2257 2802 2364 2811 2471 2820 2578 2829 2685 2838 2791 2847 2898 2856 3005 2865 3112 2874 3219 
2883 3326 2892 3433 2901 3540 2910 3596 2919 3551 2928 3447 2937 3339 2946 3232 2955 3125 2964 3019 
2973 2912 2982 2805 2991 2698 3000 2591 3009 2484 3018 2377 3027 2270 3036 2163 3045 2057 3054 1950 
3063 1843 3072 1736 3081 1629 3090 1522 3099 1415 3108 1308 3117 1201 3126 1095 3135 986 3144 892 
3153 879 3162 959 3171 1068 3180 1175 3189 1282 3198 1388 3207 1495 3216 1602 3225 1709 3234 1816 
3243 1923 3252 2030 3261 2137 3270 2244 3279 2350 3288 2457 3297 2564 3306 2671 3315 2778 3324 2885 
3333 2992 3342 3099 3351 3206 3360 3312 3369 3419 3378 3527 3387 3594 3396 3562 3405 3460 3414 3352 
3423 3246 3432 3139 3441 3032 3450 2925 3459 2818 3468 2711 3477 2604 3486 2497 3495 2391 3504 2284 
3513 2177 3522 2070 3531 1963 3540 1856 3549 1749 3558 1642 3567 1535 3576 1428 3585 1322 3594 1215 
3603 1108 3612 1000 3621 901 3630 874 3639 946 3648 1055 3657 1161 3666 1268 3675 1375 3684 1482 
3693 1589 3702 1696 3711 1803 3720 1910 3729 2016 3738 2123 3747 2230 3756 2337 3765 2444 3774 2551 
3783 2658 3792 2765 3801 2872 3810 2978 3819 3085 3828 3192 3837 3299 3846 3406 3855 3515 3864 3591 
3873 3571 3882 3474 3891 3366 3900 3259 3909 3152 3918 3045 3927 2938 3936 2832 3945 2725 3954 2618 
3963 2511 3972 2404 3981 2297 3990 2190 3999 2083 4008 1976 4017 1869 4026 1763 4035 1656 4044 1549 
4053 1442 4062 1335 4071 1228 4080 1122 4089 1014 4098 911 4107 872 4116 934 4125 1041 4134 1148 
4143 1255 4152 1362 4161 1469 4170 1576 4179 1682 4188 1789 4197 1896 4206 2003 4215 2110 4224 2217 
4233 2324 4242 2431 4251 2538 4260 2644 4269 2751 4278 2858 4287 2965 4296 3072 4305 3179 4314 3286 
4323 3392 4332 3501 4341 3586 4350 3579 4359 3488 4368 3379 4377 3273 4386 3165 4395 3059 4404 2952 
4413 2845 4422 2738 4431 2631 4440 2524 4449 2417 4458 2310 4467 2204 4476 2097 4485 1990 4494 1883 
4503 1776 4512 1669 4521 1562 4530 1455 4539 1348 4548 1241 4557 1135 4566 1027 4575 922 
] dogrey 
0 Setcolor
/absolu true def
0 Setcolor
-1 -1 200000 200000 setclipzone
 showpage

 end saved restore 

