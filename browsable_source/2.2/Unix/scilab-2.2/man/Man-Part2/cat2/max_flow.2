


max_flow(1)                    Scilab function                    max_flow(1)






NAME
  max_flow - maximum flow between two nodes

CALLING SEQUENCE
  [v,phi] = maxflow(i,j,g,[p])

PARAMETERS
  i : integer, number of start node
  j : integer, number of end node
  g : graph-list
  p : row vector of a compatible initial flow
  v : value of the maximum flow it is exists
  phi : row vector of the value of the flow on the arcs

DESCRIPTION
  max_flow returns the value of maximum flow v from node number i to node
  number j if it exists, and the value of the flow on each arc as a row vec-
  tor phi. All the computations are made with integer numbers. The graph must
  be directed.

  The bounds of the flow are given by the elements edge_min_cap and
  edge_max_cap of the graph-list. The value of the maximum capacity must be
  greater than or equal to the value of the minimum capacity.  If the value
  of edge_min_cap or edge_max_cap is not given (empty row vector []), it is
  assumed to be equal to 0 on each edge.

  p is a compatible flow for initializing the algorithm. It is an optional
  argument. If it is not given, it is considered as equal to null vector. If
  given, checking is made to see if it is really a compatible flow.

EXAMPLE
  ta=[1 1 2 2 2 3 4 4 5 6 6 6 7 7 7 8 9 10 12 12 13 13 13 14 15 14 9 11 10];
  he=[2 6 3 4 5 1 3 5 1 7 10 11 5 8 9 5 8 11 10 11 9 11 15 13 14 4 6 9 1];
  gt=make_graph('foo',1,15,ta,he);
  gt('node_x')=[194 191 106 194 296 305 305 418 422 432 552 550 549 416 548];
  gt('node_y')=[56 181 276 278 276 103 174 281 177 86 175 90 290 397 399];
  show_graph(gt,'rep');
  g1=gt; ma=g1('edge_number'); n=g1('node_number');
  g1('edge_min_cap')=0*ones(1,ma);
  rand('uniform');
  g1('edge_max_cap')=20*rand(1,ma)+ones(1,ma);
  source=15; sink=1;
  [v,phi]=max_flow(source,sink,g1);
  x_message(['The maximum flow is: '+string(v);
             'Showing the flow on the arcs']);
  nodetype=0*ones(1,n); nodetype(source)=2; nodetype(sink)=1;
  g1('node_type')=nodetype;
  nodecolor=0*ones(1,n); nodecolor(source)=11; nodecolor(sink)=11;
  g1('node_color')=nodecolor;
  ii=find(phi<>0); edgecolor=phi; edgecolor(ii)=11*ones(ii);
  g1('edge_color')=edgecolor;
  edgefontsize=8*ones(1,ma); edgefontsize(ii)=18*ones(ii);
  g1('edge_font_size')=edgefontsize;
  g1('edge_label')=string(phi);
  show_graph(g1,'rep');

