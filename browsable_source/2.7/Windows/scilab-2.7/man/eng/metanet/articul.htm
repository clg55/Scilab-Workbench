<html><head><meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1"><title>articul</title></head><body bgcolor="FFFFFF"><CENTER>Scilab function  </CENTER><p><b>articul -  finds one or more articulation points   </b></p><H3><font color="blue">Calling Sequence</font></H3><dl><dd><tt>nart = articul([i],g)  </tt></dd></dl><H3><font color="blue">Parameters</font></H3><ul><ul>
  <li><tt><b>g  </b></tt>
    : graph list 
  </li>
  <li><tt><b>i  </b></tt>
    : integer 
  </li>
  <li><tt><b>nart  </b></tt>
    : integer row vector
  </li>
 </ul></ul><H3><font color="blue">Description</font></H3><dl>
  <p>
    <tt><b>articul</b></tt> finds one or more articulation points (if they exist) of
    the graph <tt><b>g</b></tt>. <tt><b>nart</b></tt> is the row vector of numbers of articulation
    nodes: deleting one of these nodes increases the number of connected 
    components of the graph.
    <tt><b>i</b></tt> is the optional node number from which the algorithm starts. 
    The default is 1. Note that the result depends strongly on this starting
    node.
  </p>
  </dl><H3><font color="blue">Examples</font></H3><ul><pre>
ta=[2  1 3 2 2 4 4 5 6 7 8 8 9 10 10 10 10 11 12 13 14 15 16 17 17];
he=[1 10 2 5 7 3 2 4 5 8 6 9 7  7 11 13 15 12 13 14 11 16 17 14 15];
g=make_graph('foo',1,17,ta,he);
g('node_x')=[283 163 63 57 164 164 273 271 339 384 504 513 439 623 631 757 642];
g('node_y')=[59 133 223 318 227 319 221 324 432 141 209 319 428 443 187 151 301];
g('node_diam')=[1:(g('node_number'))]+20;
show_graph(g);
nart = articul(g)
show_nodes(nart);
 </pre></ul></body></html>
