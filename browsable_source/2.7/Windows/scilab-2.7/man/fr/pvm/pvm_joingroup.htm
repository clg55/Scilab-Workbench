<html><head><meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1"><title>pvm_joingroup</title></head><body bgcolor="FFFFFF"><CENTER>Scilab function  </CENTER><p><b>pvm_joingroup -  enrolls the calling process in a named group.  </b></p><H3><font color="blue">Sequence d'appel</font></H3><dl><dd><tt>[inum] = pvm_joingroup(group)  </tt></dd></dl><H3><font color="blue">Parametres</font></H3><ul><ul>
  <li><tt><b>group  </b></tt>
    : string, string group name of an existing group.
  </li>
  <li><tt><b>inum  </b></tt>
    : integer, instance number returned by the routine.
  </li>
 </ul></ul><H3><font color="blue">Description</font></H3><dl>
  <p>
    <tt><b>pvm_joingroup</b></tt> 
    enrolls the calling task in
    the group named
  </p>
  <p>
    and returns the instance number
  </p>
  <p>
    of this task in this group.
    If there is an error
  </p>
  <p>
    will be negative.
  </p>
  <p>
    Instance numbers start at 0 and count up.
    When using groups a (group, inum) pair uniquely identifies a
    PVM process.
    This is consistent with the PVM 2.4 naming schemes.
    If a task leaves a group by calling pvm_lvgroup
    and later rejoins the same group,
    the task is not guaranteed to get the same instance number.
    PVM attempts to reuse old instance numbers, so when a task
    joins a group it will get the lowest available instance number.
    A task can be a member of multiple groups simultaneously.
  </p>
  <p>
  </p>
  </dl><H3><font color="blue">Exemples</font></H3><ul><pre>
inum =  pvm_joingroup( "worker" )
 </pre></ul><H3><font color="blue">Voir aussi</font></H3><p><ul><a href="pvm_lvgroup.htm"><tt><b>pvm_lvgroup</b></tt></a>&nbsp;&nbsp;</ul></p></body></html>
