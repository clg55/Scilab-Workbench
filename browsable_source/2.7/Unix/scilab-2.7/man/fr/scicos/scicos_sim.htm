<html><head><meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1"><title>scicos_sim</title></head><body bgcolor="FFFFFF"><CENTER>Scicos data structure  </CENTER><p><b>scicos_sim -  Scicos simulation data structure  </b></p><H3><font color="blue">Description</font></H3><dl>
  <p>
    Scicos simulation data structure is usually generated by Scicos
    <tt><b>Compile</b></tt> menu and needed to simulate
    the system (see <tt><b>scicos_cpr</b></tt>). 
  </p>
  </dl><H3><font color="blue">DEFINITION</font></H3><ul><pre>
sim=tlist(['scs','funs','xptr','zptr','izptr','inpptr','outptr',..
 'inplnk','outlnk','lnkptr','rpar','rpptr','ipar','ipptr',..
 'clkptr','ordptr','execlk','ordclk','cord','oord','zord',..      
 'critev','nb','ztyp','nblk','ndcblk','subscr','funtyp',..
 'iord','labels'],funs,xptr,zptr,izptr,inpptr,outptr,inplnk,..
 outlnk,lnkptr,rpar,rpptr,ipar,ipptr,clkptr,ordptr,execlk,..
 ordclk,cord,oord,zord,critev,nb,ztyp,nblk,ndcblk,subscr,..
 funtyp,iord,labels)

   </pre><li><b><font color="maroon">sim: Scilab tlist, Scicos simulation data structure defined by the</font></b>
formal name 'scs' and containing the following fields:

  </li></ul><H3><font color="blue">FIELDS</font></H3><ul><li><b><font color="maroon">funs</font></b>
: list of character strings containing the names of each block simulation function (a linked C or Fortran procedure or a Scilab function).

  </li><li><b><font color="maroon">xptr</font></b>
: (nblk+1) x 1 vector of integers,    <tt><b>cpr.state.x(cpr.sim.xptr(i):cpr.sim.xptr(i+1)-1)</b></tt> is the continuous state vector of the <tt><b>i</b></tt>th block (see <tt><b>scicos_cpr</b></tt> and <tt><b>scicos_state</b></tt>).

  </li><li><b><font color="maroon">zptr</font></b>
: (nblk+1) x 1 vector of integers,   <tt><b>cpr.state.z(cpr.sim.zptr(i):cpr.sim.zptr(i+1)-1)</b></tt> is the discrete state vector of the <tt><b>i</b></tt>th block.

  </li><li><b><font color="maroon">izptr</font></b>
: unused

  </li><li><b><font color="maroon">inpptr</font></b>
: (nblk+1) x 1 vector of integers,   <tt><b>(cpr.sim.inpptr(i+1)-cpr.sim.inpptr(i))</b></tt> gives the number of input ports. <tt><b>inpptr(i)</b></tt>th points to the beginning of <tt><b>i</b></tt>th block inputs within the indirection table <tt><b>inplnk</b></tt>.

  </li><li><b><font color="maroon">outptr</font></b>
: (nblk+1) x 1 vector of integers,   <tt><b>(cpr.sim.outptr(i+1)-cpr.sim.outptr(i))</b></tt> gives the number of output ports. <tt><b>outptr(i)</b></tt>th points to the beginning of <tt><b>i</b></tt>th block outputs within the indirection table <tt><b>outlnk</b></tt>.

  </li><li><b><font color="maroon">inplnk</font></b>
: nblink x 1 vector of integers,   <tt><b>(cpr.sim.inplnk(cpr.sim.inpptr(i)-1+j))</b></tt> is the index of the link connected to the <tt><b>j</b></tt>th input port of the <tt><b>i</b></tt>th block.  where <tt><b>j</b></tt> goes from <tt><b>1</b></tt> to <tt><b>(cpr.sim.inpptr(i+1)-cpr.sim.inpptr(i))</b></tt>.

  </li><li><b><font color="maroon">outlnk</font></b>
: nblink x 1 vector of integers,   <tt><b>(cpr.sim.outlnk(cpr.sim.outptr(i)-1+j))</b></tt> is the index of the link connected to the <tt><b>j</b></tt>th output port of the <tt><b>i</b></tt>th block. where <tt><b>j</b></tt> goes from <tt><b>1</b></tt> to <tt><b>(cpr.sim.outptr(i+1)-cpr.sim.outptr(i))</b></tt>.

  </li><li><b><font color="maroon">lnkptr</font></b>
: (nblink+1) x 1 vector of integers,   <tt><b>k</b></tt>th entry points to the beginning of region within <tt><b>outtb</b></tt> dedicated to link indexed <tt><b>k</b></tt>.

  </li><li><b><font color="maroon">rpar</font></b>
: vector of blocks' floating point parameters

  </li><li><b><font color="maroon">rpptr</font></b>
: (nblk+1) x 1 vector of integers,    <tt><b>cpr.sim.rpar(cpr.sim.rpptr(i):cpr.sim.rpptr(i+1)-1)</b></tt> is the vector of floating point parameters of the <tt><b>i</b></tt>th block.

  </li><li><b><font color="maroon">ipar</font></b>
: vector of blocks' integer parameters

  </li><li><b><font color="maroon">ipptr</font></b>
: (nblk+1) x 1 vector of integers,    <tt><b>cpr.sim.ipar(cpr.sim.ipptr(i):cpr.sim.ipptr(i+1)-1)</b></tt> is the vector of integer parameters of the <tt><b>i</b></tt>th block.

  </li><li><b><font color="maroon">clkptr</font></b>
: (nblk+1) x 1 vector of integers,    <tt><b>(cpr.sim.clkptr(i):cpr.sim.clkptr(i+1)-1)</b></tt> gives the number of output event ports.

  </li><li><b><font color="maroon">ordptr</font></b>
: 1 vector of integers,  <tt><b>(cpr.sim.ordptr(i):cpr.sim.ordptr(i+1)-1)</b></tt> points to the region within <tt><b>ordclk</b></tt> indicates the number of blocks activated by the output event ports numbered <tt><b>i</b></tt>.

  </li><li><b><font color="maroon">execlk</font></b>
: unused 

  </li><li><b><font color="maroon">ordclk</font></b>
: two-column matrix of integers, the first indicates the number of activated blocks and the second indicates the number of the corresponding input event port.

  </li><li><b><font color="maroon">cord</font></b>
: two-column matrix of integers, the first indicates the number of permanently (continuous time) activated blocks and the second indicates the number of the corresponding input event port.

  </li><li><b><font color="maroon">oord</font></b>
: two-column matrix of integers,   subset of cord whose outputs affect computation of continuous state derivatives. 

  </li><li><b><font color="maroon">zord</font></b>
: two-column matrix of integers,   subset of cord whose outputs affect computation of zero-crossing surfaces.

  </li><li><b><font color="maroon">critev</font></b>
: 1 vector of integers,  ?????????????????

  </li><li><b><font color="maroon">nb</font></b>
: unused 

  </li><li><b><font color="maroon">ztyp</font></b>
: (nblk+1) x 1 vector of integers,   <tt><b>(cpr.sim.ztyp(i)</b></tt> is coded 1 if the block numbered <tt><b>i</b></tt> is from Zcross type (0 if else).

  </li><li><b><font color="maroon">nblk</font></b>
: number of blocks (unused)

  </li><li><b><font color="maroon">ndcblk</font></b>
: unused 

  </li><li><b><font color="maroon">subscr</font></b>
: ?????????????????

  </li><li><b><font color="maroon">funtyp</font></b>
: (nblk+1) x 1 vector of integers, indicates the routine type of blocks

  </li><li><b><font color="maroon">iord</font></b>
: two-column matrix of integers, the first contains all the numbers of blocks to be updated in the initialization of the simulation among which the continuous blocks. The second column indicates the number of the corresponding input event port.

  </li><li><b><font color="maroon">labels</font></b>
: (nblk+1) x 1 vector of character strings, contains the label (if any) associated to each block. 

  </li></ul><H3><font color="blue">Voir aussi</font></H3><p><ul><a href="scicos_model.htm"><tt><b>scicos_model</b></tt></a>&nbsp;&nbsp;<a href="scicos_diagram.htm"><tt><b>scicos_diagram</b></tt></a>&nbsp;&nbsp;</ul></p></body></html>
