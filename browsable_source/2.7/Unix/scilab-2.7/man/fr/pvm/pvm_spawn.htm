<html><head><meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1"><title>pvm_spawn</title></head><body bgcolor="FFFFFF"><CENTER>Scilab function  </CENTER><p><b>pvm_spawn -  Starts new Scilab processes.  </b></p><H3><font color="blue">Sequence d'appel</font></H3><dl><dd><tt>[tids, numt] = pvm_spawn(task,  ntask, [nw], [where])  </tt></dd></dl><H3><font color="blue">Parametres</font></H3><ul><ul>
  <li><tt><b>task : string, which is the file name of the scilab script (see exec) to be  </b></tt>
    started. The Scilab script must already reside on the host on which it is to be started.  The name must an absolute path.
  </li>
  <li><tt><b>ntask  </b></tt>
    : integer, specifying the number of copies of the  scilab script to start.
  </li>
  <li><tt><b>win  </b></tt>
    : string (optional). If win is  equal to ``nw'' the Scilab process will be spawned in background with out any window coming up.
  </li>
  <li><tt><b>where  </b></tt>
    : string (optional), can be a host name such as ``tequila.ens-lyon.fr'' or a PVM architecture class such as ``SUN4''. 
  </li>
  <li><tt><b>numt  </b></tt>
    : integer, the actual number of tasks started. Values less than zero indicate a system error.
  </li>
  <p>
    tids : row of integers, array of the tids of the PVM processes started  by this pvm_spawn call.
  </p>
 </ul></ul><H3><font color="blue">Description</font></H3><dl>
  <p>
    <tt><b>pvm_spawn</b></tt> 
    starts
  </p>
  <p>
    copies of the scilab script
  </p>
  <p>
    On systems that support environment,
    spawn passes selected variables from parent environment to children tasks.
    If set, the envar <tt><b>PVM_EXPORT</b></tt> is passed.
    If PVM_EXPORT contains other names (separated by ':') they will
    be passed too.  This is useful for e.g.:
  </p>
  <pre>

 setenv DISPLAY myworkstation:0.0
 setenv MYSTERYVAR 13
 setenv PVM_EXPORT DISPLAY:MYSTERYVAR
   </pre>
  <p>
    The hosts on which
    the PVM processes are started are determined by 
    the
  </p>
  <p>
    arguments. On return the array
  </p>
  <p>
    contains the PVM task identifiers for each process started.
  </p>
  <p>
    If pvm_spawn starts one or more tasks,
  </p>
  <p>
    will be the actual number of tasks started.
    If a system error occurs then
  </p>
  <p>
    will be &lt; 0.
    If
  </p>
  <p>
    is less than
  </p>
  <p>
    then some executables
    have failed to start and the user should check the last
  </p>
  <p>
    locations in the
  </p>
  <p>
    array which will contain error codes
    (see below for meaning).
    The first
  </p>
  <p>
    tids in the array are always valid.
  </p>
  <p>
    When
    the argument
  </p>
  <p>
    is omitted a heuristic (round-robin assignment) is used to distribute the
  </p>
  <p>
    processes across the virtual machine.
  </p>
  <p>
    In the special case where a multiprocessor is specified by
  </p>
  <p>
    pvm_spawn will start all
  </p>
  <p>
    copies on this
    single machine using the vendor's underlying routines.
  </p>
  <p>
  </p>
  <p>
  </p>
  </dl><H3><font color="blue">Exemples</font></H3><ul><pre>
// create an exec file (script)
write(TMPDIR+'/foo.sce',['a=1';'plot2d()'])
// start a new Scilab on the same host to execute the script
[tids, numt] = pvm_spawn(TMPDIR+'/foo.sce',1)
pvm_kill(tids) //terminate the new scilab
 </pre></ul><H3><font color="blue">Voir aussi</font></H3><p><ul><a href="pvm.htm"><tt><b>pvm</b></tt></a>&nbsp;&nbsp;<a href="pvm_spawn_independent.htm"><tt><b>pvm_spawn_independent</b></tt></a>&nbsp;&nbsp;</ul></p></body></html>
