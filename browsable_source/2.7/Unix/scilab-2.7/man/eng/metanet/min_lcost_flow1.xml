<?xml version="1.0" encoding="ISO-8859-1" standalone="no"?> 
<!DOCTYPE MAN SYSTEM "../../man.dtd">
<MAN>
  <LANGUAGE>eng</LANGUAGE>
  <TITLE>min_lcost_flow1  </TITLE>
  <TYPE>Scilab function  </TYPE>
  <DATE>September 1995  </DATE>
  <SHORT_DESCRIPTION name="min_lcost_flow1"> minimum linear cost flow  </SHORT_DESCRIPTION>
  <CALLING_SEQUENCE>
  <CALLING_SEQUENCE_ITEM>[c,phi,flag] = min_lcost_flow1(g)  </CALLING_SEQUENCE_ITEM>
  </CALLING_SEQUENCE>
  <PARAM>
 <PARAM_INDENT>
  <PARAM_ITEM>
  <PARAM_NAME>g  </PARAM_NAME>
  <PARAM_DESCRIPTION>
    : graph list
  </PARAM_DESCRIPTION> 
  </PARAM_ITEM>
  <PARAM_ITEM>
  <PARAM_NAME>c  </PARAM_NAME>
  <PARAM_DESCRIPTION>
    : value of cost
  </PARAM_DESCRIPTION> 
  </PARAM_ITEM>
  <PARAM_ITEM>
  <PARAM_NAME>phi  </PARAM_NAME>
  <PARAM_DESCRIPTION>
    : row vector of the value of flow on the arcs
  </PARAM_DESCRIPTION> 
  </PARAM_ITEM>
  <PARAM_ITEM>
  <PARAM_NAME>flag  </PARAM_NAME>
  <PARAM_DESCRIPTION>
    : feasible problem flag (0 or 1)
  </PARAM_DESCRIPTION> 
  </PARAM_ITEM>
 </PARAM_INDENT>
  </PARAM>
  <DESCRIPTION>
  <P>
    <VERB>min_lcost_flow1</VERB> computes the minimum linear cost flow in the network 
    <VERB>g</VERB>. It returns the total cost of the flows on the arcs <VERB>c</VERB> and
    the row vector of the flows on the arcs <VERB>phi</VERB>. If the problem is not 
    feasible (impossible to find a compatible flow for instance), <VERB>flag</VERB> is 
    equal to 0, otherwise it is equal to 1.
  </P>
  <P>
    The bounds of the flow are given by the elements <VERB>edge_min_cap</VERB> and
    <VERB>edge_max_cap</VERB> of the graph list. 
    The value of the minimum capacity and of the maximum capacity must be non 
    negative and must be integer numbers.
    The value of the maximum capacity must be greater than or equal to the 
    value of the minimum capacity.
    If the value of <VERB>edge_min_cap</VERB> or <VERB>edge_max_cap</VERB> is not given (empty
    row vector <VERB>[]</VERB>), it is assumed to be equal to 0 on each edge.
  </P>
  <P>
    The costs on the edges are given by the element <VERB>edge_cost</VERB> of the 
    graph list.
    The costs must be non negative.
    If the value of <VERB>edge_cost</VERB> is not given (empty row vector <VERB>[]</VERB>), 
    it is assumed to be equal to 0 on each edge.
  </P>
  <P>
    The demands, element <VERB>node_demand</VERB> of the graph list, must be
    equal to zero.
  </P>
  <P>
    This function uses the out-of-kilter algorithm.
  </P>
  </DESCRIPTION>
  <EXAMPLE><![CDATA[
ta=[1 1 2 2 2 3 4 4 5 6 6 6 7 7 7 8 9 10 12 12 13 13 13 14 15 14 9 11 10 1 8];
he=[2 6 3 4 5 1 3 5 1 7 10 11 5 8 9 5 8 11 10 11 9 11 15 13 14 4 6 9 1 12 14];
g=make_graph('foo',1,15,ta,he);
g('node_x')=[194 191 106 194 296 305 305 418 422 432 552 550 549 416 548];
g('node_y')=[56 221 316 318 316 143 214 321 217 126 215 80 330 437 439];
show_graph(g);
g1=g;ma=arc_number(g1);
rand('uniform');
while %T then
  g1('edge_min_cap')=round(20*rand(1,ma));
  g1('edge_max_cap')=round(20*rand(1,ma))+g1('edge_min_cap')+33*ones(1,ma);
  g1('edge_cost')=round(10*rand(1,ma))+ones(1,ma);
  [c,phi,flag]=min_lcost_flow1(g1);
  if flag==1 then break; end;
end;  
x_message(['The cost is: '+string(c);
           'Showing the flow on the arcs ']);
ii=find(phi<>0); edgecolor=phi; edgecolor(ii)=11*ones(ii);
g1('edge_color')=edgecolor;
edgefontsize=8*ones(1,ma); edgefontsize(ii)=18*ones(ii);
g1('edge_font_size')=edgefontsize;
g1('edge_label')=string(phi);
show_graph(g1);
 ]]></EXAMPLE>
  <SEE_ALSO>
    <SEE_ALSO_ITEM> <LINK>min_lcost_cflow</LINK> </SEE_ALSO_ITEM>     <SEE_ALSO_ITEM> <LINK>min_lcost_flow2</LINK> </SEE_ALSO_ITEM>     <SEE_ALSO_ITEM> <LINK>min_qcost_flow</LINK> </SEE_ALSO_ITEM>
  </SEE_ALSO>
</MAN>
