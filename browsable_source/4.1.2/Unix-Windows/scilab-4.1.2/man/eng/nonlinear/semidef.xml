<?xml version="1.0" encoding="ISO-8859-1" standalone="no"?>
<!DOCTYPE MAN SYSTEM "../../manrev.dtd">
<MAN>
  <LANGUAGE>eng</LANGUAGE>
  <TITLE>semidef</TITLE>
  <TYPE>Scilab Function</TYPE>
  <DATE>April 1993</DATE>
  <SHORT_DESCRIPTION name="semidef"> semidefinite programming</SHORT_DESCRIPTION>
  <CALLING_SEQUENCE>
    <CALLING_SEQUENCE_ITEM>[x,Z,ul,info]=semidef(x0,Z0,F,blck_szs,c,options)  </CALLING_SEQUENCE_ITEM>
  </CALLING_SEQUENCE>
  <PARAM>
    <PARAM_INDENT>
      <PARAM_ITEM>
        <PARAM_NAME>x0</PARAM_NAME>
        <PARAM_DESCRIPTION>
          <SP>: m x 1 real column vector (must be strictly primal feasible, see below)</SP>
        </PARAM_DESCRIPTION>
      </PARAM_ITEM>
      <PARAM_ITEM>
        <PARAM_NAME>Z0</PARAM_NAME>
        <PARAM_DESCRIPTION>
          <SP>: L x 1 real vector (compressed form of a strictly feasible dual matrix, see below)</SP>
        </PARAM_DESCRIPTION>
      </PARAM_ITEM>
      <PARAM_ITEM>
        <PARAM_NAME>F</PARAM_NAME>
        <PARAM_DESCRIPTION>
          <SP>: L x (m+1) real matrix</SP>
        </PARAM_DESCRIPTION>
      </PARAM_ITEM>
      <PARAM_ITEM>
        <PARAM_NAME>blck_szs</PARAM_NAME>
        <PARAM_DESCRIPTION>
          <SP>:  p x 2 integer matrix (sizes of the blocks) defining the dimensions  of the (square) diagonal blocks <VERB>size(Fi(j)=blck_szs(j) j=1,...,m+1</VERB>.</SP>
        </PARAM_DESCRIPTION>
      </PARAM_ITEM>
      <PARAM_ITEM>
        <PARAM_NAME>c</PARAM_NAME>
        <PARAM_DESCRIPTION>
          <SP>: m x 1 real vector</SP>
        </PARAM_DESCRIPTION>
      </PARAM_ITEM>
      <PARAM_ITEM>
        <PARAM_NAME>options</PARAM_NAME>
        <PARAM_DESCRIPTION>
          <SP>: row vector with five entries <VERB>[nu,abstol,reltol,0,maxiters]</VERB></SP>
        </PARAM_DESCRIPTION>
      </PARAM_ITEM>
      <PARAM_ITEM>
        <PARAM_NAME>ul</PARAM_NAME>
        <PARAM_DESCRIPTION>
          <SP>: row vector with two entries</SP>
        </PARAM_DESCRIPTION>
      </PARAM_ITEM>
    </PARAM_INDENT>
  </PARAM>
  <DESCRIPTION>
    <P><VERB>[x,Z,ul,info]=semidef(x0,Z0,F,blck_szs,c,options)</VERB>
    solves semidefinite program:</P>
    <VERBATIM>
<![CDATA[

    minimize    c'*x
    subject to  F_0 + x_1*F_1 + ... + x_m*F_m  >= 0

 and its dual
 
    maximize    -Tr F_0 Z
    subject to  Tr F_i Z = c_i, i=1,...,m
                Z >= 0

   ]]>
    </VERBATIM>
    <P>
    exploiting block structure in the matrices <VERB>F_i</VERB>.</P>
    <P>
    It interfaces L. Vandenberghe and S. Boyd sp.c program.</P>
    <P>
    The <VERB>Fi's</VERB> matrices are stored columnwise in <VERB>F</VERB> in
    compressed format: if <VERB>F_i^j</VERB>, i=0,..,m, j=1,...,L denote the jth 
    (symmetric) diagonal block of <VERB>F_i</VERB>, then</P>
    <VERBATIM>
<![CDATA[
    [ pack(F_0^1)  pack(F_1^1) ...  pack(F_m^1) ]
    [ pack(F_0^2)  pack(F_1^2) ...  pack(F_m^2) ]
F=  [   ...       ...          ...              ]
    [ pack(F_0^L)  pack(F_1^L) ...  pack(F_m^L) ]
   ]]>
    </VERBATIM>
    <P>
    where <VERB>pack(M)</VERB>, for symmetric <VERB>M</VERB>, is the vector 
    <VERB>[M(1,1);M(1,2);...;M(1,n);M(2,2);M(2,3);...;M(2,n);...;M(n,n)]</VERB>
    (obtained by scanning columnwise the lower triangular part of <VERB>M</VERB>).</P>
    <P><VERB>blck_szs</VERB> gives the size of block <VERB>j</VERB>, ie, 
    <VERB>size(F_i^j)=blck_szs(j)</VERB>.</P>
    <P>
    Z is a block diagonal matrix with L blocks <VERB>Z^0, ..., Z^{L-1}</VERB>.
    <VERB>Z^j</VERB> has size <VERB>blck_szs[j] times blck_szs[j]</VERB>.
    Every block is stored using packed storage of the lower triangular part.</P>
    <P>
    The 2 vector <VERB>ul</VERB> contains the primal objective value <VERB>c'*x</VERB>
    and the dual objective value <VERB>-Tr F_0*Z</VERB>.</P>
    <P>
    The entries of <VERB>options</VERB> are respectively:
    <VERB>nu</VERB> = a real parameter which ntrols the rate of convergence.
    <VERB>abstol</VERB> =   absolute tolerance.
    <VERB>reltol</VERB> =  relative tolerance (has a special meaning when negative).
    <VERB>tv</VERB>  target value, only referenced if <VERB>reltol &lt; 0</VERB>.
    <VERB>iters</VERB> =  on entry: maximum number of iterations &gt;= 0, on exit: 
    the number of iterations taken.</P>
    <P><VERB>info</VERB>  returns 1 if maxiters exceeded,  2 if absolute accuracy
    is reached, 3 if relative accuracy is reached, 4 if target value is
    reached, 5 if target value is  not achievable;  negative values 
    indicate errors.</P>
    <P>
    Convergence criterion:</P>
    <VERBATIM>
<![CDATA[
 (1) maxiters is exceeded
 (2) duality gap is less than abstol
 (3) primal and dual objective are both positive and
     duality gap is less than (reltol * dual objective)
     or primal and dual objective are both negative and
     duality gap is less than (reltol * minus the primal objective)
 (4) reltol is negative and
     primal objective is less than tv or dual objective is greater
     than tv
   ]]>
    </VERBATIM>
  </DESCRIPTION>
  <EXAMPLE>
<![CDATA[
F0=[2,1,0,0;
    1,2,0,0;
    0,0,3,1
    0,0,1,3];
F1=[1,2,0,0;
    2,1,0,0;
    0,0,1,3;
    0,0,3,1]
F2=[2,2,0,0;
    2,2,0,0;
    0,0,3,4;
    0,0,4,4];
blck_szs=[2,2];
F01=F0(1:2,1:2);F02=F0(3:4,3:4);
F11=F1(1:2,1:2);F12=F1(3:4,3:4);
F21=F2(1:2,1:2);F22=F2(3:4,3:4);
x0=[0;0]
Z0=2*F0;
Z01=Z0(1:2,1:2);Z02=Z0(3:4,3:4);
FF=[[F01(:);F02(:)],[F11(:);F12(:)],[F21(:);F22(:)]]
ZZ0=[[Z01(:);Z02(:)]];
c=[trace(F1*Z0);trace(F2*Z0)];
options=[10,1.d-10,1.d-10,0,50];
[x,Z,ul,info]=semidef(x0,pack(ZZ0),pack(FF),blck_szs,c,options)
w=vec2list(unpack(Z,blck_szs),[blck_szs;blck_szs]);Z=sysdiag(w(1),w(2))
c'*x+trace(F0*Z)
spec(F0+F1*x(1)+F2*x(2))
trace(F1*Z)-c(1)
trace(F2*Z)-c(2)
 ]]>
  </EXAMPLE>
</MAN>
