 
clear;lines(0);
 
xref=[1;2;3];x0=[1;-1;1]
 x0  =
 
!   1. !
! - 1. !
!   1. !
 
deff('[f,g,ind]=cost(x,ind)','f=0.5*norm(x-xref)^2,g=x-xref');
 
[f,xopt]=optim(cost,x0)      //Simplest call
 xopt  =
 
!   1. !
!   2. !
!   3. !
 f  =
 
    0.  
 
[f,xopt,gopt]=optim(cost,x0,'gc')  // By conjugate gradient
 gopt  =
 
!   0. !
!   0. !
!   0. !
 xopt  =
 
!   1. !
!   2. !
!   3. !
 f  =
 
    0.  
 
[f,xopt,gopt]=optim(cost,x0,'nd')  //Seen as non differentiable
 gopt  =
 
!   0.        !
! - 1.776D-14 !
! - 1.199D-14 !
 xopt  =
 
!   1. !
!   2. !
!   3. !
 f  =
 
    2.297D-28  
 
[f,xopt,gopt]=optim(cost,'b',[-1;0;2],[0.5;1;4],x0) //  Bounds on x
 gopt  =
 
! - 0.5 !
! - 1.  !
!   0.  !
 xopt  =
 
!   0.5 !
!   1.  !
!   3.  !
 f  =
 
    0.625  
 
[f,xopt,gopt]=optim(cost,'b',[-1;0;2],[0.5;1;4],x0,'gc') //  Bounds on x
 gopt  =
 
! - 0.5 !
! - 1.  !
!   0.  !
 xopt  =
 
!   0.5 !
!   1.  !
!   3.  !
 f  =
 
    0.625  
 
[f,xopt,gopt]=optim(cost,'b',[-1;0;2],[0.5;1;4],x0,'gc','ar',3)
 gopt  =
 
! - 0.5       !
! - 1.        !
! - 0.4933333 !
 xopt  =
 
!   0.5       !
!   1.        !
!   2.5066667 !
 f  =
 
    0.7466889  
 
// Here, 3 calls to cost are allowed.
 
// Now calling the Fortran subroutine "genros" in SCIDIR/default/Ex-optim.f
 
// See also the link function for dynamically linking an objective function
 
[f,xopt,gopt]=optim('genros',[1;2;3])    //Rosenbrock's function
 gopt  =
 
!   0.        !
!   0.        !
! - 2.220D-16 !
 xopt  =
 
!   1. !
!   1. !
!   1. !
 f  =
 
    1.  
 
