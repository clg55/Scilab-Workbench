.TH max_flow 1 "September 1995" "Scilab Group" "Scilab function"
.so man1/sci.an
.SH NAME
max_flow - maximum flow between two nodes
.SH CALLING SEQUENCE
.nf
[v,phi] = maxflow(i,j,g,[p])
.fi
.SH PARAMETERS
.TP 2
i
: integer, number of start node
.TP 2
j
: integer, number of end node
.TP 2
g
: graph-list
.TP 2
p
: row vector of a compatible initial flow
.TP 2
v
: value of the maximum flow it is exists
.TP 4
phi
: row vector of the value of the flow on the arcs
.SH DESCRIPTION
\fVmax_flow\fR returns the value of maximum flow \fVv\fR from node number
\fVi\fR to node number \fVj\fR if it exists, and the value of the flow 
on each arc as a row vector \fVphi\fR. All the computations are made with 
integer numbers. The graph must be directed.

The bounds of the flow are given by the elements \fVedge_min_cap\fR and
\fVedge_max_cap\fR of the graph-list. 
The value of the maximum capacity must be greater than or equal to the 
value of the minimum capacity.
If the value of \fVedge_min_cap\fR or \fVedge_max_cap\fR is not given (empty
row vector \fV[]\fR), it is assumed to be equal to 0 on each edge.

\fVp\fR is a compatible flow for initializing the algorithm. It is an
optional argument. If it is not given, it is considered as equal to null 
vector. If given, checking is made to see if it is really a compatible flow.
.SH EXAMPLE
.nf
ta=[1 1 2 2 2 3 4 4 5 6 6 6 7 7 7 8 9 10 12 12 13 13 13 14 15 14 9 11 10];
he=[2 6 3 4 5 1 3 5 1 7 10 11 5 8 9 5 8 11 10 11 9 11 15 13 14 4 6 9 1];
gt=make_graph('foo',1,15,ta,he);
gt('node_x')=[194 191 106 194 296 305 305 418 422 432 552 550 549 416 548]; 
gt('node_y')=[56 181 276 278 276 103 174 281 177 86 175 90 290 397 399];
show_graph(gt,'rep');
g1=gt; ma=g1('edge_number'); n=g1('node_number');
g1('edge_min_cap')=0*ones(1,ma);
rand('uniform');
g1('edge_max_cap')=20*rand(1,ma)+ones(1,ma);
source=15; sink=1;
[v,phi]=max_flow(source,sink,g1);
x_message(['The maximum flow is: '+string(v);
           'Showing the flow on the arcs']);
nodetype=0*ones(1,n); nodetype(source)=2; nodetype(sink)=1;
g1('node_type')=nodetype;
nodecolor=0*ones(1,n); nodecolor(source)=11; nodecolor(sink)=11;
g1('node_color')=nodecolor;
ii=find(phi<>0); edgecolor=phi; edgecolor(ii)=11*ones(ii);
g1('edge_color')=edgecolor;
edgefontsize=8*ones(1,ma); edgefontsize(ii)=18*ones(ii);
g1('edge_font_size')=edgefontsize;
g1('edge_label')=string(phi);
show_graph(g1,'rep');
.fi
