


link(1)                        Scilab Function                        link(1)






NAME
  link - dynamic link

CALLING SEQUENCE
  link(files, sub-name)
  link(files, sub-name, flag)
  names=link()

PARAMETERS

  files
       : a character string or a vector of character strings. ld files used
       to define the new entry point (compiled routines, user libraries, sys-
       tem libraries,..)

  sub-name
       : a character string. Name of the entry point in files to be linked.

  flag : character string 'f' or 'c' for Fortran (default) or C code.

  names
       : a vector of character string. Names of dynamically linked entry
       points.

DESCRIPTION
  link is a dynamic link facility: this command allows to add new compiled
  Fortran or C routines to scilab executable code.  Linked routines can be
  called interactively by the function fort.  Linked routines can also be
  used as "external" for e.g. non linear problem solvers (ode, optim, intg,
  Fvdassl

  The command link('foo.o','foo','f') links the Fortran object file foo.o
  with the entry point foo.

  The command link('foo.o','foo','c') links the C object file foo.o with the
  entry point foo.

  The command link('SCIDIR/libs/calelm.a','dcopy') links the Fortran routine
  dcopy in the library calelm.a.

  Note that with dld (Linux machine) you can use an empty string if you want
  to link a program which is already in one of the scilab libraries (e.g.
  link(' ','dcopy')).

  A routine can be linked several times: each link undo the previous one.

  Used with no arguments, link() returns the current linked routines.

  If Scilab is compiled with static link (this is the default for SystemV
  machines) you may have to include the system libraries in the "link"
  command.

  For example, if foo.o defines the object code of a routine named foo, you
  will use link in one the following way:
  link('foo.o','foo').
  link('foo.o -lm -lc','foo','c').
  link('foo.o -lfor -lm -lc','foo').
  link('foo.o -lftn -lm -lc','foo').
  link('foo.o -L/opt/SUNWspro/SC3.0/lib/lib77 -lm -lc','foo')
  If Scilab compiled with the "shared" option, the first example can be used
  even if a warning for unresolved references is issued.

  (Experienced) users may also link a new scilab interface routine to add a
  set of new functions. See Intersci documentation for interface generation
  and addinter function.

REMARKS
  For IBM-RS6000 only one program can be dynamically linked.

  When running a demo, you may have some trouble with the link due to slight
  differences between systems. In this case, you modify the demo by adding
  the needed libraries in the link command.

SEE ALSO
  fort,c_link,addinter















































