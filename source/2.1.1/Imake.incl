/* 
Scilab needs Athena Widget Libraries libXaw.a and libXmu.a.
If you run X11R5, these libraries are given with Scilab distribution
for convenience.
If you run X11R4 you ***NEED*** to have them and to comment the following line.
*/

#define WithLocalXaw

/*
 *****************************************************************************
 *                                                                           *
 *              MODIFY BELOW ONLY IF YOU REALLY KNOW WHAT YOU DO             *
 *                                                                           *
 *****************************************************************************
*/

#define DEFAULT_LINK

/* By default linking is static or not static according to the machine
   If you want to modify the default:
     for static linking uncommment the following line */
/* #define STATIC_LINK */
/*   for shared linking uncomment the following line */
/* #define SHARED_LINK */

/* Fortran and C compilation options for various architectures 
	FFOPTIONS
	FDEBUGFLAGS
	CCOPTIONS
	CDEBUGFLAGS
	EXTRA_LOAD_FLAGS
*/

/* For SUN running SunOS */
#if defined(SparcArchitecture) && !defined(SYSV)
FFOPTIONS =
FDEBUGFLAGS = -O
CCOPTIONS =
CDEBUGFLAGS = -O
EXTRA_LOAD_FLAGS =
#if defined(DEFAULT_LINK)
FLOCAL_LDFLAGS = -Bstatic
LLOCAL_LDFLAGS = -Bstatic
LOCAL_LDFLAGS = -Bstatic
#endif
#if defined(SHARED_LINK)
FLOCAL_LDFLAGS =
LLOCAL_LDFLAGS =
LOCAL_LDFLAGS =
#endif
#endif

/* For SUN running Solaris 2.x */
#if defined(SparcArchitecture) && defined(SYSV)
FFOPTIONS =
FDEBUGFLAGS = -O
CCOPTIONS =
CDEBUGFLAGS = -O
EXTRA_LOAD_FLAGS = -ldl
#if defined(STATIC_LINK)
EXTRA_LOAD_FLAGS = 
FLOCAL_LDFLAGS = -Bstatic
LLOCAL_LDFLAGS = -Bstatic
LOCAL_LDFLAGS = -Bstatic
#endif
#endif

/* slackware distribution with gcc 
	f77 exists on the distribution and performs f2c + gcc
*/
/* For PC running Linux */
#if defined(LinuxArchitecture)
FFOPTIONS = 
FDEBUGFLAGS = -O
CCOPTIONS =
CDEBUGFLAGS = -O
EXTRA_LOAD_FLAGS = -lieee
#endif

/* For DEC Mips */
#if defined(UltrixArchitecture)
FFOPTIONS =  -fpe1
FDEBUGFLAGS = -O0
CCOPTIONS =
CDEBUGFLAGS = -O0
EXTRA_LOAD_FLAGS = 
#endif

/* For SGI running IRIX 5.2 */
#if defined(SGIArchitecture)
FFOPTIONS =  -Nl999 -Nn15000
FDEBUGFLAGS = -O
CCOPTIONS = -cckr
CDEBUGFLAGS = -O
EXTRA_LOAD_FLAGS = 
#endif

/* For DEC Alpha running OSF/1 1.3, 2.0 and still better 3.0 */
#if defined(AlphaArchitecture)
FC=DECFORT_DEBUG=T;export DECFORT_DEBUG;f77
FFOPTIONS =  -fpe3 -switch nosqrt_recip
FDEBUGFLAGS = -O
CCOPTIONS=
CDEBUGFLAGS = -O
EXTRA_LOAD_FLAGS = -ldnet_stub
#if defined(STATIC_LINK)
FLOCAL_LDFLAGS = -non_shared
LOCAL_LDFLAGS = -non_shared
LLOCAL_LDFLAGS = -non_shared
#endif
#endif

/* For HP 9000-7xx running HP-UX 9.01 */
#if defined(HPArchitecture)
FC = fort77
FFOPTIONS = +E4 
FDEBUGFLAGS = -O +Obb1200
CCOPTIONS=
CDEBUGFLAGS = -O
EXTRA_LOAD_FLAGS =
#if defined(DEFAULT_LINK)
FLOCAL_LDFLAGS = -Wl,-a,archive
LOCAL_LDFLAGS = -Wl,-a,archive
LLOCAL_LDFLAGS = -a archive
#endif
#if defined(SHARED_LINK)
FLOCAL_LDFLAGS =
LOCAL_LDFLAGS =
LLOCAL_LDFLAGS =
#endif
#endif

/* For IBM RS6000 */
#if defined(AIXArchitecture)
FFOPTIONS = -qcharlen=4096
FDEBUGFLAGS = 
CCOPTIONS = -Daix
CDEBUGFLAGS = 
EXTRA_LOAD_FLAGS =
#endif

/*
 *****************************************************************************
 *                                                                           *
 *                       DO NOT MODIFY BELOW THIS LINE                       *
 *                                                                           *
 *****************************************************************************
*/

SCIVERSION = Scilab-2.1.1
SCIDATE = 11 April 1995

#if defined(WithLocalXaw)
EXTRA_INCLUDES = -I$(SCIDIR)/routines
#endif

/* C options */
#if AlternateUsrLibDir && defined(UseInstalled)
LDOPTIONS = $(CDEBUGFLAGS) $(CCOPTIONS) $(LOCAL_LDFLAGS) -L$(USRLIBDIR)
#else
LDOPTIONS = $(CDEBUGFLAGS) $(CCOPTIONS) $(LOCAL_LDFLAGS)
#endif

/* Fortran options */
FFLAGS = $(FDEBUGFLAGS) $(FFOPTIONS)
#if AlternateUsrLibDir && defined(UseInstalled)
FLDOPTIONS = $(FDEBUGFLAGS) $(FFOPTIONS) $(FLOCAL_LDFLAGS) -L$(USRLIBDIR)
#else
FLDOPTIONS = $(FDEBUGFLAGS) $(FFOPTIONS) $(FLOCAL_LDFLAGS)
#endif

/* Linker options */
#if AlternateUsrLibDir && defined(UseInstalled)
LLDOPTIONS = $(LLOCAL_LDFLAGS) -L$(USRLIBDIR)
#else
LLDOPTIONS = $(LLOCAL_LDFLAGS)
#endif

PATHSP=$(SCIDIR)/routines
PATHO=$(SCIDIR)/libs

/* Scilab files */
.SUFFIXES: .sci .bin .dia .tst $(SUFFIXES)

/* termcap library :used in xsci and bin/scilex */

#ifndef TermcapLibrary
#if SystemV && !defined(MacIIArchitecture)
#if defined(CrayArchitecture) || defined(HPArchitecture) || defined(RsArchitecture)
#define TermcapLibrary -lcurses		/* special cases of System V */
#else
#define TermcapLibrary -ltermlib	/* usually in here */
#endif
#else
#define TermcapLibrary -ltermcap	/* bsd puts it here */
#endif
#endif

TERMCAPLIB = TermcapLibrary

#ifndef NullParameter
#define NullParameter
#endif 

/*
 * FortranProgramTarget - generate rules to compile and link the indicated 
 * program; since it does not use any default object files, it may be used for
 * multiple programs in the same Imakefile.
 */
#ifndef FortranProgramTarget
#define	FortranProgramTarget(program,objects)				@@\
program: objects							@@\
	RemoveTargetProgram($@)						@@\
	$(FC) -o $@ objects $(FLDOPTIONS) $(LDLIBS) $(EXTRA_LOAD_FLAGS) @@\
									@@\
clean::									@@\
	$(RM) program 							@@\
									@@\
distclean:: clean 							@@\

#endif /* FortranProgramTarget */


/*
 * LibraryTarget - generate rules to create a library.
 */
#ifndef LibraryTarget
#define	LibraryTarget(libname,objlist)					@@\
AllTarget(libname)							@@\
									@@\
libname: objlist							@@\
	@echo Creation of libname 					@@\
	@$(RM) $@							@@\
	@$(AR) $@ objlist						@@\
	@sleep 1							@@\
	@if [ "$(RANLIB)" != "" ] ; then $(RANLIB) $@ ; fi		@@\
									@@\
distclean:: clean 							@@\
	$(RM) libname							@@\

#endif /* LibraryTarget */

/*
 * FortranDependTarget - generate rules to compute dependencies for all 
 * Fortran files listed in $(FSRCS).
 */
#ifndef FortranDependTarget
#define	FortranDependTarget()						@@\
depend::								@@\
	$(SCIDIR)/util/fdepend $(FSRCS) @@\

#endif /* DependTarget */

/*
 * Target for Scilab macros 
 */

#ifndef SciLibTarget
#define SciLibTarget(objlist)						@@\
all :: objlist lib							@@\
									@@\
lib : objlist names							@@\
	@echo generating lib and names 					@@\
	@$(SCIDIR)/bin/scilab -lib $(NAME) SCI/macros/$(NAM)		@@\
									@@\
names: objlist								@@\
	@$(RM) names;touch names;					@@\
	@for i in $(MACROSN); do  (echo $$i >> names );done 		@@\
									@@\
distclean:: clean 							@@\
	$(RM) lib names *.bin						@@\

#endif /* SciLibTarget */

/*
 * Target for Scilab macros 
 */
#ifndef NormalScilabObjectRule
#define NormalScilabObjectRule()					@@\
									@@\
.sci.bin:								@@\
	@$(SCIDIR)/bin/scilab -comp  $*.sci				@@\

#endif /* NormalScilabObjectRule  */

/*
 * Target for whatis in Man
 */
#ifndef WhatisRule
#define WhatisRule(objects)				@@\
$(WHATIS)	:  	objects				@@\
	@echo "Updating whatis database"		@@\
	$(MW) `pwd`					@@\

#endif /* WhatisRule  */

/*
 * depend target for whatis 
 */
#ifndef WhatisDependTarget
#define	WhatisDependTarget()						@@\
depend::								@@\
	$(SCIDIR)/util/wdepend						@@\

#endif /* DependTarget */

#ifndef ScilabTestTarget
#define	ScilabTestTarget()						@@\
.tst.dia :								@@\
	@$(SCIDIR)/util/scidem $(SCIDIR) $*.tst $*.dia			@@\

#endif	 /* ScilabTestTarget */

/*
 * Script For bin/scilab target 
 */

#define SEDGLOBALSCRIPT(source,program) \
	-e "s+SCILAB_DIRECTORY+$(SCIDIR)+" \		@@\
	-e "s+SCILAB_VERSION+$(SCIVERSION)+" \		@@\
	-e "s+Ccompiler+$(CC)+" \			@@\
	-e "s+Fcompiler+$(FC)+" \			@@\
	-e "s+SCILAB_DATE+$(SCIDATE)+" source > program;

#if defined(HPArchitecture)
#define SEDSCRIPT(source,program) sed -e "s+do_mank +do_mank_hp +" SEDGLOBALSCRIPT(source,program)
#else 
#if defined(MipsArchitecture)
#define SEDSCRIPT(source,program) if [ -f /bin/sh5 ] ; then \		@@\
		shname=sh5;\						@@\
	else \								@@\
		shname=sh;\						@@\
	fi;\								@@\
	sed -e "s+#!/bin/sh+#!/bin/$$shname+" \				@@\
	-e "s+do_mank +do_mank_mips +" \				@@\
	-e "s+do_man +do_man_mips +" SEDGLOBALSCRIPT(source,program)
#else
#define SEDSCRIPT(source,program) sed  SEDGLOBALSCRIPT(source,program)
#endif
#endif

#ifndef ScilabScriptsTarget
#define	ScilabScriptsTarget(program,source,depend)			@@\
program: source depend							@@\
	@$(RM) program							@@\
	@SEDSCRIPT(source,program)					@@\
	@chmod +x program						@@\
	@chmod g+w program						@@\
	@echo program created						@@\
									@@\
clean::									@@\
	$(RM) program 							@@\
									@@\
distclean:: clean							@@\

#endif /* ScilabScriptsTarget */

#ifndef ScriptsTarget
#define	ScriptsTarget(program,source,depend)				@@\
program: source depend							@@\
	@$(RM) program							@@\
	@sed SEDGLOBALSCRIPT(source,program)				@@\
	@chmod +x program						@@\
	@chmod g+w program						@@\
	@echo program created						@@\

#endif /* ScriptsTarget */


/*
 * DistCleanSubdirs - generate rules to do distclean
 * in the given subdirectories.
 */
#ifndef DistCleanSubdirs
#define DistCleanSubdirs(dirs) \
NamedTargetSubdirs(distclean,dirs,"making" distclean,NullParameter,distclean)
#endif /* DistCleanSubdirs */

/*
 * Tr2texTarget - generate rules to produce tex source whith tr2tex 
 */

#define SEDJOB  sed -e 's/\\documentstyle/%\\documentstyle/' \
			-e 's/\\end{document}//' -e 's/\\begin{document}//' 

#ifndef Tr2texTarget
#define Tr2texTarget(chap,mandir) 					@@\
chap : $(TR2TEX) mandir							@@\
	$(TR2TEX)  -m mandir > /tmp/chap				@@\
	@SEDJOB /tmp/chap > chap					@@\
	$(RM) /tmp/chap							@@\

#endif /* Tr2texTarget */


/*
 * ScilexProgramTarget - generate rules to compile and link the scilex 
 * program this is like FortranProgram Target but with added stuffs 
 * to deal with dynamic linking in scilex 
 * program; since it does not use any default object files, it may be used for
 * multiple programs in the same Imakefile.
 */

#if defined(AIXArchitecture)
#ifndef ScilexProgramTarget
#define	ScilexProgramTarget(program,objects,deplibs,defa,locallibs,syslibs)	@@\
LLD=ld -bh:4 -T512 -H512 -o /tmp/scilex-1  -bnodelcsect /lib/crt0.o 	@@\
LLD1=ld -bh:4 -T512 -H512 -o $@ -bnodelcsect -bE:bin/scilex.exp /lib/crt0.o 	@@\
LLDLF=-lxlf -lm -lc							@@\
									@@\
program: objects deplibs						@@\
	@x=1;if [ -f $@ ] ; then  \					@@\
	x=`find $(DEFAULTS) $(LIBR)  \( -name '*.a' -o -name '*.o' \) -newer $@ -print | wc -l `; \ @@\
	fi;\								@@\
	if [ $$x -ne 0 ] ; then \					@@\
			echo "linking";\				@@\
	RemoveTargetProgram($@)	;\					@@\
	RemoveTargetProgram(/tmp/scilex-1);\				@@\
	$(LLD) objects defa $(LLDOPTIONS) locallibs $(LDLIBS) syslibs $(EXTRA_LOAD_FLAGS) $(LLDLF);\ @@\
	(echo "#!$(SCIDIR)/program"; /usr/ucb/nm -gp /tmp/scilex-1 | sed -n -e '/.* T \./s///p' -e '/.* [DB] /s///p' | sort -u) > bin/scilex.exp	;\	@@\
	RemoveTargetProgram(/tmp/scilex-1) ;\				@@\
	$(LLD1) objects defa $(LLDOPTIONS) locallibs $(LDLIBS) syslibs $(EXTRA_LOAD_FLAGS) $(LLDLF) ;\ @@\
	else \								@@\
			echo program is up to date ;\			@@\
	fi								@@\
									@@\
clean::									@@\
	$(RM) program 							@@\
									@@\
distclean:: clean 							@@\
									@@\

#endif /* ScilexProgramTarget */
#endif /* AIXarch */

/*
 * ScilexProgramTarget for HP
 */

#if defined(HPArchitecture)
#ifndef ScilexProgramTarget
#define	ScilexProgramTarget(program,objects,deplibs,defa,locallibs,syslibs)	@@\
LDD=ld -x -o $@ /lib/crt0.o 					@@\
LDDLF= -lU77 -lm -lcl -lisamstub -lc 					@@\
									@@\
program: objects deplibs						@@\
	@x=1;if [ -f $@ ] ; then  \					@@\
	x=`find $(DEFAULTS) $(LIBR)  \( -name '*.a' -o -name '*.o' \) -newer $@ -print | wc -l `; \ @@\
	fi;\								@@\
	if [ $$x -ne 0 ] ; then \					@@\
	RemoveTargetProgram($@)	;\					@@\
			echo "linking";\				@@\
	$(LDD) objects defa $(LLDOPTIONS) locallibs  $(LDLIBS) syslibs $(EXTRA_LOAD_FLAGS) $(LDDLF) ;\ @@\
	else \								@@\
			echo program is up to date ;\			@@\
	fi								@@\
									@@\
clean::									@@\
	$(RM) program 							@@\
									@@\
distclean:: clean 							@@\
									@@\

#endif /* ScilexProgramTarget */
#endif /* HParch */

/*
 * ScilexProgramTarget for Linux 
 */

#if defined(LinuxArchitecture)
#ifndef ScilexProgramTarget
#define	ScilexProgramTarget(program,objects,deplibs,defa,locallibs,syslibs)	@@\
									@@\
program: objects deplibs						@@\
	@x=1;if [ -f $@ ] ; then  \					@@\
	x=`find $(DEFAULTS) $(LIBR)  \( -name '*.a' -o -name '*.o' \) -newer $@ -print | wc -l `; \ @@\
	fi;\								@@\
	if [ $$x -ne 0 ] ; then \					@@\
	RemoveTargetProgram($@)	;\					@@\
			echo "linking";\				@@\
	$(FC) -o $@ objects defa $(FLDOPTIONS) locallibs  $(LDLIBS) syslibs $(EXTRA_LOAD_FLAGS) $(LDDLF) ;\ @@\
	else \								@@\
			echo program is up to date ;\			@@\
	fi								@@\
									@@\
clean::									@@\
	$(RM) program 							@@\
									@@\
distclean:: clean 							@@\
									@@\

#endif /* ScilexProgramTarget */
#endif /* Linuxarch */

/*
 * ScilexProgramTarget for Dec MIPS 
 */

#if defined(UltrixArchitecture)
#ifndef ScilexProgramTarget
#define	ScilexProgramTarget(program,objects,deplibs,defa,locallibs,syslibs)	@@\
program: objects deplibs						@@\
	@x=1;if [ -f $@ ] ; then  \					@@\
	x=`find $(DEFAULTS) $(LIBR)  \( -name '*.a' -o -name '*.o' \) -newer $@ -print | wc -l `; \ @@\
	fi;\								@@\
	if [ $$x -ne 0 ] ; then \					@@\
			RemoveTargetProgram($@); \			@@\
			echo "linking";\				@@\
			$(FC) -o $@ objects defa $(FLDOPTIONS) locallibs $(LDLIBS) syslibs $(EXTRA_LOAD_FLAGS) ;\ @@\
			nm $@ > $@.nm;\ @@\
			grep ' T ' $@.nm > $@.txtnm;\ @@\
			grep ' [A-SU-Z] ' $@.nm > $@.datnm;\ @@\
			rm $@.nm;\ @@\
	else \								@@\
			echo program is up to date ;\			@@\
	fi								@@\
									@@\
									@@\
clean::									@@\
	$(RM) program 							@@\
									@@\
distclean:: clean 							@@\
									@@\

#endif /* ScilexProgramTarget */
#endif /* Dec MIPS */


/*
 * ScilexProgramTarget general case 
 */

#ifndef ScilexProgramTarget
#define	ScilexProgramTarget(program,objects,deplibs,defa,locallibs,syslibs)	@@\
program: objects deplibs						@@\
	@x=1;if [ -f $@ ] ; then  \					@@\
	x=`find $(DEFAULTS) $(LIBR)  \( -name '*.a' -o -name '*.o' \) -newer $@ -print | wc -l `; \ @@\
	fi;\								@@\
	if [ $$x -ne 0 ] ; then \					@@\
			RemoveTargetProgram($@); \			@@\
			echo "linking";\				@@\
			$(FC) -o $@ objects defa $(FLDOPTIONS) locallibs $(LDLIBS) syslibs $(EXTRA_LOAD_FLAGS) ;\ @@\
	else \								@@\
			echo program is up to date ;\			@@\
	fi								@@\
									@@\
									@@\
clean::									@@\
	$(RM) program 							@@\
									@@\
distclean:: clean 							@@\
									@@\

#endif /* ScilexProgramTarget */


/*
 * Compilation Target for demo of Scilex
 * Special rules for linux 
 * because f77 (the script ) doesn't work properly 
 * with f77 -c pipo.f -o /tmp/poo.o 
 */

#if defined(LinuxArchitecture)
#ifndef ObjectDemo
#define ObjectDemo(objfile,source,options)				@@\
objfile : source 							@@\
	x=`pwd`;cd /tmp/;cp $$x/source . ;\				@@\
	$(FC) $(FFLAGS) options  -c source  -o objfile			@@\
									@@\
clean::									@@\
	$(RM) objfile 							@@\
									@@\
distclean:: clean 							@@\
									@@\

#endif /* ScilexProgramTarget */
#endif

/*
 * Compilation Target for demo of Scilex
 */

#ifndef ObjectDemo
#define ObjectDemo(objfile,source,options)				@@\
objfile : source 							@@\
	$(FC) $(FFLAGS) options  -c source  -o objfile			@@\
									@@\
clean::									@@\
	$(RM) objfile 							@@\
									@@\
distclean:: clean 							@@\
									@@\

#endif /* ScilexProgramTarget */
