
abinv(1)                       Scilab Function                       abinv(1)
NAME
  abinv -  AB invariant subspace

CALLING SEQUENCE
  [X,dims,F,U,k,Z]=abinv(Sl,alfa,beta)

PARAMETERS

  sl        : syslin list containing the matrices [A,B,C,D].

  alfa      : real number or vector (possibly complex, location of closed
            loop poles)

  beta      : real number or vector (possibly complex, location of closed
            loop poles)

  X         : orthogonal matrix of size nx (dim of state space).

  dims      : integer row vector dims=[dimR,dimVg,dimV,noc,nos] with
            dimR<=dimVg<=dimV<=noc<=nos

  F         : real matrix (state feedback)

  k         : integer (normal rank of Sl)

  Z         : non-singular linear system (syslin list)

DESCRIPTION
  Output nulling subspace (maximal unobservable subspace) for Sl = linear
  system defined by a syslin list containing the matrices [A,B,C,D] of Sl.
  The vector dims=[dimR,dimVg,dimV,noc,nos] gives the dimensions of subspaces
  defined as columns od X.  The dimV first columns of X i.e V=X(:,1:dimV),
  span the AB-invariant subspace of Sl i.e the unobservable subspace of
  (A+B*F,C+D*F). (dimV=nx  iff C^(-1)(D)=X).

  The dimR first columns of X i.e. R=X(:,1:dimR) spans the controllable part
  of Sl in V, (dimR<=dimV). (dimR=0 for a left invertible system). R is the
  maximal controllability subspace of Sl in kernel(C).

  The dimVg first columns of X spans Vg=maximal AB-stabilizable subspace of
  Sl. (dimR<=dimVg<=dimV).

  F is a decoupling feedback: for X=[V,X2] (X2=X(:,dimV+1:nx)) one has
  X2'*(A+B*F)*V=0 and (C+D*F)*V=0.

  The zeros od Sl are given by : X0=X(:,dimR+1:dimV); spec(X0'*(A+B*F)*X0)
  i.e. there are dimV-dimR closed-loop fixed modes.

  If the optional parameter alfa is given as input, the dimR controllable
  modes of (A+BF) in V are set to alfa (or to [alfa(1), alfa(2), ...].  (alfa
  can be a vector (real or complex pairs) or a (real) number).  Default value
  alfa=-1.

  If the optional real parameter beta is given as input, the noc-dimV con-
  trollable modes of (A+BF) "outside" V are set to beta (or
  [beta(1),beta(2),...]). Default value beta=-1.

  In the X,U bases, the matrices [X'*(A+B*F)*X,X'*B*U;(C+D*F)*X,D*U] are
  displayed as follows:

  [A11,*,*,*,*,*]  [B11 * ]
  [0,A22,*,*,*,*]  [0   * ]
  [0,0,A33,*,*,*]  [0   * ]
  [0,0,0,A44,*,*]  [0  B42]
  [0,0,0,0,A55,*]  [0   0 ]
  [0,0,0,0,0,A66]  [0   0 ]

  [0,0,0,*,*,*]    [0  D2]
  where the X-partitioning is defined by dims and the U-partitioning is
  defined by k.

  A11 is (dimR x dimR) and has its eigenvalues set to alfa(i)'s.  The pair
  (A11,B11) is controllable and B11 has nu-k columns. A22 is a stable
  (dimVg-dimR x dimVg-dimR) matrix.  A33 is an unstable (dimV-dimVg x dimV-
  dimVg) matrix (see st_ility).

  A44 is (noc-dimV x noc-dimV) and has its eigenvalues set to beta(i)'s.  The
  pair (A44,B42) is controllable. A55 is a stable (nos-noc x nos-noc) matrix.
  A66 is an unstable (nx-nos x nx-nos) matrix (see st_ility).

  Z is a column compression of Sl and k is the normal rank of Sl i.e Sl*Z is
  a column-compressed linear system. k is the column dimensions of
  B42,B52,B62 and D2.  [B42;B52;B62;D2] is full column rank and has rank k.

  This function can be used for the (exact) disturbance decoupling problem.
  DDPS:
     Find u=Fx+Rd which reject Q*d and stabilizes the plant:

      xdot=Ax+Bu+Qd
      y=Cx+Du
  DDPS has a solution iff Im(Q) is included in Vg + Im(B).
  Let G=(X(:,dimVg+1:nx))'= left annihilator of Vg i.e. G*Vg=0;
  B2=G*B; Q2=G*Q; DDPS solvable iff B2(:,1:k)*R1 + Q2 =0 has a solution.
  R=[R1;*] is the solution  (with F=output of abinv).
  Im(Q2) is in Im(B2) means row-compression of B2=>row-compression of Q2
  Then C*[(sI-A-B*F)^(-1)+D]*(Q+B*R) =0   (<=>G*(Q+B*R)=0)

EXAMPLE
  nu=3;ny=4;nx=7;
  nrt=2;ngt=3;ng0=3;nvt=5;rk=2;
  flag=list('on',nrt,ngt,ng0,nvt,rk);
  Sl=ssrand(ny,nu,nx,flag);alfa=-1;beta=-2;
  [X,dims,F,U,k,Z]=abinv(Sl,alfa,beta);
  [A,B,C,D]=abcd(Sl);dimV=dims(3);dimR=dims(1);
  V=X(:,1:dimV);X2=X(:,dimV+1:nx);
  X2'*(A+B*F)*V
  (C+D*F)*V
  X0=X(:,dimR+1:dimV); spec(X0'*(A+B*F)*X0)
  trzeros(Sl)
  spec(A+B*F)   //nr=2 evals at -1 and noc-dimV=2 evals at -2.
  clean(ss2tf(Sl*Z))
  A=diag(1:6);A(2,2)=-7;A(5,5)=-9;B=[1,2;0,3;0,4;0,5;0,0;0,0];C=[zeros(3,3),eye(3,3)];
  sl=syslin('c',A,B,C);sl=ss2ss(sl,rand(6,6));
  [X,dims,F,U,k,Z]=abinv(sl,alfa,beta);
  [A,B,C,D]=abcd(sl);clean(X'*(A+B*F)*X)
  clean(X'*B*U)
AUTHOR
  F.D.
SEE ALSO
  cainv, st_ility, ssrand, ss2ss
